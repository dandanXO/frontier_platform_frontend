/* tslint:disable */
/* eslint-disable */
/**
 * Frontier Platform API
 *  ## Authentication This API uses token authentication (Bearer in HTTP Header). First you retrieve a new Bearer token using sign-in apis. After that you can use it to access other resources.  **Bearer token example**  `eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjMxMyIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL2VtYWlsYWRkcmVzcyI6ImJyaWFuY2hvdTczMTBAZ21haWwuY29tIiwiZXhwIjoxNjI4NTE4OTgzLCJpc3MiOiJodHRwczovL3RleHRpbGUtd2ViYXBpLmZyb250aWVyLmNvb2wiLCJhdWQiOiJodHRwczovL3RleHRpbGUtd2ViYXBpLmZyb250aWVyLmNvb2wifQ.PNu0iU3x0QrGTjARx7W93B5Lsc8HRApdnHgTnTtOAr4`  ## Status codes This API uses HTTP status codes to communicate with the API. + `200 OK` - Response to a successful GET, PUT, PATCH or DELETE. + `400 Bad Request` - Malformed request; request body validation errors. + `401 Unauthorized` - When no or invalid authentication details are provided. + `403 Forbidden` - When authentication succeeded but authenticated user doesn\'t have access to the resource. + `415 Unsupported Media Type` - the server refuses to accept the request because the payload format is in an unsupported format ## Roles Each API endpoint has described minimal role to access. Only users with specific roles can access those endpoints. For insufficient role `403 Forbidden` HTTP response will be returned.  User roles:    + `11111 (Org Owner)` - the organization owner    + `222222 (Group Owner)` - the group owner  ## Representation of dates and times All exchange of date and time-related data MUST be done according to `Unix Timestamp` and stored in `UTC+0`. All dates in the API are numbers in the following format: `1628503326`.   ## pagination  > --- 
 *
 * The version of the OpenAPI document: 2.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from "./configuration";
import type { RequestArgs } from "./base";
import type { AxiosInstance, AxiosResponse } from 'axios';
import { RequiredError } from "./base";

/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        } 
        else {
            Object.keys(parameter).forEach(currentKey => 
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)
            );
        }
    } 
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } 
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? convertMapsAndSetsToPlain(value) : {})
        : (value || "");
}

function convertMapsAndSetsToPlain(value: any): any {
    if (typeof Set === "undefined") return value;
    if (typeof Map === "undefined") return value;
    if (typeof value !== "object" || !value) {
        return value;
    }
    if (value instanceof Set) {
        return Array.from(value).map(item => convertMapsAndSetsToPlain(item));
    }
    if (value instanceof Map) {
        const entries: Array<[string, any]> = [];
        value.forEach((value: any, key: any) => {
            entries.push([key, convertMapsAndSetsToPlain(value)])
        });
        return objectFromEntries(entries);
    }
    if (Array.isArray(value)) {
        return value.map(it => convertMapsAndSetsToPlain(it));
    }
    return objectFromEntries(objectEntries(value)
        .map(([k, v]) => [k, convertMapsAndSetsToPlain(v)]));
}

/**
 * Ponyfill for Object.entries
 */
function objectEntries(object: Record<string, any>): Array<[string, any]> {
    return Object.keys(object).map(key => [key, object[key]]);
}

/**
 * Ponyfill for Object.fromEntries
 */
function objectFromEntries(entries: any): Record<string, any> {
    return [...entries].reduce((object, [key, val]) => {
        object[key] = val;
        return object;
    }, {});
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}
