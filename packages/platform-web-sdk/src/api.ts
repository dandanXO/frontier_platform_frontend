/* tslint:disable */
/* eslint-disable */
/**
 * Frontier Platform API
 *  ## Authentication This API uses token authentication (Bearer in HTTP Header). First you retrieve a new Bearer token using sign-in apis. After that you can use it to access other resources.  **Bearer token example**  `eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IjMxMyIsImh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL2VtYWlsYWRkcmVzcyI6ImJyaWFuY2hvdTczMTBAZ21haWwuY29tIiwiZXhwIjoxNjI4NTE4OTgzLCJpc3MiOiJodHRwczovL3RleHRpbGUtd2ViYXBpLmZyb250aWVyLmNvb2wiLCJhdWQiOiJodHRwczovL3RleHRpbGUtd2ViYXBpLmZyb250aWVyLmNvb2wifQ.PNu0iU3x0QrGTjARx7W93B5Lsc8HRApdnHgTnTtOAr4`  ## Status codes This API uses HTTP status codes to communicate with the API. + `200 OK` - Response to a successful GET, PUT, PATCH or DELETE. + `400 Bad Request` - Malformed request; request body validation errors. + `401 Unauthorized` - When no or invalid authentication details are provided. + `403 Forbidden` - When authentication succeeded but authenticated user doesn\'t have access to the resource. + `415 Unsupported Media Type` - the server refuses to accept the request because the payload format is in an unsupported format ## Roles Each API endpoint has described minimal role to access. Only users with specific roles can access those endpoints. For insufficient role `403 Forbidden` HTTP response will be returned.  User roles:    + `11111 (Org Owner)` - the organization owner    + `222222 (Group Owner)` - the group owner  ## Representation of dates and times All exchange of date and time-related data MUST be done according to `Unix Timestamp` and stored in `UTC+0`. All dates in the API are numbers in the following format: `1628503326`.   ## pagination  > --- 
 *
 * The version of the OpenAPI document: 2.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AssetFilter
 */
export interface AssetFilter {
    /**
     * 
     * @type {boolean}
     * @memberof AssetFilter
     */
    'hasPrice'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AssetFilter
     */
    'complete'?: AssetFilterCompleteEnum;
    /**
     * 
     * @type {string}
     * @memberof AssetFilter
     */
    'category'?: string;
    /**
     * 
     * @type {Array<FilterContentListInner>}
     * @memberof AssetFilter
     */
    'contentList'?: Array<FilterContentListInner>;
    /**
     * 
     * @type {string}
     * @memberof AssetFilter
     */
    'pattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetFilter
     */
    'color'?: string;
    /**
     * 
     * @type {FilterWidth}
     * @memberof AssetFilter
     */
    'width'?: FilterWidth;
    /**
     * 
     * @type {FilterWeightGsm}
     * @memberof AssetFilter
     */
    'weightGsm'?: FilterWeightGsm;
    /**
     * 
     * @type {string}
     * @memberof AssetFilter
     */
    'warpDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetFilter
     */
    'weftDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetFilter
     */
    'wovenWarpYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetFilter
     */
    'wovenWeftYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetFilter
     */
    'knitYarnCount'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AssetFilter
     */
    'finishList'?: Array<string>;
    /**
     * 
     * @type {FilterInventory}
     * @memberof AssetFilter
     */
    'inventory'?: FilterInventory;
}

export const AssetFilterCompleteEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type AssetFilterCompleteEnum = typeof AssetFilterCompleteEnum[keyof typeof AssetFilterCompleteEnum];

/**
 * 
 * @export
 * @interface BreadcrumbListInner
 */
export interface BreadcrumbListInner {
    /**
     * 
     * @type {number}
     * @memberof BreadcrumbListInner
     */
    'workspaceNodeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof BreadcrumbListInner
     */
    'workspaceNodeLocation'?: BreadcrumbListInnerWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {string}
     * @memberof BreadcrumbListInner
     */
    'name'?: string;
}

export const BreadcrumbListInnerWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type BreadcrumbListInnerWorkspaceNodeLocationEnum = typeof BreadcrumbListInnerWorkspaceNodeLocationEnum[keyof typeof BreadcrumbListInnerWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface CarbonEmission
 */
export interface CarbonEmission {
    /**
     * 
     * @type {CarbonEmissionCo2}
     * @memberof CarbonEmission
     */
    'co2'?: CarbonEmissionCo2;
    /**
     * 
     * @type {CarbonEmissionWater}
     * @memberof CarbonEmission
     */
    'water'?: CarbonEmissionWater;
    /**
     * 
     * @type {CarbonEmissionLand}
     * @memberof CarbonEmission
     */
    'land'?: CarbonEmissionLand;
    /**
     * 
     * @type {CarbonEmissionEnergy}
     * @memberof CarbonEmission
     */
    'energy'?: CarbonEmissionEnergy;
    /**
     * M2F數據最後更新時間，若未有值則為null
     * @type {number}
     * @memberof CarbonEmission
     */
    'lastUpdateTime'?: number | null;
    /**
     * 未有訂閱M2F加值服務時為NULL
     * @type {number}
     * @memberof CarbonEmission
     */
    'materialOwnerMade2FlowPlanType'?: CarbonEmissionMaterialOwnerMade2FlowPlanTypeEnum;
    /**
     * 未有訂閱M2F加值服務時為NULL
     * @type {number}
     * @memberof CarbonEmission
     */
    'viewerMade2FlowPlanType'?: CarbonEmissionViewerMade2FlowPlanTypeEnum;
}

export const CarbonEmissionMaterialOwnerMade2FlowPlanTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type CarbonEmissionMaterialOwnerMade2FlowPlanTypeEnum = typeof CarbonEmissionMaterialOwnerMade2FlowPlanTypeEnum[keyof typeof CarbonEmissionMaterialOwnerMade2FlowPlanTypeEnum];
export const CarbonEmissionViewerMade2FlowPlanTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type CarbonEmissionViewerMade2FlowPlanTypeEnum = typeof CarbonEmissionViewerMade2FlowPlanTypeEnum[keyof typeof CarbonEmissionViewerMade2FlowPlanTypeEnum];

/**
 * 
 * @export
 * @interface CarbonEmissionCo2
 */
export interface CarbonEmissionCo2 {
    /**
     * 
     * @type {number}
     * @memberof CarbonEmissionCo2
     */
    'benchmark'?: number;
    /**
     * 對應UI的Result
     * @type {number}
     * @memberof CarbonEmissionCo2
     */
    'personalized'?: number;
    /**
     * 
     * @type {number}
     * @memberof CarbonEmissionCo2
     */
    'differenceInPercent'?: number;
    /**
     * driven by car (km)
     * @type {number}
     * @memberof CarbonEmissionCo2
     */
    'saving'?: number;
}
/**
 * 
 * @export
 * @interface CarbonEmissionEnergy
 */
export interface CarbonEmissionEnergy {
    /**
     * 
     * @type {number}
     * @memberof CarbonEmissionEnergy
     */
    'benchmark'?: number;
    /**
     * 
     * @type {number}
     * @memberof CarbonEmissionEnergy
     */
    'personalized'?: number;
    /**
     * 
     * @type {number}
     * @memberof CarbonEmissionEnergy
     */
    'differenceInPercent'?: number;
    /**
     * Watching TV (hours)
     * @type {number}
     * @memberof CarbonEmissionEnergy
     */
    'saving'?: number;
}
/**
 * 
 * @export
 * @interface CarbonEmissionLand
 */
export interface CarbonEmissionLand {
    /**
     * 
     * @type {number}
     * @memberof CarbonEmissionLand
     */
    'benchmark'?: number;
    /**
     * 對應UI的Result
     * @type {number}
     * @memberof CarbonEmissionLand
     */
    'personalized'?: number;
    /**
     * 
     * @type {number}
     * @memberof CarbonEmissionLand
     */
    'differenceInPercent'?: number;
    /**
     * A4 paper
     * @type {number}
     * @memberof CarbonEmissionLand
     */
    'saving'?: number;
}
/**
 * 
 * @export
 * @interface CarbonEmissionWater
 */
export interface CarbonEmissionWater {
    /**
     * 
     * @type {number}
     * @memberof CarbonEmissionWater
     */
    'benchmark'?: number;
    /**
     * 對應UI的Result
     * @type {number}
     * @memberof CarbonEmissionWater
     */
    'personalized'?: number;
    /**
     * 
     * @type {number}
     * @memberof CarbonEmissionWater
     */
    'differenceInPercent'?: number;
    /**
     * days of drinking water (day)
     * @type {number}
     * @memberof CarbonEmissionWater
     */
    'saving'?: number;
}
/**
 * 
 * @export
 * @interface ChangeDigitalThreadWorkflowStageRequest
 */
export interface ChangeDigitalThreadWorkflowStageRequest {
    /**
     * 
     * @type {number}
     * @memberof ChangeDigitalThreadWorkflowStageRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof ChangeDigitalThreadWorkflowStageRequest
     */
    'digitalThreadSideId': number;
    /**
     * WorkflowStage Id
     * @type {number}
     * @memberof ChangeDigitalThreadWorkflowStageRequest
     */
    'workflowStageId'?: number;
}
/**
 * 
 * @export
 * @interface CheckCanDeleteWorkflowStage200Response
 */
export interface CheckCanDeleteWorkflowStage200Response {
    /**
     * 
     * @type {CheckCanDeleteWorkflowStage200ResponseResult}
     * @memberof CheckCanDeleteWorkflowStage200Response
     */
    'result'?: CheckCanDeleteWorkflowStage200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof CheckCanDeleteWorkflowStage200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof CheckCanDeleteWorkflowStage200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof CheckCanDeleteWorkflowStage200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface CheckCanDeleteWorkflowStage200ResponseResult
 */
export interface CheckCanDeleteWorkflowStage200ResponseResult {
    /**
     * 
     * @type {Array<CheckCanDeleteWorkflowStage200ResponseResultErrorListInner>}
     * @memberof CheckCanDeleteWorkflowStage200ResponseResult
     */
    'errorList': Array<CheckCanDeleteWorkflowStage200ResponseResultErrorListInner> | null;
}
/**
 * 
 * @export
 * @interface CheckCanDeleteWorkflowStage200ResponseResultErrorListInner
 */
export interface CheckCanDeleteWorkflowStage200ResponseResultErrorListInner {
    /**
     * 單位名稱
     * @type {string}
     * @memberof CheckCanDeleteWorkflowStage200ResponseResultErrorListInner
     */
    'ogName'?: string;
    /**
     * 標籤顏色
     * @type {string}
     * @memberof CheckCanDeleteWorkflowStage200ResponseResultErrorListInner
     */
    'labelColor'?: string;
}
/**
 * 
 * @export
 * @interface CheckCanDeleteWorkflowStageRequest
 */
export interface CheckCanDeleteWorkflowStageRequest {
    /**
     * 組織ID
     * @type {number}
     * @memberof CheckCanDeleteWorkflowStageRequest
     */
    'orgId': number;
    /**
     * WorkflowStage Id
     * @type {number}
     * @memberof CheckCanDeleteWorkflowStageRequest
     */
    'workflowStageId': number;
}
/**
 * 
 * @export
 * @interface ChildCollectionListInner
 */
export interface ChildCollectionListInner {
    /**
     * 
     * @type {number}
     * @memberof ChildCollectionListInner
     */
    'workspaceNodeId'?: number;
    /**
     * 這個 collection 是來自 org 或是 group 的 workspace
     * @type {number}
     * @memberof ChildCollectionListInner
     */
    'workspaceNodeLocation'?: ChildCollectionListInnerWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {number}
     * @memberof ChildCollectionListInner
     */
    'collectionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ChildCollectionListInner
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChildCollectionListInner
     */
    'isPublic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChildCollectionListInner
     */
    'isCanShared'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChildCollectionListInner
     */
    'isCanClone'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChildCollectionListInner
     */
    'isCanDownloadU3M'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChildCollectionListInner
     */
    'hasChildCollection'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChildCollectionListInner
     */
    'location'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChildCollectionListInner
     */
    'coverImgList'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ChildCollectionListInner
     */
    'itemCounts'?: number;
}

export const ChildCollectionListInnerWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ChildCollectionListInnerWorkspaceNodeLocationEnum = typeof ChildCollectionListInnerWorkspaceNodeLocationEnum[keyof typeof ChildCollectionListInnerWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface ChildMaterialListInner
 */
export interface ChildMaterialListInner {
    /**
     * 
     * @type {number}
     * @memberof ChildMaterialListInner
     */
    'workspaceNodeId'?: number;
    /**
     * 這個 material 是來自 org 或是 group 的 workspace
     * @type {number}
     * @memberof ChildMaterialListInner
     */
    'workspaceNodeLocation'?: ChildMaterialListInnerWorkspaceNodeLocationEnum;
    /**
     * 這個 material 是來自 org 或是 group 的 assets
     * @type {number}
     * @memberof ChildMaterialListInner
     */
    'sourceAssetLocation'?: ChildMaterialListInnerSourceAssetLocationEnum;
    /**
     * 
     * @type {number}
     * @memberof ChildMaterialListInner
     */
    'materialId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ChildMaterialListInner
     */
    'materialNo'?: string;
    /**
     * 
     * @type {OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerMainType}
     * @memberof ChildMaterialListInner
     */
    'mainType'?: OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerMainType;
    /**
     * 
     * @type {MaterialSubType}
     * @memberof ChildMaterialListInner
     */
    'subType'?: MaterialSubType;
    /**
     * 
     * @type {string}
     * @memberof ChildMaterialListInner
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChildMaterialListInner
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChildMaterialListInner
     */
    'finish'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChildMaterialListInner
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof ChildMaterialListInner
     */
    'weightOrThicknessUnit'?: ChildMaterialListInnerWeightOrThicknessUnitEnum;
    /**
     * 
     * @type {number}
     * @memberof ChildMaterialListInner
     */
    'weightGsmOrThickness'?: number;
    /**
     * 
     * @type {number}
     * @memberof ChildMaterialListInner
     */
    'weightOz'?: number;
    /**
     * 
     * @type {number}
     * @memberof ChildMaterialListInner
     */
    'weightGy'?: number;
    /**
     * 
     * @type {string}
     * @memberof ChildMaterialListInner
     */
    'warpDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChildMaterialListInner
     */
    'weftDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChildMaterialListInner
     */
    'warpYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChildMaterialListInner
     */
    'weftYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChildMaterialListInner
     */
    'coverImg'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChildMaterialListInner
     */
    'isPublic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChildMaterialListInner
     */
    'isCanShared'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChildMaterialListInner
     */
    'isCanClone'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChildMaterialListInner
     */
    'isCanDownloadU3M'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ChildMaterialListInner
     */
    'publicDate'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChildMaterialListInner
     */
    'location'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ChildMaterialListInner
     */
    'rank'?: number;
    /**
     * 
     * @type {number}
     * @memberof ChildMaterialListInner
     */
    'digitalThreadQty'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChildMaterialListInner
     */
    'digitalThreadHasUnread'?: boolean;
}

export const ChildMaterialListInnerWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ChildMaterialListInnerWorkspaceNodeLocationEnum = typeof ChildMaterialListInnerWorkspaceNodeLocationEnum[keyof typeof ChildMaterialListInnerWorkspaceNodeLocationEnum];
export const ChildMaterialListInnerSourceAssetLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ChildMaterialListInnerSourceAssetLocationEnum = typeof ChildMaterialListInnerSourceAssetLocationEnum[keyof typeof ChildMaterialListInnerSourceAssetLocationEnum];
export const ChildMaterialListInnerWeightOrThicknessUnitEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ChildMaterialListInnerWeightOrThicknessUnitEnum = typeof ChildMaterialListInnerWeightOrThicknessUnitEnum[keyof typeof ChildMaterialListInnerWeightOrThicknessUnitEnum];

/**
 * 
 * @export
 * @interface CodeCountryGet200Response
 */
export interface CodeCountryGet200Response {
    /**
     * 
     * @type {CodeCountryGet200ResponseResult}
     * @memberof CodeCountryGet200Response
     */
    'result'?: CodeCountryGet200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof CodeCountryGet200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof CodeCountryGet200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof CodeCountryGet200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface CodeCountryGet200ResponseResult
 */
export interface CodeCountryGet200ResponseResult {
    /**
     * 
     * @type {CodeCountryGet200ResponseResultCode}
     * @memberof CodeCountryGet200ResponseResult
     */
    'code'?: CodeCountryGet200ResponseResultCode;
}
/**
 * 
 * @export
 * @interface CodeCountryGet200ResponseResultCode
 */
export interface CodeCountryGet200ResponseResultCode {
    /**
     * 
     * @type {Array<CodeCountryGet200ResponseResultCodeCountryListInner>}
     * @memberof CodeCountryGet200ResponseResultCode
     */
    'countryList'?: Array<CodeCountryGet200ResponseResultCodeCountryListInner>;
}
/**
 * 
 * @export
 * @interface CodeCountryGet200ResponseResultCodeCountryListInner
 */
export interface CodeCountryGet200ResponseResultCodeCountryListInner {
    /**
     * 
     * @type {string}
     * @memberof CodeCountryGet200ResponseResultCodeCountryListInner
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodeCountryGet200ResponseResultCodeCountryListInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodeCountryGet200ResponseResultCodeCountryListInner
     */
    'native'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodeCountryGet200ResponseResultCodeCountryListInner
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodeCountryGet200ResponseResultCodeCountryListInner
     */
    'emoji'?: string;
}
/**
 * 
 * @export
 * @interface CodeFilterOptionGet200Response
 */
export interface CodeFilterOptionGet200Response {
    /**
     * 
     * @type {CodeFilterOptionGet200ResponseResult}
     * @memberof CodeFilterOptionGet200Response
     */
    'result'?: CodeFilterOptionGet200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof CodeFilterOptionGet200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof CodeFilterOptionGet200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof CodeFilterOptionGet200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface CodeFilterOptionGet200ResponseResult
 */
export interface CodeFilterOptionGet200ResponseResult {
    /**
     * 
     * @type {CodeFilterOptionGet200ResponseResultCode}
     * @memberof CodeFilterOptionGet200ResponseResult
     */
    'code'?: CodeFilterOptionGet200ResponseResultCode;
}
/**
 * 
 * @export
 * @interface CodeFilterOptionGet200ResponseResultCode
 */
export interface CodeFilterOptionGet200ResponseResultCode {
    /**
     * 
     * @type {CodeFilterOptionGet200ResponseResultCodeFilter}
     * @memberof CodeFilterOptionGet200ResponseResultCode
     */
    'filter'?: CodeFilterOptionGet200ResponseResultCodeFilter;
}
/**
 * 
 * @export
 * @interface CodeFilterOptionGet200ResponseResultCodeFilter
 */
export interface CodeFilterOptionGet200ResponseResultCodeFilter {
    /**
     * 
     * @type {Array<CodeFilterOptionGet200ResponseResultCodeFilterCategoryListInner>}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilter
     */
    'categoryList'?: Array<CodeFilterOptionGet200ResponseResultCodeFilterCategoryListInner>;
    /**
     * 
     * @type {Array<CodeFilterOptionGet200ResponseResultCodeFilterContentListInner>}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilter
     */
    'contentList'?: Array<CodeFilterOptionGet200ResponseResultCodeFilterContentListInner>;
    /**
     * 
     * @type {Array<CodeFilterOptionGet200ResponseResultCodeFilterPatternListInner>}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilter
     */
    'patternList'?: Array<CodeFilterOptionGet200ResponseResultCodeFilterPatternListInner>;
    /**
     * 
     * @type {Array<CodeFilterOptionGet200ResponseResultCodeFilterColorListInner>}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilter
     */
    'colorList'?: Array<CodeFilterOptionGet200ResponseResultCodeFilterColorListInner>;
    /**
     * 
     * @type {Array<CodeFilterOptionGet200ResponseResultCodeFilterContentListInner>}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilter
     */
    'finishList'?: Array<CodeFilterOptionGet200ResponseResultCodeFilterContentListInner>;
}
/**
 * 
 * @export
 * @interface CodeFilterOptionGet200ResponseResultCodeFilterCategoryListInner
 */
export interface CodeFilterOptionGet200ResponseResultCodeFilterCategoryListInner {
    /**
     * 
     * @type {string}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilterCategoryListInner
     */
    'key'?: string;
    /**
     * 
     * @type {Array<CodeFilterOptionGet200ResponseResultCodeFilterCategoryListInnerListInner>}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilterCategoryListInner
     */
    'list'?: Array<CodeFilterOptionGet200ResponseResultCodeFilterCategoryListInnerListInner>;
}
/**
 * 
 * @export
 * @interface CodeFilterOptionGet200ResponseResultCodeFilterCategoryListInnerListInner
 */
export interface CodeFilterOptionGet200ResponseResultCodeFilterCategoryListInnerListInner {
    /**
     * 
     * @type {string}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilterCategoryListInnerListInner
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilterCategoryListInnerListInner
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface CodeFilterOptionGet200ResponseResultCodeFilterColorListInner
 */
export interface CodeFilterOptionGet200ResponseResultCodeFilterColorListInner {
    /**
     * 
     * @type {string}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilterColorListInner
     */
    'value'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilterColorListInner
     */
    'hex'?: string;
}
/**
 * 
 * @export
 * @interface CodeFilterOptionGet200ResponseResultCodeFilterContentListInner
 */
export interface CodeFilterOptionGet200ResponseResultCodeFilterContentListInner {
    /**
     * 
     * @type {string}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilterContentListInner
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilterContentListInner
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface CodeFilterOptionGet200ResponseResultCodeFilterPatternListInner
 */
export interface CodeFilterOptionGet200ResponseResultCodeFilterPatternListInner {
    /**
     * 
     * @type {string}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilterPatternListInner
     */
    'key'?: string;
    /**
     * 
     * @type {Array<CodeFilterOptionGet200ResponseResultCodeFilterPatternListInnerListInner>}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilterPatternListInner
     */
    'list'?: Array<CodeFilterOptionGet200ResponseResultCodeFilterPatternListInnerListInner>;
}
/**
 * 
 * @export
 * @interface CodeFilterOptionGet200ResponseResultCodeFilterPatternListInnerListInner
 */
export interface CodeFilterOptionGet200ResponseResultCodeFilterPatternListInnerListInner {
    /**
     * 
     * @type {string}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilterPatternListInnerListInner
     */
    'value'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodeFilterOptionGet200ResponseResultCodeFilterPatternListInnerListInner
     */
    'img'?: string;
}
/**
 * 
 * @export
 * @interface CodeOrgCategoryListGet200Response
 */
export interface CodeOrgCategoryListGet200Response {
    /**
     * 
     * @type {CodeOrgCategoryListGet200ResponseResult}
     * @memberof CodeOrgCategoryListGet200Response
     */
    'result'?: CodeOrgCategoryListGet200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof CodeOrgCategoryListGet200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof CodeOrgCategoryListGet200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof CodeOrgCategoryListGet200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface CodeOrgCategoryListGet200ResponseResult
 */
export interface CodeOrgCategoryListGet200ResponseResult {
    /**
     * 
     * @type {CodeOrgCategoryListGet200ResponseResultCode}
     * @memberof CodeOrgCategoryListGet200ResponseResult
     */
    'code'?: CodeOrgCategoryListGet200ResponseResultCode;
}
/**
 * 
 * @export
 * @interface CodeOrgCategoryListGet200ResponseResultCode
 */
export interface CodeOrgCategoryListGet200ResponseResultCode {
    /**
     * 
     * @type {Array<CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInner>}
     * @memberof CodeOrgCategoryListGet200ResponseResultCode
     */
    'orgCategoryList'?: Array<CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInner>;
}
/**
 * 
 * @export
 * @interface CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInner
 */
export interface CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInner {
    /**
     * 
     * @type {string}
     * @memberof CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInner
     */
    'name'?: CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInnerNameEnum;
    /**
     * 組織類型 1: 品牌商 2: 供應商 3: 設計師 4: 其他 
     * @type {number}
     * @memberof CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInner
     */
    'orgCategoryId'?: CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInnerOrgCategoryIdEnum;
}

export const CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInnerNameEnum = {
    BRAND: '品牌商',
    SUPPLIER: '供應商',
    DESIGNER: '設計師',
    OTHER: '其他'
} as const;

export type CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInnerNameEnum = typeof CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInnerNameEnum[keyof typeof CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInnerNameEnum];
export const CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInnerOrgCategoryIdEnum = {
    BRAND: 1,
    SUPPLIER: 2,
    DESIGNER: 3,
    OTHER: 4
} as const;

export type CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInnerOrgCategoryIdEnum = typeof CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInnerOrgCategoryIdEnum[keyof typeof CodeOrgCategoryListGet200ResponseResultCodeOrgCategoryListInnerOrgCategoryIdEnum];

/**
 * 
 * @export
 * @interface CodePantoneGet200Response
 */
export interface CodePantoneGet200Response {
    /**
     * 
     * @type {CodePantoneGet200ResponseResult}
     * @memberof CodePantoneGet200Response
     */
    'result'?: CodePantoneGet200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof CodePantoneGet200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof CodePantoneGet200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof CodePantoneGet200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface CodePantoneGet200ResponseResult
 */
export interface CodePantoneGet200ResponseResult {
    /**
     * 
     * @type {CodePantoneGet200ResponseResultCode}
     * @memberof CodePantoneGet200ResponseResult
     */
    'code'?: CodePantoneGet200ResponseResultCode;
}
/**
 * 
 * @export
 * @interface CodePantoneGet200ResponseResultCode
 */
export interface CodePantoneGet200ResponseResultCode {
    /**
     * 
     * @type {Array<CodePantoneGet200ResponseResultCodePantoneListInner>}
     * @memberof CodePantoneGet200ResponseResultCode
     */
    'pantoneList'?: Array<CodePantoneGet200ResponseResultCodePantoneListInner>;
}
/**
 * 
 * @export
 * @interface CodePantoneGet200ResponseResultCodePantoneListInner
 */
export interface CodePantoneGet200ResponseResultCodePantoneListInner {
    /**
     * 
     * @type {number}
     * @memberof CodePantoneGet200ResponseResultCodePantoneListInner
     */
    'pantoneId'?: number;
    /**
     * 
     * @type {string}
     * @memberof CodePantoneGet200ResponseResultCodePantoneListInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodePantoneGet200ResponseResultCodePantoneListInner
     */
    'majorColorName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodePantoneGet200ResponseResultCodePantoneListInner
     */
    'colorName'?: string;
    /**
     * 
     * @type {number}
     * @memberof CodePantoneGet200ResponseResultCodePantoneListInner
     */
    'r'?: number;
    /**
     * 
     * @type {number}
     * @memberof CodePantoneGet200ResponseResultCodePantoneListInner
     */
    'g'?: number;
    /**
     * 
     * @type {number}
     * @memberof CodePantoneGet200ResponseResultCodePantoneListInner
     */
    'b'?: number;
}
/**
 * 
 * @export
 * @interface CodeRoleLimitTableGet200Response
 */
export interface CodeRoleLimitTableGet200Response {
    /**
     * 
     * @type {CodeRoleLimitTableGet200ResponseResult}
     * @memberof CodeRoleLimitTableGet200Response
     */
    'result'?: CodeRoleLimitTableGet200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof CodeRoleLimitTableGet200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof CodeRoleLimitTableGet200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof CodeRoleLimitTableGet200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface CodeRoleLimitTableGet200ResponseResult
 */
export interface CodeRoleLimitTableGet200ResponseResult {
    /**
     * 
     * @type {CodeRoleLimitTableGet200ResponseResultCode}
     * @memberof CodeRoleLimitTableGet200ResponseResult
     */
    'code'?: CodeRoleLimitTableGet200ResponseResultCode;
}
/**
 * 
 * @export
 * @interface CodeRoleLimitTableGet200ResponseResultCode
 */
export interface CodeRoleLimitTableGet200ResponseResultCode {
    /**
     * 
     * @type {Array<CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInner>}
     * @memberof CodeRoleLimitTableGet200ResponseResultCode
     */
    'roleLimit'?: Array<CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInner>;
}
/**
 * 
 * @export
 * @interface CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInner
 */
export interface CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInner {
    /**
     * 角色種類
     * @type {number}
     * @memberof CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInner
     */
    'orgRoleId'?: CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInnerOrgRoleIdEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInner
     */
    'groupRoleIdList'?: Array<CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInnerGroupRoleIdListEnum>;
}

export const CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInnerOrgRoleIdEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInnerOrgRoleIdEnum = typeof CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInnerOrgRoleIdEnum[keyof typeof CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInnerOrgRoleIdEnum];
export const CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInnerGroupRoleIdListEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInnerGroupRoleIdListEnum = typeof CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInnerGroupRoleIdListEnum[keyof typeof CodeRoleLimitTableGet200ResponseResultCodeRoleLimitInnerGroupRoleIdListEnum];

/**
 * 
 * @export
 * @interface CodeRoleListGet200Response
 */
export interface CodeRoleListGet200Response {
    /**
     * 
     * @type {CodeRoleListGet200ResponseResult}
     * @memberof CodeRoleListGet200Response
     */
    'result'?: CodeRoleListGet200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof CodeRoleListGet200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof CodeRoleListGet200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof CodeRoleListGet200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface CodeRoleListGet200ResponseResult
 */
export interface CodeRoleListGet200ResponseResult {
    /**
     * 
     * @type {CodeRoleListGet200ResponseResultCode}
     * @memberof CodeRoleListGet200ResponseResult
     */
    'code'?: CodeRoleListGet200ResponseResultCode;
}
/**
 * 
 * @export
 * @interface CodeRoleListGet200ResponseResultCode
 */
export interface CodeRoleListGet200ResponseResultCode {
    /**
     * 
     * @type {Array<CodeRoleListGet200ResponseResultCodeRoleListInner>}
     * @memberof CodeRoleListGet200ResponseResultCode
     */
    'roleList'?: Array<CodeRoleListGet200ResponseResultCodeRoleListInner>;
}
/**
 * 
 * @export
 * @interface CodeRoleListGet200ResponseResultCodeRoleListInner
 */
export interface CodeRoleListGet200ResponseResultCodeRoleListInner {
    /**
     * 
     * @type {string}
     * @memberof CodeRoleListGet200ResponseResultCodeRoleListInner
     */
    'name'?: CodeRoleListGet200ResponseResultCodeRoleListInnerNameEnum;
    /**
     * 角色種類
     * @type {number}
     * @memberof CodeRoleListGet200ResponseResultCodeRoleListInner
     */
    'roleId'?: CodeRoleListGet200ResponseResultCodeRoleListInnerRoleIdEnum;
}

export const CodeRoleListGet200ResponseResultCodeRoleListInnerNameEnum = {
    OrgOwner: 'Org Owner',
    OrgAdmin: 'Org Admin',
    GroupManager: 'Group Manager',
    Member1: 'Member1',
    Member2: 'Member2',
    Member2: 'Member2'
} as const;

export type CodeRoleListGet200ResponseResultCodeRoleListInnerNameEnum = typeof CodeRoleListGet200ResponseResultCodeRoleListInnerNameEnum[keyof typeof CodeRoleListGet200ResponseResultCodeRoleListInnerNameEnum];
export const CodeRoleListGet200ResponseResultCodeRoleListInnerRoleIdEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type CodeRoleListGet200ResponseResultCodeRoleListInnerRoleIdEnum = typeof CodeRoleListGet200ResponseResultCodeRoleListInnerRoleIdEnum[keyof typeof CodeRoleListGet200ResponseResultCodeRoleListInnerRoleIdEnum];

/**
 * 
 * @export
 * @interface CodeRolePermissionGet200Response
 */
export interface CodeRolePermissionGet200Response {
    /**
     * 
     * @type {boolean}
     * @memberof CodeRolePermissionGet200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof CodeRolePermissionGet200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof CodeRolePermissionGet200Response
     */
    'result'?: object | null;
    /**
     * 
     * @type {object}
     * @memberof CodeRolePermissionGet200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface Collection
 */
export interface Collection {
    /**
     * 
     * @type {number}
     * @memberof Collection
     */
    'workspaceNodeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Collection
     */
    'workspaceNodeLocation'?: CollectionWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {number}
     * @memberof Collection
     */
    'collectionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'trendBoardCoverImg'?: string;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'trendBoardDisplayFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    'trendBoardUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Collection
     */
    'isPublic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Collection
     */
    'isCanShared'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Collection
     */
    'isCanClone'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Collection
     */
    'isCanDownloadU3M'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Collection
     */
    'publicDate'?: number;
    /**
     * 
     * @type {number}
     * @memberof Collection
     */
    'createDate'?: number;
    /**
     * 
     * @type {Array<BreadcrumbListInner>}
     * @memberof Collection
     */
    'breadcrumbList'?: Array<BreadcrumbListInner>;
    /**
     * 
     * @type {Array<ChildCollectionListInner>}
     * @memberof Collection
     */
    'childCollectionList'?: Array<ChildCollectionListInner>;
    /**
     * 
     * @type {Array<ChildMaterialListInner>}
     * @memberof Collection
     */
    'childMaterialList'?: Array<ChildMaterialListInner>;
}

export const CollectionWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type CollectionWorkspaceNodeLocationEnum = typeof CollectionWorkspaceNodeLocationEnum[keyof typeof CollectionWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface CreateDownloadLogRequest
 */
export interface CreateDownloadLogRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateDownloadLogRequest
     */
    'materialId': number;
    /**
     * 下載項目 1: U3M,2: U3MA,3: glTF
     * @type {number}
     * @memberof CreateDownloadLogRequest
     */
    'category': CreateDownloadLogRequestCategoryEnum;
    /**
     * 
     * @type {FeatureType}
     * @memberof CreateDownloadLogRequest
     */
    'fromLocationType': FeatureType;
}

export const CreateDownloadLogRequestCategoryEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type CreateDownloadLogRequestCategoryEnum = typeof CreateDownloadLogRequestCategoryEnum[keyof typeof CreateDownloadLogRequestCategoryEnum];

/**
 * 
 * @export
 * @interface CreateViewerLogRequest
 */
export interface CreateViewerLogRequest {
    /**
     * 
     * @type {number}
     * @memberof CreateViewerLogRequest
     */
    'materialId': number;
    /**
     * 
     * @type {FeatureType}
     * @memberof CreateViewerLogRequest
     */
    'fromLocationType': FeatureType;
}


/**
 * 
 * @export
 * @interface CreateWorkflowStageRequest
 */
export interface CreateWorkflowStageRequest {
    /**
     * 組織ID
     * @type {number}
     * @memberof CreateWorkflowStageRequest
     */
    'orgId': number;
    /**
     * 
     * @type {OgType}
     * @memberof CreateWorkflowStageRequest
     */
    'ogType': OgType;
    /**
     * 單位(組織或團隊)ID
     * @type {number}
     * @memberof CreateWorkflowStageRequest
     */
    'ogId': number;
    /**
     * WorkflowStage名稱
     * @type {string}
     * @memberof CreateWorkflowStageRequest
     */
    'workflowStageName': string;
    /**
     * 要移動至該新增之WorkflowStage的Digital Thread清單
     * @type {Array<number>}
     * @memberof CreateWorkflowStageRequest
     */
    'digitalThreadSideIdList'?: Array<number> | null;
}


/**
 * 記錄正方形裁切圖片的參數
 * @export
 * @interface CropImageRecord
 */
export interface CropImageRecord {
    /**
     * 
     * @type {number}
     * @memberof CropImageRecord
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof CropImageRecord
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof CropImageRecord
     */
    'rotateDeg'?: number;
    /**
     * 
     * @type {number}
     * @memberof CropImageRecord
     */
    'scaleRatio'?: number;
}
/**
 * Dashboard資訊
 * @export
 * @interface Dashboard
 */
export interface Dashboard {
    /**
     * 
     * @type {DashboardCreateCounts}
     * @memberof Dashboard
     */
    'createCounts': DashboardCreateCounts;
    /**
     * 紋理數量資訊
     * @type {Array<DashboardTextureCountsInner>}
     * @memberof Dashboard
     */
    'textureCounts': Array<DashboardTextureCountsInner>;
    /**
     * 
     * @type {DashboardFabricKeywordCounts}
     * @memberof Dashboard
     */
    'fabricKeywordCounts': DashboardFabricKeywordCounts;
    /**
     * 
     * @type {DashboardEcoImpactorInformation}
     * @memberof Dashboard
     */
    'ecoImpactorInformation': DashboardEcoImpactorInformation;
}
/**
 * 資產及collection數量資訊
 * @export
 * @interface DashboardCreateCounts
 */
export interface DashboardCreateCounts {
    /**
     * 該單位的資產數量
     * @type {number}
     * @memberof DashboardCreateCounts
     */
    'yourAssetCounts': number;
    /**
     * 該單位的3D資產數量
     * @type {number}
     * @memberof DashboardCreateCounts
     */
    'threeDimensionAssetCounts': number;
    /**
     * 該單位的Collection數量
     * @type {number}
     * @memberof DashboardCreateCounts
     */
    'collectionCounts': number;
    /**
     * 該單位的SharedCollection數量
     * @type {number}
     * @memberof DashboardCreateCounts
     */
    'sharedCollectionCounts': number;
}
/**
 * 環保指標資訊
 * @export
 * @interface DashboardEcoImpactorInformation
 */
export interface DashboardEcoImpactorInformation {
    /**
     * 
     * @type {DashboardEcoImpactorInformationAll}
     * @memberof DashboardEcoImpactorInformation
     */
    'all': DashboardEcoImpactorInformationAll;
    /**
     * 
     * @type {DashboardEcoImpactorInformationInternal}
     * @memberof DashboardEcoImpactorInformation
     */
    'internal'?: DashboardEcoImpactorInformationInternal | null;
}
/**
 * 平台所有布片環保指標
 * @export
 * @interface DashboardEcoImpactorInformationAll
 */
export interface DashboardEcoImpactorInformationAll {
    /**
     * 平台所有布片環保指標-GHG
     * @type {Array<DashboardEcoImpactorInformationAllGhgInner>}
     * @memberof DashboardEcoImpactorInformationAll
     */
    'ghg': Array<DashboardEcoImpactorInformationAllGhgInner>;
    /**
     * 平台所有布片環保指標-Water
     * @type {Array<DashboardEcoImpactorInformationAllGhgInner>}
     * @memberof DashboardEcoImpactorInformationAll
     */
    'water': Array<DashboardEcoImpactorInformationAllGhgInner>;
    /**
     * 平台所有布片環保指標-Land
     * @type {Array<DashboardEcoImpactorInformationAllGhgInner>}
     * @memberof DashboardEcoImpactorInformationAll
     */
    'land': Array<DashboardEcoImpactorInformationAllGhgInner>;
}
/**
 * 
 * @export
 * @interface DashboardEcoImpactorInformationAllGhgInner
 */
export interface DashboardEcoImpactorInformationAllGhgInner {
    /**
     * 布片環保指標名稱
     * @type {string}
     * @memberof DashboardEcoImpactorInformationAllGhgInner
     */
    'name': string;
    /**
     * 布片環保指標數值
     * @type {number}
     * @memberof DashboardEcoImpactorInformationAllGhgInner
     */
    'value': number;
}
/**
 * 單位布片環保指標
 * @export
 * @interface DashboardEcoImpactorInformationInternal
 */
export interface DashboardEcoImpactorInformationInternal {
    /**
     * 單位布片環保指標-GHG
     * @type {Array<DashboardEcoImpactorInformationAllGhgInner>}
     * @memberof DashboardEcoImpactorInformationInternal
     */
    'ghg': Array<DashboardEcoImpactorInformationAllGhgInner>;
    /**
     * 單位布片環保指標-Water
     * @type {Array<DashboardEcoImpactorInformationAllGhgInner>}
     * @memberof DashboardEcoImpactorInformationInternal
     */
    'water': Array<DashboardEcoImpactorInformationAllGhgInner>;
    /**
     * 單位布片環保指標-Land
     * @type {Array<DashboardEcoImpactorInformationAllGhgInner>}
     * @memberof DashboardEcoImpactorInformationInternal
     */
    'land': Array<DashboardEcoImpactorInformationAllGhgInner>;
}
/**
 * 搜尋關鍵字數量資訊
 * @export
 * @interface DashboardFabricKeywordCounts
 */
export interface DashboardFabricKeywordCounts {
    /**
     * 
     * @type {DashboardFabricKeywordCountsLastMonth}
     * @memberof DashboardFabricKeywordCounts
     */
    'lastMonth': DashboardFabricKeywordCountsLastMonth;
    /**
     * 
     * @type {DashboardFabricKeywordCountsLast3Month}
     * @memberof DashboardFabricKeywordCounts
     */
    'last3Month': DashboardFabricKeywordCountsLast3Month;
}
/**
 * 上三個月搜尋關鍵字數量資訊
 * @export
 * @interface DashboardFabricKeywordCountsLast3Month
 */
export interface DashboardFabricKeywordCountsLast3Month {
    /**
     * 搜尋關鍵字日期
     * @type {Array}
     * @memberof DashboardFabricKeywordCountsLast3Month
     */
    'date': Array;
    /**
     * 搜尋關鍵字數量資訊
     * @type {Array<DashboardFabricKeywordCountsLastMonthDataInner>}
     * @memberof DashboardFabricKeywordCountsLast3Month
     */
    'data': Array<DashboardFabricKeywordCountsLastMonthDataInner>;
}
/**
 * 上個月搜尋關鍵字數量資訊
 * @export
 * @interface DashboardFabricKeywordCountsLastMonth
 */
export interface DashboardFabricKeywordCountsLastMonth {
    /**
     * 搜尋關鍵字日期
     * @type {Array}
     * @memberof DashboardFabricKeywordCountsLastMonth
     */
    'date': Array;
    /**
     * 搜尋關鍵字數量資訊
     * @type {Array<DashboardFabricKeywordCountsLastMonthDataInner>}
     * @memberof DashboardFabricKeywordCountsLastMonth
     */
    'data': Array<DashboardFabricKeywordCountsLastMonthDataInner>;
}
/**
 * 
 * @export
 * @interface DashboardFabricKeywordCountsLastMonthDataInner
 */
export interface DashboardFabricKeywordCountsLastMonthDataInner {
    /**
     * 搜尋關鍵字
     * @type {string}
     * @memberof DashboardFabricKeywordCountsLastMonthDataInner
     */
    'name': string;
    /**
     * 搜尋關鍵字數量
     * @type {Array<number>}
     * @memberof DashboardFabricKeywordCountsLastMonthDataInner
     */
    'value': Array<number>;
}
/**
 * 
 * @export
 * @interface DashboardTextureCountsInner
 */
export interface DashboardTextureCountsInner {
    /**
     * 紋理名稱
     * @type {string}
     * @memberof DashboardTextureCountsInner
     */
    'name': string;
    /**
     * 紋理內部資產數量
     * @type {number}
     * @memberof DashboardTextureCountsInner
     */
    'internal': number;
    /**
     * 紋理所有資產數量
     * @type {number}
     * @memberof DashboardTextureCountsInner
     */
    'all': number;
}
/**
 * 
 * @export
 * @interface DigitalThread
 */
export interface DigitalThread {
    /**
     * 
     * @type {Array<Sticker>}
     * @memberof DigitalThread
     */
    'stickerList'?: Array<Sticker>;
    /**
     * 
     * @type {number}
     * @memberof DigitalThread
     */
    'digitalThreadSideId': number;
    /**
     * 
     * @type {string}
     * @memberof DigitalThread
     */
    'digitalThreadName': string;
    /**
     * 檢視該DigitalThread的使用者是否為建立方組織的成員
     * @type {boolean}
     * @memberof DigitalThread
     */
    'isCreatorSide': boolean;
    /**
     * 檢視該DigitalThread的使用者是否為布片擁有者組織的成員
     * @type {boolean}
     * @memberof DigitalThread
     */
    'isMaterialOwnerSide': boolean;
    /**
     * 檢視該DigitalThread的使用者的side的ogType
     * @type {number}
     * @memberof DigitalThread
     */
    'sideOGType': number;
    /**
     * 檢視該DigitalThread的使用者的side的ogId
     * @type {number}
     * @memberof DigitalThread
     */
    'sideOGId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThread
     */
    'materialId': number;
    /**
     * 
     * @type {string}
     * @memberof DigitalThread
     */
    'materialNo': string;
    /**
     * 
     * @type {string}
     * @memberof DigitalThread
     */
    'materialCoverImg': string;
    /**
     * 布片擁有者的單位名稱，IsMaterialOwnerSide為true時:Thread summary為布片擁有者的組織(+團隊)名稱、All Thread drawer呈現建立者的組織名稱，IsMaterialOwnerSide為false時:布片擁有者的組織名稱
     * @type {string}
     * @memberof DigitalThread
     */
    'materialOwnerUnitName'?: string;
    /**
     * 布片擁有者的單位Logo
     * @type {string}
     * @memberof DigitalThread
     */
    'materialOwnerUnitLogo': string;
    /**
     * 布片擁有者的單位標籤顏色，若IsMaterialOwnerSide為true:呈現布片擁有者單位的標籤顏色，IsMaterialOwnerSide為false:為null值
     * @type {string}
     * @memberof DigitalThread
     */
    'materialOwnerUnitLabelColor': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DigitalThread
     */
    'hasMaterialDeleted': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DigitalThread
     */
    'hasMaterialNoAccess': boolean;
    /**
     * 
     * @type {FeatureType}
     * @memberof DigitalThread
     */
    'addFromLocationType': FeatureType;
    /**
     * 
     * @type {Array<string>}
     * @memberof DigitalThread
     */
    'addFromLocationList': Array<string>;
    /**
     * 建立者單位，若isCreatorSide為true:Thread summary呈現建立者的組織(+團隊)名稱、All Thread drawer呈現建立者的組織名稱，isCreatorSide為false:呈現建立者的組織名稱
     * @type {string}
     * @memberof DigitalThread
     */
    'creatorUnitName': string;
    /**
     * 建立者的單位的Logo
     * @type {string}
     * @memberof DigitalThread
     */
    'creatorUnitLogo': string;
    /**
     * 建立者的單位的標籤顏色，若isCreatorSide為true:呈現建立者的單位的標籤顏色，isCreatorSide為false:為null值
     * @type {string}
     * @memberof DigitalThread
     */
    'creatorUnitLabelColor': string | null;
    /**
     * 建立者的使用者名稱，若isCreatorSide為false，則為null值
     * @type {string}
     * @memberof DigitalThread
     */
    'creator': string | null;
    /**
     * 建立者的大頭貼，若isCreatorSide為false，則為null值
     * @type {string}
     * @memberof DigitalThread
     */
    'creatorAvatar': string | null;
    /**
     * 
     * @type {number}
     * @memberof DigitalThread
     */
    'createDate': number;
    /**
     * 
     * @type {DigitalThreadBaseStickerStatistics}
     * @memberof DigitalThread
     */
    'stickerStatistics': DigitalThreadBaseStickerStatistics;
    /**
     * 
     * @type {Array<string>}
     * @memberof DigitalThread
     */
    'tagList': Array<string>;
    /**
     * 
     * @type {Array<DigitalThreadBaseParticipantListInner>}
     * @memberof DigitalThread
     */
    'participantList': Array<DigitalThreadBaseParticipantListInner>;
    /**
     * 
     * @type {Array<DigitalThreadBaseParticipantListInner>}
     * @memberof DigitalThread
     */
    'participantAndMentionList'?: Array<DigitalThreadBaseParticipantListInner>;
    /**
     * 顯示Digital Thread 底下未讀sticker總數
     * @type {number}
     * @memberof DigitalThread
     */
    'unreadStickerQty': number;
    /**
     * 該digital thread在該所屬單位的workflowStageId
     * @type {number}
     * @memberof DigitalThread
     */
    'workflowStageId': number;
}


/**
 * 
 * @export
 * @interface DigitalThreadBase
 */
export interface DigitalThreadBase {
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadBase
     */
    'digitalThreadSideId': number;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadBase
     */
    'digitalThreadName': string;
    /**
     * 檢視該DigitalThread的使用者是否為建立方組織的成員
     * @type {boolean}
     * @memberof DigitalThreadBase
     */
    'isCreatorSide': boolean;
    /**
     * 檢視該DigitalThread的使用者是否為布片擁有者組織的成員
     * @type {boolean}
     * @memberof DigitalThreadBase
     */
    'isMaterialOwnerSide': boolean;
    /**
     * 檢視該DigitalThread的使用者的side的ogType
     * @type {number}
     * @memberof DigitalThreadBase
     */
    'sideOGType': number;
    /**
     * 檢視該DigitalThread的使用者的side的ogId
     * @type {number}
     * @memberof DigitalThreadBase
     */
    'sideOGId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadBase
     */
    'materialId': number;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadBase
     */
    'materialNo': string;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadBase
     */
    'materialCoverImg': string;
    /**
     * 布片擁有者的單位名稱，IsMaterialOwnerSide為true時:Thread summary為布片擁有者的組織(+團隊)名稱、All Thread drawer呈現建立者的組織名稱，IsMaterialOwnerSide為false時:布片擁有者的組織名稱
     * @type {string}
     * @memberof DigitalThreadBase
     */
    'materialOwnerUnitName'?: string;
    /**
     * 布片擁有者的單位Logo
     * @type {string}
     * @memberof DigitalThreadBase
     */
    'materialOwnerUnitLogo': string;
    /**
     * 布片擁有者的單位標籤顏色，若IsMaterialOwnerSide為true:呈現布片擁有者單位的標籤顏色，IsMaterialOwnerSide為false:為null值
     * @type {string}
     * @memberof DigitalThreadBase
     */
    'materialOwnerUnitLabelColor': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DigitalThreadBase
     */
    'hasMaterialDeleted': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DigitalThreadBase
     */
    'hasMaterialNoAccess': boolean;
    /**
     * 
     * @type {FeatureType}
     * @memberof DigitalThreadBase
     */
    'addFromLocationType': FeatureType;
    /**
     * 
     * @type {Array<string>}
     * @memberof DigitalThreadBase
     */
    'addFromLocationList': Array<string>;
    /**
     * 建立者單位，若isCreatorSide為true:Thread summary呈現建立者的組織(+團隊)名稱、All Thread drawer呈現建立者的組織名稱，isCreatorSide為false:呈現建立者的組織名稱
     * @type {string}
     * @memberof DigitalThreadBase
     */
    'creatorUnitName': string;
    /**
     * 建立者的單位的Logo
     * @type {string}
     * @memberof DigitalThreadBase
     */
    'creatorUnitLogo': string;
    /**
     * 建立者的單位的標籤顏色，若isCreatorSide為true:呈現建立者的單位的標籤顏色，isCreatorSide為false:為null值
     * @type {string}
     * @memberof DigitalThreadBase
     */
    'creatorUnitLabelColor': string | null;
    /**
     * 建立者的使用者名稱，若isCreatorSide為false，則為null值
     * @type {string}
     * @memberof DigitalThreadBase
     */
    'creator': string | null;
    /**
     * 建立者的大頭貼，若isCreatorSide為false，則為null值
     * @type {string}
     * @memberof DigitalThreadBase
     */
    'creatorAvatar': string | null;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadBase
     */
    'createDate': number;
    /**
     * 
     * @type {DigitalThreadBaseStickerStatistics}
     * @memberof DigitalThreadBase
     */
    'stickerStatistics': DigitalThreadBaseStickerStatistics;
    /**
     * 
     * @type {Array<string>}
     * @memberof DigitalThreadBase
     */
    'tagList': Array<string>;
    /**
     * 
     * @type {Array<DigitalThreadBaseParticipantListInner>}
     * @memberof DigitalThreadBase
     */
    'participantList': Array<DigitalThreadBaseParticipantListInner>;
    /**
     * 
     * @type {Array<DigitalThreadBaseParticipantListInner>}
     * @memberof DigitalThreadBase
     */
    'participantAndMentionList'?: Array<DigitalThreadBaseParticipantListInner>;
    /**
     * 顯示Digital Thread 底下未讀sticker總數
     * @type {number}
     * @memberof DigitalThreadBase
     */
    'unreadStickerQty': number;
    /**
     * 該digital thread在該所屬單位的workflowStageId
     * @type {number}
     * @memberof DigitalThreadBase
     */
    'workflowStageId': number;
}


/**
 * 
 * @export
 * @interface DigitalThreadBaseParticipantListInner
 */
export interface DigitalThreadBaseParticipantListInner {
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadBaseParticipantListInner
     */
    'userId': number;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadBaseParticipantListInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadBaseParticipantListInner
     */
    'avatar': string;
}
/**
 * 
 * @export
 * @interface DigitalThreadBaseStickerStatistics
 */
export interface DigitalThreadBaseStickerStatistics {
    /**
     * 顯示Thread 下的sticker 總數
     * @type {number}
     * @memberof DigitalThreadBaseStickerStatistics
     */
    'totalQty': number;
    /**
     * 顯示Thread 下的 Internal sticker(s) 的總數
     * @type {number}
     * @memberof DigitalThreadBaseStickerStatistics
     */
    'internalQty': number;
    /**
     * 顯示Thread 下的 External sticker(s) 的總數
     * @type {number}
     * @memberof DigitalThreadBaseStickerStatistics
     */
    'externalQty': number;
    /**
     * 顯示Thread 下 被標註星號 的 sticker(s) 總數
     * @type {number}
     * @memberof DigitalThreadBaseStickerStatistics
     */
    'starredQty': number;
}
/**
 * 
 * @export
 * @interface DigitalThreadCreatePost200Response
 */
export interface DigitalThreadCreatePost200Response {
    /**
     * 
     * @type {DigitalThreadCreatePost200ResponseResult}
     * @memberof DigitalThreadCreatePost200Response
     */
    'result'?: DigitalThreadCreatePost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof DigitalThreadCreatePost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadCreatePost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof DigitalThreadCreatePost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface DigitalThreadCreatePost200ResponseResult
 */
export interface DigitalThreadCreatePost200ResponseResult {
    /**
     * 
     * @type {DigitalThread}
     * @memberof DigitalThreadCreatePost200ResponseResult
     */
    'digitalThread'?: DigitalThread;
}
/**
 * 
 * @export
 * @interface DigitalThreadCreatePostRequest
 */
export interface DigitalThreadCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadCreatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadCreatePostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {FeatureType}
     * @memberof DigitalThreadCreatePostRequest
     */
    'addFromLocationType': FeatureType;
    /**
     * 
     * @type {Array<string>}
     * @memberof DigitalThreadCreatePostRequest
     */
    'addFromLocationList': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadCreatePostRequest
     */
    'digitalThreadName': string;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadCreatePostRequest
     */
    'addFromOGId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadCreatePostRequest
     */
    'addFromOGType': DigitalThreadCreatePostRequestAddFromOGTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadCreatePostRequest
     */
    'addTo': DigitalThreadCreatePostRequestAddToEnum;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadCreatePostRequest
     */
    'type': DigitalThreadCreatePostRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadCreatePostRequest
     */
    'content': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DigitalThreadCreatePostRequest
     */
    'tagList'?: Array<string> | null;
}

export const DigitalThreadCreatePostRequestAddFromOGTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type DigitalThreadCreatePostRequestAddFromOGTypeEnum = typeof DigitalThreadCreatePostRequestAddFromOGTypeEnum[keyof typeof DigitalThreadCreatePostRequestAddFromOGTypeEnum];
export const DigitalThreadCreatePostRequestAddToEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type DigitalThreadCreatePostRequestAddToEnum = typeof DigitalThreadCreatePostRequestAddToEnum[keyof typeof DigitalThreadCreatePostRequestAddToEnum];
export const DigitalThreadCreatePostRequestTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type DigitalThreadCreatePostRequestTypeEnum = typeof DigitalThreadCreatePostRequestTypeEnum[keyof typeof DigitalThreadCreatePostRequestTypeEnum];

/**
 * 
 * @export
 * @interface DigitalThreadGetListPost200Response
 */
export interface DigitalThreadGetListPost200Response {
    /**
     * 
     * @type {DigitalThreadGetListPost200ResponseResult}
     * @memberof DigitalThreadGetListPost200Response
     */
    'result'?: DigitalThreadGetListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof DigitalThreadGetListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadGetListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof DigitalThreadGetListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface DigitalThreadGetListPost200ResponseResult
 */
export interface DigitalThreadGetListPost200ResponseResult {
    /**
     * 
     * @type {Array<DigitalThreadGetListPost200ResponseResultDigitalThreadListInner>}
     * @memberof DigitalThreadGetListPost200ResponseResult
     */
    'digitalThreadList'?: Array<DigitalThreadGetListPost200ResponseResultDigitalThreadListInner>;
}
/**
 * 
 * @export
 * @interface DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
 */
export interface DigitalThreadGetListPost200ResponseResultDigitalThreadListInner {
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'digitalThreadSideId': number;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'digitalThreadName': string;
    /**
     * 檢視該DigitalThread的使用者是否為建立方組織的成員
     * @type {boolean}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'isCreatorSide': boolean;
    /**
     * 檢視該DigitalThread的使用者是否為布片擁有者組織的成員
     * @type {boolean}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'isMaterialOwnerSide': boolean;
    /**
     * 檢視該DigitalThread的使用者的side的ogType
     * @type {number}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'sideOGType': number;
    /**
     * 檢視該DigitalThread的使用者的side的ogId
     * @type {number}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'sideOGId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'materialId': number;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'materialNo': string;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'materialCoverImg': string;
    /**
     * 布片擁有者的單位名稱，IsMaterialOwnerSide為true時:Thread summary為布片擁有者的組織(+團隊)名稱、All Thread drawer呈現建立者的組織名稱，IsMaterialOwnerSide為false時:布片擁有者的組織名稱
     * @type {string}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'materialOwnerUnitName'?: string;
    /**
     * 布片擁有者的單位Logo
     * @type {string}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'materialOwnerUnitLogo': string;
    /**
     * 布片擁有者的單位標籤顏色，若IsMaterialOwnerSide為true:呈現布片擁有者單位的標籤顏色，IsMaterialOwnerSide為false:為null值
     * @type {string}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'materialOwnerUnitLabelColor': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'hasMaterialDeleted': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'hasMaterialNoAccess': boolean;
    /**
     * 
     * @type {FeatureType}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'addFromLocationType': FeatureType;
    /**
     * 
     * @type {Array<string>}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'addFromLocationList': Array<string>;
    /**
     * 建立者單位，若isCreatorSide為true:Thread summary呈現建立者的組織(+團隊)名稱、All Thread drawer呈現建立者的組織名稱，isCreatorSide為false:呈現建立者的組織名稱
     * @type {string}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'creatorUnitName': string;
    /**
     * 建立者的單位的Logo
     * @type {string}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'creatorUnitLogo': string;
    /**
     * 建立者的單位的標籤顏色，若isCreatorSide為true:呈現建立者的單位的標籤顏色，isCreatorSide為false:為null值
     * @type {string}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'creatorUnitLabelColor': string | null;
    /**
     * 建立者的使用者名稱，若isCreatorSide為false，則為null值
     * @type {string}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'creator': string | null;
    /**
     * 建立者的大頭貼，若isCreatorSide為false，則為null值
     * @type {string}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'creatorAvatar': string | null;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'createDate': number;
    /**
     * 
     * @type {DigitalThreadBaseStickerStatistics}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'stickerStatistics': DigitalThreadBaseStickerStatistics;
    /**
     * 
     * @type {Array<string>}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'tagList': Array<string>;
    /**
     * 
     * @type {Array<DigitalThreadBaseParticipantListInner>}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'participantList': Array<DigitalThreadBaseParticipantListInner>;
    /**
     * 
     * @type {Array<DigitalThreadBaseParticipantListInner>}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'participantAndMentionList'?: Array<DigitalThreadBaseParticipantListInner>;
    /**
     * 顯示Digital Thread 底下未讀sticker總數
     * @type {number}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'unreadStickerQty': number;
    /**
     * 該digital thread在該所屬單位的workflowStageId
     * @type {number}
     * @memberof DigitalThreadGetListPost200ResponseResultDigitalThreadListInner
     */
    'workflowStageId': number;
}


/**
 * 
 * @export
 * @interface DigitalThreadGetListPostRequest
 */
export interface DigitalThreadGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadGetListPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadGetListPostRequest
     */
    'materialId': number;
    /**
     * ogType及ogId不給時，是帶出該user在該組織及底下所有團隊可看到的digital thread list; 有給值時，只帶出該組織或團隊可看到的
     * @type {number}
     * @memberof DigitalThreadGetListPostRequest
     */
    'ogType'?: number;
    /**
     * ogType及ogId不給時，是帶出該user在該組織及底下所有團隊可看到的digital thread list; 有給值時，只帶出該組織或團隊可看到的
     * @type {number}
     * @memberof DigitalThreadGetListPostRequest
     */
    'ogId'?: number;
}
/**
 * 
 * @export
 * @interface DigitalThreadGetMaterialPostRequest
 */
export interface DigitalThreadGetMaterialPostRequest {
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadGetMaterialPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadGetMaterialPostRequest
     */
    'materialId': number;
}
/**
 * 
 * @export
 * @interface DigitalThreadGetPostRequest
 */
export interface DigitalThreadGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadGetPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadGetPostRequest
     */
    'digitalThreadSideId': number;
    /**
     * 
     * @type {DigitalThreadGetPostRequestFilter}
     * @memberof DigitalThreadGetPostRequest
     */
    'filter'?: DigitalThreadGetPostRequestFilter | null;
}
/**
 * 
 * @export
 * @interface DigitalThreadGetPostRequestFilter
 */
export interface DigitalThreadGetPostRequestFilter {
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadGetPostRequestFilter
     */
    'addTo'?: DigitalThreadGetPostRequestFilterAddToEnum;
    /**
     * 
     * @type {boolean}
     * @memberof DigitalThreadGetPostRequestFilter
     */
    'isStarred'?: boolean;
    /**
     * 
     * @type {DigitalThreadGetPostRequestFilterAddedBy}
     * @memberof DigitalThreadGetPostRequestFilter
     */
    'addedBy'?: DigitalThreadGetPostRequestFilterAddedBy;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadGetPostRequestFilter
     */
    'createStartDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadGetPostRequestFilter
     */
    'createEndDate'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DigitalThreadGetPostRequestFilter
     */
    'tagList'?: Array<string>;
}

export const DigitalThreadGetPostRequestFilterAddToEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type DigitalThreadGetPostRequestFilterAddToEnum = typeof DigitalThreadGetPostRequestFilterAddToEnum[keyof typeof DigitalThreadGetPostRequestFilterAddToEnum];

/**
 * 
 * @export
 * @interface DigitalThreadGetPostRequestFilterAddedBy
 */
export interface DigitalThreadGetPostRequestFilterAddedBy {
    /**
     * 
     * @type {boolean}
     * @memberof DigitalThreadGetPostRequestFilterAddedBy
     */
    'addedByMe'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DigitalThreadGetPostRequestFilterAddedBy
     */
    'addedByInternalUnit'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DigitalThreadGetPostRequestFilterAddedBy
     */
    'addedByExternalUnit'?: boolean;
}
/**
 * 
 * @export
 * @interface DigitalThreadStickerChildStickerCreatePostRequest
 */
export interface DigitalThreadStickerChildStickerCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadStickerChildStickerCreatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadStickerChildStickerCreatePostRequest
     */
    'digitalThreadSideId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadStickerChildStickerCreatePostRequest
     */
    'stickerId': number;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadStickerChildStickerCreatePostRequest
     */
    'content': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DigitalThreadStickerChildStickerCreatePostRequest
     */
    'tagList'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface DigitalThreadStickerCreatePostRequest
 */
export interface DigitalThreadStickerCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadStickerCreatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadStickerCreatePostRequest
     */
    'digitalThreadSideId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadStickerCreatePostRequest
     */
    'addTo': DigitalThreadStickerCreatePostRequestAddToEnum;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadStickerCreatePostRequest
     */
    'type': DigitalThreadStickerCreatePostRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadStickerCreatePostRequest
     */
    'content': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DigitalThreadStickerCreatePostRequest
     */
    'tagList'?: Array<string> | null;
}

export const DigitalThreadStickerCreatePostRequestAddToEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type DigitalThreadStickerCreatePostRequestAddToEnum = typeof DigitalThreadStickerCreatePostRequestAddToEnum[keyof typeof DigitalThreadStickerCreatePostRequestAddToEnum];
export const DigitalThreadStickerCreatePostRequestTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type DigitalThreadStickerCreatePostRequestTypeEnum = typeof DigitalThreadStickerCreatePostRequestTypeEnum[keyof typeof DigitalThreadStickerCreatePostRequestTypeEnum];

/**
 * 
 * @export
 * @interface DigitalThreadStickerStarPostRequest
 */
export interface DigitalThreadStickerStarPostRequest {
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadStickerStarPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadStickerStarPostRequest
     */
    'digitalThreadSideId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadStickerStarPostRequest
     */
    'stickerId': number;
}
/**
 * 
 * @export
 * @interface DigitalThreadStickerUpdateTagPostRequest
 */
export interface DigitalThreadStickerUpdateTagPostRequest {
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadStickerUpdateTagPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadStickerUpdateTagPostRequest
     */
    'digitalThreadSideId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadStickerUpdateTagPostRequest
     */
    'stickerId': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof DigitalThreadStickerUpdateTagPostRequest
     */
    'tagList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface DigitalThreadUpdateDigitalThreadNamePostRequest
 */
export interface DigitalThreadUpdateDigitalThreadNamePostRequest {
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadUpdateDigitalThreadNamePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof DigitalThreadUpdateDigitalThreadNamePostRequest
     */
    'digitalThreadSideId': number;
    /**
     * 
     * @type {string}
     * @memberof DigitalThreadUpdateDigitalThreadNamePostRequest
     */
    'digitalThreadName': string;
}
/**
 * 功能列表Enum
 * @export
 * @enum {string}
 */

export const FeatureType = {
    PUBLIC_LIBRARY: 1,
    ASSET: 2,
    WORKSPACE: 3,
    MOODBOARD: 4,
    SHARED_WITH_ME: 5,
    RECEIVED_SHARE: 6,
    EMBED: 7,
    SHOWROOM: 8,
    THREAD_BOARD: 9,
    DIGITAL_THREAD: 10
} as const;

export type FeatureType = typeof FeatureType[keyof typeof FeatureType];


/**
 * 
 * @export
 * @interface Filter
 */
export interface Filter {
    /**
     * 
     * @type {string}
     * @memberof Filter
     */
    'category'?: string;
    /**
     * 
     * @type {Array<FilterContentListInner>}
     * @memberof Filter
     */
    'contentList'?: Array<FilterContentListInner>;
    /**
     * 
     * @type {string}
     * @memberof Filter
     */
    'pattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof Filter
     */
    'color'?: string;
    /**
     * 
     * @type {FilterWidth}
     * @memberof Filter
     */
    'width'?: FilterWidth;
    /**
     * 
     * @type {FilterWeightGsm}
     * @memberof Filter
     */
    'weightGsm'?: FilterWeightGsm;
    /**
     * 
     * @type {string}
     * @memberof Filter
     */
    'warpDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof Filter
     */
    'weftDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof Filter
     */
    'wovenWarpYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Filter
     */
    'wovenWeftYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Filter
     */
    'knitYarnCount'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Filter
     */
    'finishList'?: Array<string>;
    /**
     * 
     * @type {FilterInventory}
     * @memberof Filter
     */
    'inventory'?: FilterInventory;
}
/**
 * 
 * @export
 * @interface FilterContentListInner
 */
export interface FilterContentListInner {
    /**
     * 
     * @type {string}
     * @memberof FilterContentListInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof FilterContentListInner
     */
    'percentage'?: number;
}
/**
 * 
 * @export
 * @interface FilterInventory
 */
export interface FilterInventory {
    /**
     * 
     * @type {string}
     * @memberof FilterInventory
     */
    'unit'?: FilterInventoryUnitEnum;
    /**
     * 
     * @type {FilterWeightGsm}
     * @memberof FilterInventory
     */
    'quantity'?: FilterWeightGsm;
}

export const FilterInventoryUnitEnum = {
    Y: 'Y',
    M: 'M',
    Kg: 'KG'
} as const;

export type FilterInventoryUnitEnum = typeof FilterInventoryUnitEnum[keyof typeof FilterInventoryUnitEnum];

/**
 * 
 * @export
 * @interface FilterWeightGsm
 */
export interface FilterWeightGsm {
    /**
     * 
     * @type {number}
     * @memberof FilterWeightGsm
     */
    'min': number;
    /**
     * 
     * @type {number}
     * @memberof FilterWeightGsm
     */
    'max': number;
    /**
     * 
     * @type {boolean}
     * @memberof FilterWeightGsm
     */
    'isInfinity': boolean;
}
/**
 * 
 * @export
 * @interface FilterWidth
 */
export interface FilterWidth {
    /**
     * 
     * @type {number}
     * @memberof FilterWidth
     */
    'min': number;
    /**
     * 
     * @type {number}
     * @memberof FilterWidth
     */
    'max': number;
    /**
     * 
     * @type {boolean}
     * @memberof FilterWidth
     */
    'isInfinity': boolean;
}
/**
 * 
 * @export
 * @interface GeneralCheckTokenStatusPost200Response
 */
export interface GeneralCheckTokenStatusPost200Response {
    /**
     * 
     * @type {GeneralCheckTokenStatusPost200ResponseResult}
     * @memberof GeneralCheckTokenStatusPost200Response
     */
    'result'?: GeneralCheckTokenStatusPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralCheckTokenStatusPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GeneralCheckTokenStatusPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof GeneralCheckTokenStatusPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface GeneralCheckTokenStatusPost200ResponseResult
 */
export interface GeneralCheckTokenStatusPost200ResponseResult {
    /**
     * 
     * @type {number}
     * @memberof GeneralCheckTokenStatusPost200ResponseResult
     */
    'status'?: GeneralCheckTokenStatusPost200ResponseResultStatusEnum;
}

export const GeneralCheckTokenStatusPost200ResponseResultStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type GeneralCheckTokenStatusPost200ResponseResultStatusEnum = typeof GeneralCheckTokenStatusPost200ResponseResultStatusEnum[keyof typeof GeneralCheckTokenStatusPost200ResponseResultStatusEnum];

/**
 * 
 * @export
 * @interface GeneralCheckTokenStatusPostRequest
 */
export interface GeneralCheckTokenStatusPostRequest {
    /**
     * 
     * @type {string}
     * @memberof GeneralCheckTokenStatusPostRequest
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface GeneralGetUploadUrlPost200Response
 */
export interface GeneralGetUploadUrlPost200Response {
    /**
     * 
     * @type {GeneralGetUploadUrlPost200ResponseResult}
     * @memberof GeneralGetUploadUrlPost200Response
     */
    'result'?: GeneralGetUploadUrlPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralGetUploadUrlPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GeneralGetUploadUrlPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof GeneralGetUploadUrlPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface GeneralGetUploadUrlPost200ResponseResult
 */
export interface GeneralGetUploadUrlPost200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof GeneralGetUploadUrlPost200ResponseResult
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneralGetUploadUrlPost200ResponseResult
     */
    'fileUploadUrl'?: string;
}
/**
 * 
 * @export
 * @interface GeneralGetUploadUrlPostRequest
 */
export interface GeneralGetUploadUrlPostRequest {
    /**
     * 
     * @type {string}
     * @memberof GeneralGetUploadUrlPostRequest
     */
    'fileName': string;
}
/**
 * 
 * @export
 * @interface GeneralRefreshTokenPost200Response
 */
export interface GeneralRefreshTokenPost200Response {
    /**
     * 
     * @type {GeneralRefreshTokenPost200ResponseResult}
     * @memberof GeneralRefreshTokenPost200Response
     */
    'result'?: GeneralRefreshTokenPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof GeneralRefreshTokenPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GeneralRefreshTokenPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof GeneralRefreshTokenPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface GeneralRefreshTokenPost200ResponseResult
 */
export interface GeneralRefreshTokenPost200ResponseResult {
    /**
     * accessToken
     * @type {string}
     * @memberof GeneralRefreshTokenPost200ResponseResult
     */
    'accessToken'?: string;
    /**
     * refreshToken
     * @type {string}
     * @memberof GeneralRefreshTokenPost200ResponseResult
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface GeneralRefreshTokenPostRequest
 */
export interface GeneralRefreshTokenPostRequest {
    /**
     * 
     * @type {string}
     * @memberof GeneralRefreshTokenPostRequest
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface GetDashboard200Response
 */
export interface GetDashboard200Response {
    /**
     * 
     * @type {Dashboard}
     * @memberof GetDashboard200Response
     */
    'result'?: Dashboard;
    /**
     * 
     * @type {boolean}
     * @memberof GetDashboard200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetDashboard200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof GetDashboard200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface GetDashboardRequest
 */
export interface GetDashboardRequest {
    /**
     * 
     * @type {number}
     * @memberof GetDashboardRequest
     */
    'orgId': number;
    /**
     * 
     * @type {OgType}
     * @memberof GetDashboardRequest
     */
    'ogType': OgType;
    /**
     * 單位(組織或團s隊)ID
     * @type {number}
     * @memberof GetDashboardRequest
     */
    'ogId': number;
}


/**
 * 
 * @export
 * @interface GetDigitalThreadWorkflowStageOptions200Response
 */
export interface GetDigitalThreadWorkflowStageOptions200Response {
    /**
     * 
     * @type {GetDigitalThreadWorkflowStageOptions200ResponseResult}
     * @memberof GetDigitalThreadWorkflowStageOptions200Response
     */
    'result'?: GetDigitalThreadWorkflowStageOptions200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof GetDigitalThreadWorkflowStageOptions200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetDigitalThreadWorkflowStageOptions200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof GetDigitalThreadWorkflowStageOptions200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface GetDigitalThreadWorkflowStageOptions200ResponseResult
 */
export interface GetDigitalThreadWorkflowStageOptions200ResponseResult {
    /**
     * 
     * @type {Array<GetDigitalThreadWorkflowStageOptions200ResponseResultWorkflowStageListInner>}
     * @memberof GetDigitalThreadWorkflowStageOptions200ResponseResult
     */
    'workflowStageList': Array<GetDigitalThreadWorkflowStageOptions200ResponseResultWorkflowStageListInner>;
}
/**
 * 
 * @export
 * @interface GetDigitalThreadWorkflowStageOptions200ResponseResultWorkflowStageListInner
 */
export interface GetDigitalThreadWorkflowStageOptions200ResponseResultWorkflowStageListInner {
    /**
     * WorkflowStage Id
     * @type {number}
     * @memberof GetDigitalThreadWorkflowStageOptions200ResponseResultWorkflowStageListInner
     */
    'workflowStageId': number;
    /**
     * WorkflowStage名稱
     * @type {string}
     * @memberof GetDigitalThreadWorkflowStageOptions200ResponseResultWorkflowStageListInner
     */
    'workflowStageName': string;
    /**
     * 是否為預設的WorkflowStage
     * @type {boolean}
     * @memberof GetDigitalThreadWorkflowStageOptions200ResponseResultWorkflowStageListInner
     */
    'isDefault': boolean;
}
/**
 * 
 * @export
 * @interface GetDigitalThreadWorkflowStageOptionsRequest
 */
export interface GetDigitalThreadWorkflowStageOptionsRequest {
    /**
     * 
     * @type {number}
     * @memberof GetDigitalThreadWorkflowStageOptionsRequest
     */
    'orgId': number;
    /**
     * 
     * @type {OgType}
     * @memberof GetDigitalThreadWorkflowStageOptionsRequest
     */
    'ogType': OgType;
    /**
     * 單位(組織或團隊)ID
     * @type {number}
     * @memberof GetDigitalThreadWorkflowStageOptionsRequest
     */
    'ogId': number;
}


/**
 * 
 * @export
 * @interface GetThreadBoard200Response
 */
export interface GetThreadBoard200Response {
    /**
     * 
     * @type {GetThreadBoard200ResponseResult}
     * @memberof GetThreadBoard200Response
     */
    'result'?: GetThreadBoard200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof GetThreadBoard200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetThreadBoard200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof GetThreadBoard200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface GetThreadBoard200ResponseResult
 */
export interface GetThreadBoard200ResponseResult {
    /**
     * 
     * @type {ThreadBoard}
     * @memberof GetThreadBoard200ResponseResult
     */
    'threadBoard': ThreadBoard;
}
/**
 * 
 * @export
 * @interface GetThreadBoardMostParticipant200Response
 */
export interface GetThreadBoardMostParticipant200Response {
    /**
     * 
     * @type {GetThreadBoardMostParticipant200ResponseResult}
     * @memberof GetThreadBoardMostParticipant200Response
     */
    'result'?: GetThreadBoardMostParticipant200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof GetThreadBoardMostParticipant200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetThreadBoardMostParticipant200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof GetThreadBoardMostParticipant200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface GetThreadBoardMostParticipant200ResponseResult
 */
export interface GetThreadBoardMostParticipant200ResponseResult {
    /**
     * 
     * @type {number}
     * @memberof GetThreadBoardMostParticipant200ResponseResult
     */
    'participantUserId': number | null;
}
/**
 * 
 * @export
 * @interface GetThreadBoardMostParticipantRequest
 */
export interface GetThreadBoardMostParticipantRequest {
    /**
     * 組織ID
     * @type {number}
     * @memberof GetThreadBoardMostParticipantRequest
     */
    'orgId': number;
    /**
     * 
     * @type {OgType}
     * @memberof GetThreadBoardMostParticipantRequest
     */
    'ogType': OgType;
    /**
     * 單位(組織或團隊)ID
     * @type {number}
     * @memberof GetThreadBoardMostParticipantRequest
     */
    'ogId': number;
}


/**
 * 
 * @export
 * @interface GetThreadBoardQuery200Response
 */
export interface GetThreadBoardQuery200Response {
    /**
     * 
     * @type {GetThreadBoardQuery200ResponseResult}
     * @memberof GetThreadBoardQuery200Response
     */
    'result'?: GetThreadBoardQuery200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof GetThreadBoardQuery200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetThreadBoardQuery200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof GetThreadBoardQuery200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface GetThreadBoardQuery200ResponseResult
 */
export interface GetThreadBoardQuery200ResponseResult {
    /**
     * 
     * @type {ThreadBoardQuery}
     * @memberof GetThreadBoardQuery200ResponseResult
     */
    'threadBoardQuery': ThreadBoardQuery;
}
/**
 * 
 * @export
 * @interface GetThreadBoardRequest
 */
export interface GetThreadBoardRequest {
    /**
     * 組織ID
     * @type {number}
     * @memberof GetThreadBoardRequest
     */
    'orgId': number;
    /**
     * 
     * @type {OgType}
     * @memberof GetThreadBoardRequest
     */
    'ogType': OgType;
    /**
     * 單位(組織或團隊)ID
     * @type {number}
     * @memberof GetThreadBoardRequest
     */
    'ogId': number;
    /**
     * 
     * @type {ThreadBoardQuery}
     * @memberof GetThreadBoardRequest
     */
    'threadBoardQuery': ThreadBoardQuery;
}


/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    'groupId': number;
    /**
     * 團隊代碼
     * @type {string}
     * @memberof Group
     */
    'groupNo': string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'groupName': string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'labelColor': string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'inviteCode': string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'uploadMaterialEmail': string;
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {Array<GroupUser>}
     * @memberof Group
     */
    'memberList': Array<GroupUser>;
    /**
     * 
     * @type {Array<OrganizationHistoryListInner>}
     * @memberof Group
     */
    'historyList': Array<OrganizationHistoryListInner>;
}
/**
 * isPending 為 true 的 user 除了 email、avatar、originalAvatar、isPending 以外的欄位皆為 null isPending 為 false 的 user 只有 lastSignInTime 有可能為 null 
 * @export
 * @interface GroupUser
 */
export interface GroupUser {
    /**
     * 
     * @type {number}
     * @memberof GroupUser
     */
    'groupUserId': number | null;
    /**
     * 
     * @type {number}
     * @memberof GroupUser
     */
    'userId': number | null;
    /**
     * 
     * @type {number}
     * @memberof GroupUser
     */
    'orgRoleId': number | null;
    /**
     * 
     * @type {number}
     * @memberof GroupUser
     */
    'groupRoleId': number | null;
    /**
     * 
     * @type {string}
     * @memberof GroupUser
     */
    'displayName': string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupUser
     */
    'avatar': string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupUser
     */
    'originalAvatar': string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupUser
     */
    'lastSignInTime': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof GroupUser
     */
    'isPending': boolean;
}
/**
 * 
 * @export
 * @interface HideWorkflowStageRequest
 */
export interface HideWorkflowStageRequest {
    /**
     * 組織ID
     * @type {number}
     * @memberof HideWorkflowStageRequest
     */
    'orgId': number;
    /**
     * 
     * @type {OgType}
     * @memberof HideWorkflowStageRequest
     */
    'ogType': OgType;
    /**
     * 單位(組織或團隊)ID
     * @type {number}
     * @memberof HideWorkflowStageRequest
     */
    'ogId': number;
    /**
     * WorkflowStage Id
     * @type {number}
     * @memberof HideWorkflowStageRequest
     */
    'workflowStageId': number;
}


/**
 * 
 * @export
 * @interface InvoiceInfo
 */
export interface InvoiceInfo {
    /**
     * 
     * @type {number}
     * @memberof InvoiceInfo
     */
    'invoiceId'?: number;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInfo
     */
    'invoiceNumber'?: string;
    /**
     * 
     * @type {number}
     * @memberof InvoiceInfo
     */
    'invoiceDate'?: number;
    /**
     * 接收者名稱
     * @type {string}
     * @memberof InvoiceInfo
     */
    'recipient'?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInfo
     */
    'email'?: string;
    /**
     * 國家代碼
     * @type {string}
     * @memberof InvoiceInfo
     */
    'countryCode'?: string;
    /**
     * 接收者區號
     * @type {string}
     * @memberof InvoiceInfo
     */
    'zipCode'?: string;
    /**
     * 接收者城市
     * @type {string}
     * @memberof InvoiceInfo
     */
    'city'?: string;
    /**
     * 接收者地址
     * @type {string}
     * @memberof InvoiceInfo
     */
    'address'?: string;
    /**
     * 
     * @type {Array<InvoiceInfoServiceItemListInner>}
     * @memberof InvoiceInfo
     */
    'serviceItemList'?: Array<InvoiceInfoServiceItemListInner>;
    /**
     * 
     * @type {OrganizationPaymentDetailCardInfo}
     * @memberof InvoiceInfo
     */
    'cardInfo'?: OrganizationPaymentDetailCardInfo;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInfo
     */
    'currency'?: string;
    /**
     * 總費用
     * @type {string}
     * @memberof InvoiceInfo
     */
    'totalPrice'?: string;
}
/**
 * 
 * @export
 * @interface InvoiceInfoServiceItemListInner
 */
export interface InvoiceInfoServiceItemListInner {
    /**
     * 
     * @type {string}
     * @memberof InvoiceInfoServiceItemListInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceInfoServiceItemListInner
     */
    'periodDate'?: string;
    /**
     * 定價
     * @type {string}
     * @memberof InvoiceInfoServiceItemListInner
     */
    'listPrice'?: string;
    /**
     * 最後索取費用
     * @type {number}
     * @memberof InvoiceInfoServiceItemListInner
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface Material
 */
export interface Material {
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'materialId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'sourceAssetLocation'?: MaterialSourceAssetLocationEnum;
    /**
     * Frontier number
     * @type {string}
     * @memberof Material
     */
    'frontierNo'?: string;
    /**
     * Item#
     * @type {string}
     * @memberof Material
     */
    'materialNo'?: string;
    /**
     * Native Code
     * @type {string}
     * @memberof Material
     */
    'materialSeq'?: string;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'relationMaterialId'?: number;
    /**
     * Another side frontier number
     * @type {string}
     * @memberof Material
     */
    'relationFronteirNo'?: string;
    /**
     * 
     * @type {OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerMainType}
     * @memberof Material
     */
    'mainType'?: OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerMainType;
    /**
     * 
     * @type {MaterialSubType}
     * @memberof Material
     */
    'subType'?: MaterialSubType;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'content'?: string;
    /**
     * 
     * @type {Array<MaterialContentListInner>}
     * @memberof Material
     */
    'contentList'?: Array<MaterialContentListInner>;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'description'?: string;
    /**
     * 
     * @type {Array<MaterialDescriptionListInner>}
     * @memberof Material
     */
    'descriptionList'?: Array<MaterialDescriptionListInner>;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'finish'?: string;
    /**
     * 
     * @type {Array<MaterialFinishListInner>}
     * @memberof Material
     */
    'finishList'?: Array<MaterialFinishListInner>;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'weightOrThicknessUnit'?: MaterialWeightOrThicknessUnitEnum;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'weightGsmOrThickness'?: number;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'weightOz'?: number;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'weightGy'?: number;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'warpDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'weftDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'warpYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'weftYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'pattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'color'?: string;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'sampleCardsRemainingQty'?: number;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'sampleCardsLocation'?: string;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'hangersRemainingQty'?: number;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'hangersLocation'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Material
     */
    'publicTagList'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Material
     */
    'privateTagList'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Material
     */
    'tagList'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Material
     */
    'aiTagList'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'coverMode'?: MaterialCoverModeEnum;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'coverImg'?: string;
    /**
     * 
     * @type {MaterialFaceSideImg}
     * @memberof Material
     */
    'faceSideImg'?: MaterialFaceSideImg;
    /**
     * 
     * @type {MaterialBackSideImg}
     * @memberof Material
     */
    'backSideImg'?: MaterialBackSideImg;
    /**
     * 
     * @type {boolean}
     * @memberof Material
     */
    'isDoubleSideMaterial'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'sideType'?: MaterialSideTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'remark'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Material
     */
    'isDelete'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Material
     */
    'isComplete'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'cloneFromMaterialId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'totalInventoryQty'?: number;
    /**
     * 
     * @type {string}
     * @memberof Material
     */
    'inventoryUnit'?: MaterialInventoryUnitEnum;
    /**
     * 
     * @type {Array<MaterialInventoryListInner>}
     * @memberof Material
     */
    'inventoryList'?: Array<MaterialInventoryListInner>;
    /**
     * 
     * @type {boolean}
     * @memberof Material
     */
    'isPublicInventory'?: boolean;
    /**
     * 
     * @type {MaterialPublicPrice}
     * @memberof Material
     */
    'publicPrice'?: MaterialPublicPrice;
    /**
     * 
     * @type {MaterialPublicPrice}
     * @memberof Material
     */
    'privatePrice'?: MaterialPublicPrice;
    /**
     * 
     * @type {Array<MaterialAttachmentListInner>}
     * @memberof Material
     */
    'attachmentList'?: Array<MaterialAttachmentListInner>;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord}
     * @memberof Material
     */
    'attachmentCropImageRecord'?: OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord;
    /**
     * 
     * @type {Array<MaterialPantoneListInner>}
     * @memberof Material
     */
    'pantoneList'?: Array<MaterialPantoneListInner>;
    /**
     * 
     * @type {MaterialU3m}
     * @memberof Material
     */
    'u3m'?: MaterialU3m;
    /**
     * 
     * @type {MaterialCarbonEmission}
     * @memberof Material
     */
    'carbonEmission'?: MaterialCarbonEmission;
    /**
     * 
     * @type {Array<MaterialCertificateListInner>}
     * @memberof Material
     */
    'certificateList'?: Array<MaterialCertificateListInner>;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'digitalThreadQty'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Material
     */
    'digitalThreadHasUnread'?: boolean;
    /**
     * 布片擁有者的單位名稱，檢視角度為布片擁有者時為:布片擁有者的組織(+團隊)名稱，非布片擁有者為:布片擁有者的組織名稱
     * @type {string}
     * @memberof Material
     */
    'unitName'?: string;
    /**
     * 布片擁有者的單位Logo
     * @type {string}
     * @memberof Material
     */
    'unitLogo'?: string;
    /**
     * 檢視該布片的使用者是否為布片擁有者組織的成員
     * @type {boolean}
     * @memberof Material
     */
    'isMaterialOwnerSide'?: boolean;
    /**
     * 該布片所屬單位的組織或團隊型態，IsMaterialOwnerSide為true時才有值
     * @type {number}
     * @memberof Material
     */
    'materialOwnerOGType'?: number | null;
    /**
     * 該布片所屬單位的組織或團隊ID，IsMaterialOwnerSide為true時才有值
     * @type {number}
     * @memberof Material
     */
    'materialOwnerOGId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'createDate'?: number;
    /**
     * 
     * @type {number}
     * @memberof Material
     */
    'updateDate'?: number;
}

export const MaterialSourceAssetLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type MaterialSourceAssetLocationEnum = typeof MaterialSourceAssetLocationEnum[keyof typeof MaterialSourceAssetLocationEnum];
export const MaterialWeightOrThicknessUnitEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type MaterialWeightOrThicknessUnitEnum = typeof MaterialWeightOrThicknessUnitEnum[keyof typeof MaterialWeightOrThicknessUnitEnum];
export const MaterialCoverModeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type MaterialCoverModeEnum = typeof MaterialCoverModeEnum[keyof typeof MaterialCoverModeEnum];
export const MaterialSideTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type MaterialSideTypeEnum = typeof MaterialSideTypeEnum[keyof typeof MaterialSideTypeEnum];
export const MaterialInventoryUnitEnum = {
    Y: 'Y',
    M: 'M',
    Kg: 'KG'
} as const;

export type MaterialInventoryUnitEnum = typeof MaterialInventoryUnitEnum[keyof typeof MaterialInventoryUnitEnum];

/**
 * 
 * @export
 * @interface MaterialAttachmentListInner
 */
export interface MaterialAttachmentListInner {
    /**
     * 
     * @type {number}
     * @memberof MaterialAttachmentListInner
     */
    'materialAttachmentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MaterialAttachmentListInner
     */
    'displayFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialAttachmentListInner
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialAttachmentListInner
     */
    'extension'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MaterialAttachmentListInner
     */
    'isCover'?: boolean;
}
/**
 * 
 * @export
 * @interface MaterialBackSideImg
 */
export interface MaterialBackSideImg {
    /**
     * 
     * @type {string}
     * @memberof MaterialBackSideImg
     */
    'crop'?: string;
    /**
     * 
     * @type {MaterialFaceSideImgCropRecord}
     * @memberof MaterialBackSideImg
     */
    'cropRecord'?: MaterialFaceSideImgCropRecord;
    /**
     * 
     * @type {string}
     * @memberof MaterialBackSideImg
     */
    'ruler'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialBackSideImg
     */
    'original'?: string;
    /**
     * original 圖片的 dpi
     * @type {number}
     * @memberof MaterialBackSideImg
     */
    'dpi'?: number;
    /**
     * 產生u3m畫面的圖片預覽圖
     * @type {string}
     * @memberof MaterialBackSideImg
     */
    'u3mCrop'?: string;
    /**
     * 給產生u3m流程的recut用的圖
     * @type {string}
     * @memberof MaterialBackSideImg
     */
    'u3mOriginal'?: string;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecord}
     * @memberof MaterialBackSideImg
     */
    'u3mCropRecord'?: OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecord;
}
/**
 * 
 * @export
 * @interface MaterialCarbonEmission
 */
export interface MaterialCarbonEmission {
    /**
     * 
     * @type {CarbonEmissionCo2}
     * @memberof MaterialCarbonEmission
     */
    'co2'?: CarbonEmissionCo2;
    /**
     * 
     * @type {CarbonEmissionWater}
     * @memberof MaterialCarbonEmission
     */
    'water'?: CarbonEmissionWater;
    /**
     * 
     * @type {CarbonEmissionLand}
     * @memberof MaterialCarbonEmission
     */
    'land'?: CarbonEmissionLand;
    /**
     * 
     * @type {CarbonEmissionEnergy}
     * @memberof MaterialCarbonEmission
     */
    'energy'?: CarbonEmissionEnergy;
    /**
     * M2F數據最後更新時間，若未有值則為null
     * @type {number}
     * @memberof MaterialCarbonEmission
     */
    'lastUpdateTime'?: number | null;
    /**
     * 未有訂閱M2F加值服務時為NULL
     * @type {number}
     * @memberof MaterialCarbonEmission
     */
    'materialOwnerMade2FlowPlanType'?: MaterialCarbonEmissionMaterialOwnerMade2FlowPlanTypeEnum;
    /**
     * 未有訂閱M2F加值服務時為NULL
     * @type {number}
     * @memberof MaterialCarbonEmission
     */
    'viewerMade2FlowPlanType'?: MaterialCarbonEmissionViewerMade2FlowPlanTypeEnum;
}

export const MaterialCarbonEmissionMaterialOwnerMade2FlowPlanTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type MaterialCarbonEmissionMaterialOwnerMade2FlowPlanTypeEnum = typeof MaterialCarbonEmissionMaterialOwnerMade2FlowPlanTypeEnum[keyof typeof MaterialCarbonEmissionMaterialOwnerMade2FlowPlanTypeEnum];
export const MaterialCarbonEmissionViewerMade2FlowPlanTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type MaterialCarbonEmissionViewerMade2FlowPlanTypeEnum = typeof MaterialCarbonEmissionViewerMade2FlowPlanTypeEnum[keyof typeof MaterialCarbonEmissionViewerMade2FlowPlanTypeEnum];

/**
 * 
 * @export
 * @interface MaterialCertificateListInner
 */
export interface MaterialCertificateListInner {
    /**
     * 
     * @type {number}
     * @memberof MaterialCertificateListInner
     */
    'certificateId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MaterialCertificateListInner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface MaterialContentListInner
 */
export interface MaterialContentListInner {
    /**
     * 
     * @type {number}
     * @memberof MaterialContentListInner
     */
    'contentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MaterialContentListInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof MaterialContentListInner
     */
    'percentage'?: number;
}
/**
 * 
 * @export
 * @interface MaterialDescriptionListInner
 */
export interface MaterialDescriptionListInner {
    /**
     * 
     * @type {number}
     * @memberof MaterialDescriptionListInner
     */
    'descriptionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MaterialDescriptionListInner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface MaterialFaceSideImg
 */
export interface MaterialFaceSideImg {
    /**
     * 
     * @type {string}
     * @memberof MaterialFaceSideImg
     */
    'crop'?: string;
    /**
     * 
     * @type {MaterialFaceSideImgCropRecord}
     * @memberof MaterialFaceSideImg
     */
    'cropRecord'?: MaterialFaceSideImgCropRecord;
    /**
     * 
     * @type {string}
     * @memberof MaterialFaceSideImg
     */
    'ruler'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialFaceSideImg
     */
    'original'?: string;
    /**
     * original 圖片的 dpi
     * @type {number}
     * @memberof MaterialFaceSideImg
     */
    'dpi'?: number;
    /**
     * 產生u3m畫面的圖片預覽圖
     * @type {string}
     * @memberof MaterialFaceSideImg
     */
    'u3mCrop'?: string;
    /**
     * 給產生u3m流程的recut用的圖
     * @type {string}
     * @memberof MaterialFaceSideImg
     */
    'u3mOriginal'?: string;
    /**
     * 
     * @type {MaterialFaceSideImgU3mCropRecord}
     * @memberof MaterialFaceSideImg
     */
    'u3mCropRecord'?: MaterialFaceSideImgU3mCropRecord;
}
/**
 * 記錄裁切正方形圖片的參數
 * @export
 * @interface MaterialFaceSideImgCropRecord
 */
export interface MaterialFaceSideImgCropRecord {
    /**
     * 
     * @type {number}
     * @memberof MaterialFaceSideImgCropRecord
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof MaterialFaceSideImgCropRecord
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof MaterialFaceSideImgCropRecord
     */
    'rotateDeg'?: number;
    /**
     * 
     * @type {number}
     * @memberof MaterialFaceSideImgCropRecord
     */
    'scaleRatio'?: number;
}
/**
 * 記錄U3M裁切圖片的參數
 * @export
 * @interface MaterialFaceSideImgU3mCropRecord
 */
export interface MaterialFaceSideImgU3mCropRecord {
    /**
     * 
     * @type {OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordSquareCropRecord}
     * @memberof MaterialFaceSideImgU3mCropRecord
     */
    'squareCropRecord'?: OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordSquareCropRecord;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordPerspectiveCropRecord}
     * @memberof MaterialFaceSideImgU3mCropRecord
     */
    'perspectiveCropRecord'?: OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordPerspectiveCropRecord;
}
/**
 * 
 * @export
 * @interface MaterialFinishListInner
 */
export interface MaterialFinishListInner {
    /**
     * 
     * @type {number}
     * @memberof MaterialFinishListInner
     */
    'finishId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MaterialFinishListInner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface MaterialInventoryListInner
 */
export interface MaterialInventoryListInner {
    /**
     * 
     * @type {string}
     * @memberof MaterialInventoryListInner
     */
    'section'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialInventoryListInner
     */
    'shelf'?: string;
    /**
     * 
     * @type {number}
     * @memberof MaterialInventoryListInner
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof MaterialInventoryListInner
     */
    'unit'?: MaterialInventoryListInnerUnitEnum;
}

export const MaterialInventoryListInnerUnitEnum = {
    Y: 'Y',
    M: 'M',
    Kg: 'KG'
} as const;

export type MaterialInventoryListInnerUnitEnum = typeof MaterialInventoryListInnerUnitEnum[keyof typeof MaterialInventoryListInnerUnitEnum];

/**
 * 
 * @export
 * @interface MaterialPantoneListInner
 */
export interface MaterialPantoneListInner {
    /**
     * 
     * @type {number}
     * @memberof MaterialPantoneListInner
     */
    'materialPantoneId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MaterialPantoneListInner
     */
    'pantoneId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MaterialPantoneListInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialPantoneListInner
     */
    'majorColorName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialPantoneListInner
     */
    'colorName'?: string;
    /**
     * 
     * @type {number}
     * @memberof MaterialPantoneListInner
     */
    'r'?: number;
    /**
     * 
     * @type {number}
     * @memberof MaterialPantoneListInner
     */
    'g'?: number;
    /**
     * 
     * @type {number}
     * @memberof MaterialPantoneListInner
     */
    'b'?: number;
}
/**
 * 
 * @export
 * @interface MaterialPublicPrice
 */
export interface MaterialPublicPrice {
    /**
     * 
     * @type {string}
     * @memberof MaterialPublicPrice
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialPublicPrice
     */
    'currency'?: MaterialPublicPriceCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof MaterialPublicPrice
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof MaterialPublicPrice
     */
    'unit'?: MaterialPublicPriceUnitEnum;
    /**
     * 
     * @type {number}
     * @memberof MaterialPublicPrice
     */
    'minimumOrderQuantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof MaterialPublicPrice
     */
    'minimumOrderQuantityUnit'?: MaterialPublicPriceMinimumOrderQuantityUnitEnum;
    /**
     * 
     * @type {number}
     * @memberof MaterialPublicPrice
     */
    'minimumContainerQuantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof MaterialPublicPrice
     */
    'minimumContainerQuantityUnit'?: MaterialPublicPriceMinimumContainerQuantityUnitEnum;
    /**
     * 產品交貨期
     * @type {string}
     * @memberof MaterialPublicPrice
     */
    'productionLeadTime'?: string;
    /**
     * 樣品交貨期
     * @type {string}
     * @memberof MaterialPublicPrice
     */
    'sampleLeadTime'?: string;
}

export const MaterialPublicPriceCurrencyEnum = {
    Usd: 'USD',
    Rmb: 'RMB',
    Twd: 'TWD'
} as const;

export type MaterialPublicPriceCurrencyEnum = typeof MaterialPublicPriceCurrencyEnum[keyof typeof MaterialPublicPriceCurrencyEnum];
export const MaterialPublicPriceUnitEnum = {
    Y: 'Y',
    M: 'M',
    Kg: 'KG'
} as const;

export type MaterialPublicPriceUnitEnum = typeof MaterialPublicPriceUnitEnum[keyof typeof MaterialPublicPriceUnitEnum];
export const MaterialPublicPriceMinimumOrderQuantityUnitEnum = {
    Y: 'Y',
    M: 'M',
    Kg: 'KG'
} as const;

export type MaterialPublicPriceMinimumOrderQuantityUnitEnum = typeof MaterialPublicPriceMinimumOrderQuantityUnitEnum[keyof typeof MaterialPublicPriceMinimumOrderQuantityUnitEnum];
export const MaterialPublicPriceMinimumContainerQuantityUnitEnum = {
    Y: 'Y',
    M: 'M',
    Kg: 'KG'
} as const;

export type MaterialPublicPriceMinimumContainerQuantityUnitEnum = typeof MaterialPublicPriceMinimumContainerQuantityUnitEnum[keyof typeof MaterialPublicPriceMinimumContainerQuantityUnitEnum];

/**
 * 
 * @export
 * @interface MaterialSubType
 */
export interface MaterialSubType {
    /**
     * 
     * @type {number}
     * @memberof MaterialSubType
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MaterialSubType
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface MaterialU3m
 */
export interface MaterialU3m {
    /**
     * 
     * @type {number}
     * @memberof MaterialU3m
     */
    'status'?: MaterialU3mStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MaterialU3m
     */
    'zipUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialU3m
     */
    'u3maUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialU3m
     */
    'baseImgUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialU3m
     */
    'normalImgUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialU3m
     */
    'roughImgUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialU3m
     */
    'dispImgUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialU3m
     */
    'gltfUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialU3m
     */
    'u3mSpecUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof MaterialU3m
     */
    'u3mPhysicSpecUrl'?: string;
    /**
     * original 圖片的 dpi
     * @type {number}
     * @memberof MaterialU3m
     */
    'dpi'?: number;
}

export const MaterialU3mStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type MaterialU3mStatusEnum = typeof MaterialU3mStatusEnum[keyof typeof MaterialU3mStatusEnum];

/**
 * 
 * @export
 * @interface Moodboard
 */
export interface Moodboard {
    /**
     * 
     * @type {Array<object>}
     * @memberof Moodboard
     */
    'attachmentList'?: Array<object>;
    /**
     * 
     * @type {object}
     * @memberof Moodboard
     */
    'properties'?: object;
    /**
     * 
     * @type {number}
     * @memberof Moodboard
     */
    'moodboardId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Moodboard
     */
    'moodboardType'?: MoodboardMoodboardTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Moodboard
     */
    'moodboardName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Moodboard
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Moodboard
     */
    'trendBoardCoverImg'?: string;
    /**
     * 
     * @type {string}
     * @memberof Moodboard
     */
    'trendBoardFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Moodboard
     */
    'trendBoardUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Moodboard
     */
    'hasNewUpdate'?: boolean;
    /**
     * 組織+團隊名稱 或 組織名稱
     * @type {string}
     * @memberof Moodboard
     */
    'creator'?: string;
    /**
     * 組織Logo
     * @type {string}
     * @memberof Moodboard
     */
    'creatorLogo'?: string;
    /**
     * 
     * @type {number}
     * @memberof Moodboard
     */
    'createDate'?: number;
    /**
     * 
     * @type {number}
     * @memberof Moodboard
     */
    'updateDate'?: number;
}

export const MoodboardMoodboardTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type MoodboardMoodboardTypeEnum = typeof MoodboardMoodboardTypeEnum[keyof typeof MoodboardMoodboardTypeEnum];

/**
 * 
 * @export
 * @interface MoodboardBase
 */
export interface MoodboardBase {
    /**
     * 
     * @type {number}
     * @memberof MoodboardBase
     */
    'moodboardId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MoodboardBase
     */
    'moodboardType'?: MoodboardBaseMoodboardTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MoodboardBase
     */
    'moodboardName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardBase
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardBase
     */
    'trendBoardCoverImg'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardBase
     */
    'trendBoardFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardBase
     */
    'trendBoardUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MoodboardBase
     */
    'hasNewUpdate'?: boolean;
    /**
     * 組織+團隊名稱 或 組織名稱
     * @type {string}
     * @memberof MoodboardBase
     */
    'creator'?: string;
    /**
     * 組織Logo
     * @type {string}
     * @memberof MoodboardBase
     */
    'creatorLogo'?: string;
    /**
     * 
     * @type {number}
     * @memberof MoodboardBase
     */
    'createDate'?: number;
    /**
     * 
     * @type {number}
     * @memberof MoodboardBase
     */
    'updateDate'?: number;
}

export const MoodboardBaseMoodboardTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type MoodboardBaseMoodboardTypeEnum = typeof MoodboardBaseMoodboardTypeEnum[keyof typeof MoodboardBaseMoodboardTypeEnum];

/**
 * 
 * @export
 * @interface MoodboardCommentListInner
 */
export interface MoodboardCommentListInner {
    /**
     * 
     * @type {string}
     * @memberof MoodboardCommentListInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardCommentListInner
     */
    'logo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardCommentListInner
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardCommentListInner
     */
    'createDate'?: string;
}
/**
 * 
 * @export
 * @interface MoodboardOfferNodeCollection
 */
export interface MoodboardOfferNodeCollection {
    /**
     * 
     * @type {number}
     * @memberof MoodboardOfferNodeCollection
     */
    'nodeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MoodboardOfferNodeCollection
     */
    'nodeType'?: MoodboardOfferNodeCollectionNodeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MoodboardOfferNodeCollection
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardOfferNodeCollection
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardOfferNodeCollection
     */
    'trendBoardCoverImg'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardOfferNodeCollection
     */
    'trendBoardFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardOfferNodeCollection
     */
    'trendBoardUrl'?: string;
    /**
     * 
     * @type {Array<MoodboardOfferNodeCollectionLocationListInner>}
     * @memberof MoodboardOfferNodeCollection
     */
    'locationList'?: Array<MoodboardOfferNodeCollectionLocationListInner>;
    /**
     * 
     * @type {Array<MoodboardOfferNodeCollectionChildNodeListInner>}
     * @memberof MoodboardOfferNodeCollection
     */
    'childNodeList'?: Array<MoodboardOfferNodeCollectionChildNodeListInner>;
}

export const MoodboardOfferNodeCollectionNodeTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type MoodboardOfferNodeCollectionNodeTypeEnum = typeof MoodboardOfferNodeCollectionNodeTypeEnum[keyof typeof MoodboardOfferNodeCollectionNodeTypeEnum];

/**
 * 
 * @export
 * @interface MoodboardOfferNodeCollectionChildNodeListInner
 */
export interface MoodboardOfferNodeCollectionChildNodeListInner {
    /**
     * 
     * @type {number}
     * @memberof MoodboardOfferNodeCollectionChildNodeListInner
     */
    'nodeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof MoodboardOfferNodeCollectionChildNodeListInner
     */
    'nodeType'?: MoodboardOfferNodeCollectionChildNodeListInnerNodeTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof MoodboardOfferNodeCollectionChildNodeListInner
     */
    'isPicked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MoodboardOfferNodeCollectionChildNodeListInner
     */
    'creator'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardOfferNodeCollectionChildNodeListInner
     */
    'creatorLogo'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MoodboardOfferNodeCollectionChildNodeListInner
     */
    'location'?: Array<string>;
    /**
     * 
     * @type {MoodboardOfferNodeCollectionChildNodeListInnerProperties}
     * @memberof MoodboardOfferNodeCollectionChildNodeListInner
     */
    'properties'?: MoodboardOfferNodeCollectionChildNodeListInnerProperties;
}

export const MoodboardOfferNodeCollectionChildNodeListInnerNodeTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type MoodboardOfferNodeCollectionChildNodeListInnerNodeTypeEnum = typeof MoodboardOfferNodeCollectionChildNodeListInnerNodeTypeEnum[keyof typeof MoodboardOfferNodeCollectionChildNodeListInnerNodeTypeEnum];

/**
 * @type MoodboardOfferNodeCollectionChildNodeListInnerProperties
 * @export
 */
export type MoodboardOfferNodeCollectionChildNodeListInnerProperties = Material | MoodboardOfferNodeCollectionChildNodeListInnerPropertiesOneOf;

/**
 * 
 * @export
 * @interface MoodboardOfferNodeCollectionChildNodeListInnerPropertiesOneOf
 */
export interface MoodboardOfferNodeCollectionChildNodeListInnerPropertiesOneOf {
    /**
     * 
     * @type {string}
     * @memberof MoodboardOfferNodeCollectionChildNodeListInnerPropertiesOneOf
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardOfferNodeCollectionChildNodeListInnerPropertiesOneOf
     */
    'Description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MoodboardOfferNodeCollectionChildNodeListInnerPropertiesOneOf
     */
    'coverImgList'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof MoodboardOfferNodeCollectionChildNodeListInnerPropertiesOneOf
     */
    'itemCounts'?: number;
}
/**
 * 
 * @export
 * @interface MoodboardOfferNodeCollectionLocationListInner
 */
export interface MoodboardOfferNodeCollectionLocationListInner {
    /**
     * 
     * @type {number}
     * @memberof MoodboardOfferNodeCollectionLocationListInner
     */
    'nodeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof MoodboardOfferNodeCollectionLocationListInner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface MoodboardShare
 */
export interface MoodboardShare {
    /**
     * 
     * @type {string}
     * @memberof MoodboardShare
     */
    'sharingKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardShare
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardShare
     */
    'logo'?: string;
    /**
     * 
     * @type {string}
     * @memberof MoodboardShare
     */
    'displayName'?: string;
    /**
     * 
     * @type {number}
     * @memberof MoodboardShare
     */
    'shareDate'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MoodboardShare
     */
    'isCanSave'?: boolean;
}
/**
 * 
 * @export
 * @interface MoveWorkflowStageAllDigitalThread200Response
 */
export interface MoveWorkflowStageAllDigitalThread200Response {
    /**
     * 
     * @type {MoveWorkflowStageAllDigitalThread200ResponseResult}
     * @memberof MoveWorkflowStageAllDigitalThread200Response
     */
    'result'?: MoveWorkflowStageAllDigitalThread200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof MoveWorkflowStageAllDigitalThread200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof MoveWorkflowStageAllDigitalThread200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof MoveWorkflowStageAllDigitalThread200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface MoveWorkflowStageAllDigitalThread200ResponseResult
 */
export interface MoveWorkflowStageAllDigitalThread200ResponseResult {
    /**
     * 
     * @type {ThreadBoard}
     * @memberof MoveWorkflowStageAllDigitalThread200ResponseResult
     */
    'digitalThread'?: ThreadBoard;
}
/**
 * 
 * @export
 * @interface MoveWorkflowStageAllDigitalThreadRequest
 */
export interface MoveWorkflowStageAllDigitalThreadRequest {
    /**
     * 組織ID
     * @type {number}
     * @memberof MoveWorkflowStageAllDigitalThreadRequest
     */
    'orgId': number;
    /**
     * 
     * @type {OgType}
     * @memberof MoveWorkflowStageAllDigitalThreadRequest
     */
    'ogType': OgType;
    /**
     * 單位(組織或團隊)ID
     * @type {number}
     * @memberof MoveWorkflowStageAllDigitalThreadRequest
     */
    'ogId': number;
    /**
     * 欲移動所有Digital Thread之WorkflowStageId
     * @type {number}
     * @memberof MoveWorkflowStageAllDigitalThreadRequest
     */
    'workflowStageId': number;
    /**
     * 移動所有Digital Thread之目標位置的WorkflowStageId
     * @type {number}
     * @memberof MoveWorkflowStageAllDigitalThreadRequest
     */
    'targetWorkflowStageId': number;
}


/**
 * 
 * @export
 * @interface MoveWorkflowStageDigitalThreadRequest
 */
export interface MoveWorkflowStageDigitalThreadRequest {
    /**
     * 組織ID
     * @type {number}
     * @memberof MoveWorkflowStageDigitalThreadRequest
     */
    'orgId': number;
    /**
     * 
     * @type {OgType}
     * @memberof MoveWorkflowStageDigitalThreadRequest
     */
    'ogType': OgType;
    /**
     * 單位(組織或團隊)ID
     * @type {number}
     * @memberof MoveWorkflowStageDigitalThreadRequest
     */
    'ogId': number;
    /**
     * 欲移動之DigitalThreadSideId
     * @type {number}
     * @memberof MoveWorkflowStageDigitalThreadRequest
     */
    'digitalThreadSideId': number;
    /**
     * 目標位置的WorkflowStageId
     * @type {number}
     * @memberof MoveWorkflowStageDigitalThreadRequest
     */
    'targetWorkflowStageId': number;
    /**
     * 
     * @type {MoveWorkflowStageDigitalThreadRequestCustomOrderPayload}
     * @memberof MoveWorkflowStageDigitalThreadRequest
     */
    'customOrderPayload'?: MoveWorkflowStageDigitalThreadRequestCustomOrderPayload | null;
}


/**
 * 如果使用者ui上的sort by是1:custom時，必須傳此物件才能明確指出使用者欲移動的目標位置
 * @export
 * @interface MoveWorkflowStageDigitalThreadRequestCustomOrderPayload
 */
export interface MoveWorkflowStageDigitalThreadRequestCustomOrderPayload {
    /**
     * 目標位置的DigitalThreadSideId
     * @type {number}
     * @memberof MoveWorkflowStageDigitalThreadRequestCustomOrderPayload
     */
    'targetDigitalThreadSideId': number;
    /**
     * 是否移動至目標的前方(上方或左方)，後端預設為false移動至目標的後方(下方或右方)
     * @type {boolean}
     * @memberof MoveWorkflowStageDigitalThreadRequestCustomOrderPayload
     */
    'isMoveToBeforeTarget': boolean;
}
/**
 * 
 * @export
 * @interface MoveWorkflowStageRequest
 */
export interface MoveWorkflowStageRequest {
    /**
     * 組織ID
     * @type {number}
     * @memberof MoveWorkflowStageRequest
     */
    'orgId': number;
    /**
     * 
     * @type {OgType}
     * @memberof MoveWorkflowStageRequest
     */
    'ogType': OgType;
    /**
     * 單位(組織或團隊)ID
     * @type {number}
     * @memberof MoveWorkflowStageRequest
     */
    'ogId': number;
    /**
     * 欲移動之WorkflowStageId
     * @type {number}
     * @memberof MoveWorkflowStageRequest
     */
    'workflowStageId': number;
    /**
     * 目標位置的WorkflowStageId
     * @type {number}
     * @memberof MoveWorkflowStageRequest
     */
    'targetWorkflowStageId': number;
    /**
     * 是否移動至目標的前方(上方或左方)，後端預設為false移動至目標的後方(下方或右方)
     * @type {boolean}
     * @memberof MoveWorkflowStageRequest
     */
    'isMoveToBeforeTarget': boolean;
}


/**
 * 
 * @export
 * @interface NotificationListInner
 */
export interface NotificationListInner {
    /**
     * 
     * @type {boolean}
     * @memberof NotificationListInner
     */
    'isRead'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof NotificationListInner
     */
    'createDate'?: number;
    /**
     * 
     * @type {string}
     * @memberof NotificationListInner
     */
    'content'?: string;
    /**
     * 
     * @type {Array<ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInner>}
     * @memberof NotificationListInner
     */
    'contentValue'?: Array<ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInner>;
}
/**
 * 單位(組織或團隊)型態：1:Org，2:Group
 * @export
 * @enum {string}
 */

export const OgType = {
    ORG: 1,
    GROUP: 2
} as const;

export type OgType = typeof OgType[keyof typeof OgType];


/**
 * 
 * @export
 * @interface OrgAssetsMaterialAddToWorkspacePost200Response
 */
export interface OrgAssetsMaterialAddToWorkspacePost200Response {
    /**
     * 
     * @type {OrgAssetsMaterialAddToWorkspacePost200ResponseResult}
     * @memberof OrgAssetsMaterialAddToWorkspacePost200Response
     */
    'result'?: OrgAssetsMaterialAddToWorkspacePost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialAddToWorkspacePost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialAddToWorkspacePost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgAssetsMaterialAddToWorkspacePost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialAddToWorkspacePost200ResponseResult
 */
export interface OrgAssetsMaterialAddToWorkspacePost200ResponseResult {
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgAssetsMaterialAddToWorkspacePost200ResponseResult
     */
    'failMaterialList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialAddToWorkspacePostRequest
 */
export interface OrgAssetsMaterialAddToWorkspacePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialAddToWorkspacePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgAssetsMaterialAddToWorkspacePostRequest
     */
    'materialIdList': Array<number>;
    /**
     * 
     * @type {Array<ShareGetReceivedClonePostRequestTargetLocationListInner>}
     * @memberof OrgAssetsMaterialAddToWorkspacePostRequest
     */
    'targetWorkspaceNodeList': Array<ShareGetReceivedClonePostRequestTargetLocationListInner>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialBatchUploadGetUploadUrlPost200Response
 */
export interface OrgAssetsMaterialBatchUploadGetUploadUrlPost200Response {
    /**
     * 
     * @type {OrgAssetsMaterialBatchUploadGetUploadUrlPost200ResponseResult}
     * @memberof OrgAssetsMaterialBatchUploadGetUploadUrlPost200Response
     */
    'result'?: OrgAssetsMaterialBatchUploadGetUploadUrlPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialBatchUploadGetUploadUrlPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialBatchUploadGetUploadUrlPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgAssetsMaterialBatchUploadGetUploadUrlPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialBatchUploadGetUploadUrlPost200ResponseResult
 */
export interface OrgAssetsMaterialBatchUploadGetUploadUrlPost200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialBatchUploadGetUploadUrlPost200ResponseResult
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialBatchUploadGetUploadUrlPost200ResponseResult
     */
    'xlsxFileUploadUrl'?: string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest
 */
export interface OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest
     */
    'xlsxFileName': string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialBatchUploadPostRequest
 */
export interface OrgAssetsMaterialBatchUploadPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialBatchUploadPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialBatchUploadPostRequest
     */
    'tempUploadId': string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialBatchUploadPostRequest
     */
    'xlsxFileName': string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialCarbonCopyPostRequest
 */
export interface OrgAssetsMaterialCarbonCopyPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCarbonCopyPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCarbonCopyPostRequest
     */
    'materialId': number;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialCloneCheckPostRequest
 */
export interface OrgAssetsMaterialCloneCheckPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCloneCheckPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgAssetsMaterialCloneCheckPostRequest
     */
    'materialIdList': Array<number>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialClonePostRequest
 */
export interface OrgAssetsMaterialClonePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialClonePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgAssetsMaterialClonePostRequest
     */
    'materialIdList': Array<number>;
    /**
     * 
     * @type {Array<ShareGetReceivedClonePostRequestTargetLocationListInner>}
     * @memberof OrgAssetsMaterialClonePostRequest
     */
    'targetLocationList': Array<ShareGetReceivedClonePostRequestTargetLocationListInner>;
    /**
     * 
     * @type {ShareGetReceivedClonePostRequestOptional}
     * @memberof OrgAssetsMaterialClonePostRequest
     */
    'optional': ShareGetReceivedClonePostRequestOptional;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialCreatePostRequest
 */
export interface OrgAssetsMaterialCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequest
     */
    'tempMaterialId': string;
    /**
     * 
     * @type {OrgAssetsMaterialCreatePostRequestMaterial}
     * @memberof OrgAssetsMaterialCreatePostRequest
     */
    'material'?: OrgAssetsMaterialCreatePostRequestMaterial;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialCreatePostRequestMaterial
 */
export interface OrgAssetsMaterialCreatePostRequestMaterial {
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'isDoubleSideMaterial': boolean;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'sideType': number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'materialNo': string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'mainTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'subTypeId': number;
    /**
     * 
     * @type {Array<OrgAssetsMaterialCreatePostRequestMaterialDescriptionListInner>}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'descriptionList'?: Array<OrgAssetsMaterialCreatePostRequestMaterialDescriptionListInner>;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'weightOrThickness': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'weightOrThicknessUnit': OrgAssetsMaterialCreatePostRequestMaterialWeightOrThicknessUnitEnum;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'weightGy'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'width': number;
    /**
     * 成分
     * @type {Array<OrgAssetsMaterialCreatePostRequestMaterialContentListInner>}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'contentList': Array<OrgAssetsMaterialCreatePostRequestMaterialContentListInner>;
    /**
     * 後處理
     * @type {Array<OrgAssetsMaterialCreatePostRequestMaterialFinishListInner>}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'finishList'?: Array<OrgAssetsMaterialCreatePostRequestMaterialFinishListInner>;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'warpYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'weftYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'warpDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'weftDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'pattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'color'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'publicTagList'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'privateTagList'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'remark'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'materialSeq'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'sampleCardsRemainingQty'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'sampleCardsLocation'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'hangersRemainingQty'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'hangersLocation'?: string;
    /**
     * 
     * @type {Array<OrgAssetsMaterialCreatePostRequestMaterialInventoryListInner>}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'inventoryList'?: Array<OrgAssetsMaterialCreatePostRequestMaterialInventoryListInner>;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'isPublicInventory'?: boolean;
    /**
     * 
     * @type {OrgAssetsMaterialCreatePostRequestMaterialPublicPrice}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'publicPrice'?: OrgAssetsMaterialCreatePostRequestMaterialPublicPrice;
    /**
     * 
     * @type {OrgAssetsMaterialCreatePostRequestMaterialPublicPrice}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'privatePrice'?: OrgAssetsMaterialCreatePostRequestMaterialPublicPrice;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterial
     */
    'certificateIdList'?: Array<number>;
}

export const OrgAssetsMaterialCreatePostRequestMaterialWeightOrThicknessUnitEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsMaterialCreatePostRequestMaterialWeightOrThicknessUnitEnum = typeof OrgAssetsMaterialCreatePostRequestMaterialWeightOrThicknessUnitEnum[keyof typeof OrgAssetsMaterialCreatePostRequestMaterialWeightOrThicknessUnitEnum];

/**
 * 
 * @export
 * @interface OrgAssetsMaterialCreatePostRequestMaterialContentListInner
 */
export interface OrgAssetsMaterialCreatePostRequestMaterialContentListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialContentListInner
     */
    'contentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialContentListInner
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialContentListInner
     */
    'percentage'?: number;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialCreatePostRequestMaterialDescriptionListInner
 */
export interface OrgAssetsMaterialCreatePostRequestMaterialDescriptionListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialDescriptionListInner
     */
    'descriptionId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialDescriptionListInner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialCreatePostRequestMaterialFinishListInner
 */
export interface OrgAssetsMaterialCreatePostRequestMaterialFinishListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialFinishListInner
     */
    'finishId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialFinishListInner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialCreatePostRequestMaterialInventoryListInner
 */
export interface OrgAssetsMaterialCreatePostRequestMaterialInventoryListInner {
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialInventoryListInner
     */
    'section'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialInventoryListInner
     */
    'shelf'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialInventoryListInner
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialInventoryListInner
     */
    'unit'?: OrgAssetsMaterialCreatePostRequestMaterialInventoryListInnerUnitEnum;
}

export const OrgAssetsMaterialCreatePostRequestMaterialInventoryListInnerUnitEnum = {
    Y: 'Y',
    M: 'M',
    Kg: 'KG'
} as const;

export type OrgAssetsMaterialCreatePostRequestMaterialInventoryListInnerUnitEnum = typeof OrgAssetsMaterialCreatePostRequestMaterialInventoryListInnerUnitEnum[keyof typeof OrgAssetsMaterialCreatePostRequestMaterialInventoryListInnerUnitEnum];

/**
 * 
 * @export
 * @interface OrgAssetsMaterialCreatePostRequestMaterialPublicPrice
 */
export interface OrgAssetsMaterialCreatePostRequestMaterialPublicPrice {
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialPublicPrice
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialPublicPrice
     */
    'currency'?: OrgAssetsMaterialCreatePostRequestMaterialPublicPriceCurrencyEnum;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialPublicPrice
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialPublicPrice
     */
    'unit'?: OrgAssetsMaterialCreatePostRequestMaterialPublicPriceUnitEnum;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialPublicPrice
     */
    'minimumOrderQuantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialPublicPrice
     */
    'minimumOrderQuantityUnit'?: OrgAssetsMaterialCreatePostRequestMaterialPublicPriceMinimumOrderQuantityUnitEnum;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialPublicPrice
     */
    'minimumContainerQuantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialPublicPrice
     */
    'minimumContainerQuantityUnit'?: OrgAssetsMaterialCreatePostRequestMaterialPublicPriceMinimumContainerQuantityUnitEnum;
    /**
     * 產品交貨期
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialPublicPrice
     */
    'productionLeadTime'?: string;
    /**
     * 樣品交貨期
     * @type {string}
     * @memberof OrgAssetsMaterialCreatePostRequestMaterialPublicPrice
     */
    'sampleLeadTime'?: string;
}

export const OrgAssetsMaterialCreatePostRequestMaterialPublicPriceCurrencyEnum = {
    Usd: 'USD',
    Rmb: 'RMB',
    Twd: 'TWD'
} as const;

export type OrgAssetsMaterialCreatePostRequestMaterialPublicPriceCurrencyEnum = typeof OrgAssetsMaterialCreatePostRequestMaterialPublicPriceCurrencyEnum[keyof typeof OrgAssetsMaterialCreatePostRequestMaterialPublicPriceCurrencyEnum];
export const OrgAssetsMaterialCreatePostRequestMaterialPublicPriceUnitEnum = {
    Y: 'Y',
    M: 'M',
    Kg: 'KG'
} as const;

export type OrgAssetsMaterialCreatePostRequestMaterialPublicPriceUnitEnum = typeof OrgAssetsMaterialCreatePostRequestMaterialPublicPriceUnitEnum[keyof typeof OrgAssetsMaterialCreatePostRequestMaterialPublicPriceUnitEnum];
export const OrgAssetsMaterialCreatePostRequestMaterialPublicPriceMinimumOrderQuantityUnitEnum = {
    Y: 'Y',
    M: 'M',
    Kg: 'KG'
} as const;

export type OrgAssetsMaterialCreatePostRequestMaterialPublicPriceMinimumOrderQuantityUnitEnum = typeof OrgAssetsMaterialCreatePostRequestMaterialPublicPriceMinimumOrderQuantityUnitEnum[keyof typeof OrgAssetsMaterialCreatePostRequestMaterialPublicPriceMinimumOrderQuantityUnitEnum];
export const OrgAssetsMaterialCreatePostRequestMaterialPublicPriceMinimumContainerQuantityUnitEnum = {
    Y: 'Y',
    M: 'M',
    Kg: 'KG'
} as const;

export type OrgAssetsMaterialCreatePostRequestMaterialPublicPriceMinimumContainerQuantityUnitEnum = typeof OrgAssetsMaterialCreatePostRequestMaterialPublicPriceMinimumContainerQuantityUnitEnum[keyof typeof OrgAssetsMaterialCreatePostRequestMaterialPublicPriceMinimumContainerQuantityUnitEnum];

/**
 * 
 * @export
 * @interface OrgAssetsMaterialCreateRemoveAttachmentPostRequest
 */
export interface OrgAssetsMaterialCreateRemoveAttachmentPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreateRemoveAttachmentPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreateRemoveAttachmentPostRequest
     */
    'tempMaterialId': string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreateRemoveAttachmentPostRequest
     */
    'tempMaterialAttachmentId': number;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialCreateUploadAttachmentPost200Response
 */
export interface OrgAssetsMaterialCreateUploadAttachmentPost200Response {
    /**
     * 
     * @type {OrgAssetsMaterialCreateUploadAttachmentPost200ResponseResult}
     * @memberof OrgAssetsMaterialCreateUploadAttachmentPost200Response
     */
    'result'?: OrgAssetsMaterialCreateUploadAttachmentPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialCreateUploadAttachmentPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreateUploadAttachmentPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgAssetsMaterialCreateUploadAttachmentPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialCreateUploadAttachmentPost200ResponseResult
 */
export interface OrgAssetsMaterialCreateUploadAttachmentPost200ResponseResult {
    /**
     * 
     * @type {Array<OrgAssetsMaterialCreateUploadAttachmentPost200ResponseResultAttachmentListInner>}
     * @memberof OrgAssetsMaterialCreateUploadAttachmentPost200ResponseResult
     */
    'attachmentList'?: Array<OrgAssetsMaterialCreateUploadAttachmentPost200ResponseResultAttachmentListInner>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialCreateUploadAttachmentPost200ResponseResultAttachmentListInner
 */
export interface OrgAssetsMaterialCreateUploadAttachmentPost200ResponseResultAttachmentListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreateUploadAttachmentPost200ResponseResultAttachmentListInner
     */
    'tempMaterialAttachmentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreateUploadAttachmentPost200ResponseResultAttachmentListInner
     */
    'displayFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreateUploadAttachmentPost200ResponseResultAttachmentListInner
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreateUploadAttachmentPost200ResponseResultAttachmentListInner
     */
    'extension'?: string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialCreateUploadAttachmentPostRequest
 */
export interface OrgAssetsMaterialCreateUploadAttachmentPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialCreateUploadAttachmentPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreateUploadAttachmentPostRequest
     */
    'tempMaterialId': string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreateUploadAttachmentPostRequest
     */
    'tempUploadId': string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreateUploadAttachmentPostRequest
     */
    'attachmentFileName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialCreateUploadAttachmentPostRequest
     */
    'displayFileName': string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialDeleteCheckPost200Response
 */
export interface OrgAssetsMaterialDeleteCheckPost200Response {
    /**
     * 
     * @type {OrgAssetsMaterialDeleteCheckPost200ResponseResult}
     * @memberof OrgAssetsMaterialDeleteCheckPost200Response
     */
    'result'?: OrgAssetsMaterialDeleteCheckPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialDeleteCheckPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialDeleteCheckPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgAssetsMaterialDeleteCheckPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialDeleteCheckPost200ResponseResult
 */
export interface OrgAssetsMaterialDeleteCheckPost200ResponseResult {
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialDeleteCheckPost200ResponseResult
     */
    'isOnGeneratingU3m'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialDeleteCheckPost200ResponseResult
     */
    'isOnExportingExcel'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgAssetsMaterialDeleteCheckPost200ResponseResult
     */
    'materialNoList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialDeletePostRequest
 */
export interface OrgAssetsMaterialDeletePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialDeletePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgAssetsMaterialDeletePostRequest
     */
    'materialIdList': Array<number>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialExportPost200Response
 */
export interface OrgAssetsMaterialExportPost200Response {
    /**
     * 
     * @type {OrgAssetsMaterialExportPost200ResponseResult}
     * @memberof OrgAssetsMaterialExportPost200Response
     */
    'result'?: OrgAssetsMaterialExportPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialExportPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialExportPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgAssetsMaterialExportPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialExportPost200ResponseResult
 */
export interface OrgAssetsMaterialExportPost200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialExportPost200ResponseResult
     */
    'file'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialExportPost200ResponseResult
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialExportPost200ResponseResult
     */
    'extension'?: string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialGetListPost200Response
 */
export interface OrgAssetsMaterialGetListPost200Response {
    /**
     * 
     * @type {OrgAssetsMaterialGetListPost200ResponseResult}
     * @memberof OrgAssetsMaterialGetListPost200Response
     */
    'result'?: OrgAssetsMaterialGetListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialGetListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialGetListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgAssetsMaterialGetListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialGetListPost200ResponseResult
 */
export interface OrgAssetsMaterialGetListPost200ResponseResult {
    /**
     * 
     * @type {PaginationRes}
     * @memberof OrgAssetsMaterialGetListPost200ResponseResult
     */
    'pagination'?: PaginationRes;
    /**
     * 
     * @type {OrgAssetsMaterialGetListPost200ResponseResultAssets}
     * @memberof OrgAssetsMaterialGetListPost200ResponseResult
     */
    'assets'?: OrgAssetsMaterialGetListPost200ResponseResultAssets;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialGetListPost200ResponseResultAssets
 */
export interface OrgAssetsMaterialGetListPost200ResponseResultAssets {
    /**
     * 
     * @type {Array<Material>}
     * @memberof OrgAssetsMaterialGetListPost200ResponseResultAssets
     */
    'materialList'?: Array<Material>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialGetListPostRequest
 */
export interface OrgAssetsMaterialGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialGetListPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Search}
     * @memberof OrgAssetsMaterialGetListPostRequest
     */
    'search'?: Search;
    /**
     * 
     * @type {AssetFilter}
     * @memberof OrgAssetsMaterialGetListPostRequest
     */
    'filter'?: AssetFilter;
    /**
     * 
     * @type {PaginationReq}
     * @memberof OrgAssetsMaterialGetListPostRequest
     */
    'pagination': PaginationReq;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialGetPost200Response
 */
export interface OrgAssetsMaterialGetPost200Response {
    /**
     * 
     * @type {OrgAssetsMaterialGetPost200ResponseResult}
     * @memberof OrgAssetsMaterialGetPost200Response
     */
    'result'?: OrgAssetsMaterialGetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialGetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialGetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgAssetsMaterialGetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialGetPost200ResponseResult
 */
export interface OrgAssetsMaterialGetPost200ResponseResult {
    /**
     * 
     * @type {Material}
     * @memberof OrgAssetsMaterialGetPost200ResponseResult
     */
    'material'?: Material;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialGetPostRequest
 */
export interface OrgAssetsMaterialGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialGetPostRequest
     */
    'orglId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialGetPostRequest
     */
    'materialId': number;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialMergePostRequest
 */
export interface OrgAssetsMaterialMergePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialMergePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<OrgAssetsMaterialMergePostRequestMergedListInner>}
     * @memberof OrgAssetsMaterialMergePostRequest
     */
    'mergedList': Array<OrgAssetsMaterialMergePostRequestMergedListInner>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialMergePostRequestMergedListInner
 */
export interface OrgAssetsMaterialMergePostRequestMergedListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialMergePostRequestMergedListInner
     */
    'faceSideMaterialId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialMergePostRequestMergedListInner
     */
    'backSideMaterialId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialMergePostRequestMergedListInner
     */
    'detailMaterialId'?: number;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialOptionsPost200Response
 */
export interface OrgAssetsMaterialOptionsPost200Response {
    /**
     * 
     * @type {OrgAssetsMaterialOptionsPost200ResponseResult}
     * @memberof OrgAssetsMaterialOptionsPost200Response
     */
    'result'?: OrgAssetsMaterialOptionsPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialOptionsPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialOptionsPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgAssetsMaterialOptionsPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialOptionsPost200ResponseResult
 */
export interface OrgAssetsMaterialOptionsPost200ResponseResult {
    /**
     * 
     * @type {OrgAssetsMaterialOptionsPost200ResponseResultCode}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResult
     */
    'code'?: OrgAssetsMaterialOptionsPost200ResponseResultCode;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialOptionsPost200ResponseResultCode
 */
export interface OrgAssetsMaterialOptionsPost200ResponseResultCode {
    /**
     * 
     * @type {OrgAssetsMaterialOptionsPost200ResponseResultCodeContentList}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCode
     */
    'contentList'?: OrgAssetsMaterialOptionsPost200ResponseResultCodeContentList;
    /**
     * 
     * @type {OrgAssetsMaterialOptionsPost200ResponseResultCodeDescriptionList}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCode
     */
    'descriptionList'?: OrgAssetsMaterialOptionsPost200ResponseResultCodeDescriptionList;
    /**
     * 
     * @type {OrgAssetsMaterialOptionsPost200ResponseResultCodeFinishList}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCode
     */
    'finishList'?: OrgAssetsMaterialOptionsPost200ResponseResultCodeFinishList;
    /**
     * 憑證
     * @type {Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeCertificateListInner>}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCode
     */
    'certificateList'?: Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeCertificateListInner>;
    /**
     * 分類
     * @type {Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInner>}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCode
     */
    'typeList'?: Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInner>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialOptionsPost200ResponseResultCodeCertificateListInner
 */
export interface OrgAssetsMaterialOptionsPost200ResponseResultCodeCertificateListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeCertificateListInner
     */
    'certificateId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeCertificateListInner
     */
    'name'?: string;
}
/**
 * 成分
 * @export
 * @interface OrgAssetsMaterialOptionsPost200ResponseResultCodeContentList
 */
export interface OrgAssetsMaterialOptionsPost200ResponseResultCodeContentList {
    /**
     * 
     * @type {Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeContentListDefaultInner>}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeContentList
     */
    'default'?: Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeContentListDefaultInner>;
    /**
     * 
     * @type {Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeContentListDefaultInner>}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeContentList
     */
    'custom'?: Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeContentListDefaultInner>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialOptionsPost200ResponseResultCodeContentListDefaultInner
 */
export interface OrgAssetsMaterialOptionsPost200ResponseResultCodeContentListDefaultInner {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeContentListDefaultInner
     */
    'contentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeContentListDefaultInner
     */
    'name'?: string;
}
/**
 * 品名描述
 * @export
 * @interface OrgAssetsMaterialOptionsPost200ResponseResultCodeDescriptionList
 */
export interface OrgAssetsMaterialOptionsPost200ResponseResultCodeDescriptionList {
    /**
     * 
     * @type {Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeDescriptionListDefaultInner>}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeDescriptionList
     */
    'default'?: Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeDescriptionListDefaultInner>;
    /**
     * 
     * @type {Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeDescriptionListDefaultInner>}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeDescriptionList
     */
    'custom'?: Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeDescriptionListDefaultInner>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialOptionsPost200ResponseResultCodeDescriptionListDefaultInner
 */
export interface OrgAssetsMaterialOptionsPost200ResponseResultCodeDescriptionListDefaultInner {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeDescriptionListDefaultInner
     */
    'descriptionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeDescriptionListDefaultInner
     */
    'name'?: string;
}
/**
 * 後處理
 * @export
 * @interface OrgAssetsMaterialOptionsPost200ResponseResultCodeFinishList
 */
export interface OrgAssetsMaterialOptionsPost200ResponseResultCodeFinishList {
    /**
     * 
     * @type {Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeFinishListDefaultInner>}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeFinishList
     */
    'default'?: Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeFinishListDefaultInner>;
    /**
     * 
     * @type {Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeFinishListDefaultInner>}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeFinishList
     */
    'custom'?: Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeFinishListDefaultInner>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialOptionsPost200ResponseResultCodeFinishListDefaultInner
 */
export interface OrgAssetsMaterialOptionsPost200ResponseResultCodeFinishListDefaultInner {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeFinishListDefaultInner
     */
    'finishId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeFinishListDefaultInner
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInner
 */
export interface OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInner {
    /**
     * 
     * @type {OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerMainType}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInner
     */
    'mainType'?: OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerMainType;
    /**
     * 
     * @type {Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerSubTypeListInner>}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInner
     */
    'subTypeList'?: Array<OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerSubTypeListInner>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerMainType
 */
export interface OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerMainType {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerMainType
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerMainType
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerSubTypeListInner
 */
export interface OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerSubTypeListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerSubTypeListInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialOptionsPost200ResponseResultCodeTypeListInnerSubTypeListInner
     */
    'mame'?: string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialSmartUploadPostRequest
 */
export interface OrgAssetsMaterialSmartUploadPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialSmartUploadPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner>}
     * @memberof OrgAssetsMaterialSmartUploadPostRequest
     */
    'fileList': Array<OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateAddPantonePostRequest
 */
export interface OrgAssetsMaterialUpdateAddPantonePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateAddPantonePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateAddPantonePostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateAddPantonePostRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200Response
 */
export interface OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200Response {
    /**
     * 
     * @type {OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200ResponseResult}
     * @memberof OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200Response
     */
    'result'?: OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200ResponseResult
 */
export interface OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200ResponseResult
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200ResponseResult
     */
    'attachmentCropImgUploadUrl'?: string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest
 */
export interface OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest
     */
    'attachmentCropImgFileName'?: string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateCoverImgPostRequest
 */
export interface OrgAssetsMaterialUpdateCoverImgPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateCoverImgPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateCoverImgPostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateCoverImgPostRequest
     */
    'coverMode': OrgAssetsMaterialUpdateCoverImgPostRequestCoverModeEnum;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateCoverImgPostRequest
     */
    'materialAttachmentId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateCoverImgPostRequest
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateCoverImgPostRequestAttachmentCropImageRecord}
     * @memberof OrgAssetsMaterialUpdateCoverImgPostRequest
     */
    'attachmentCropImageRecord'?: OrgAssetsMaterialUpdateCoverImgPostRequestAttachmentCropImageRecord;
}

export const OrgAssetsMaterialUpdateCoverImgPostRequestCoverModeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsMaterialUpdateCoverImgPostRequestCoverModeEnum = typeof OrgAssetsMaterialUpdateCoverImgPostRequestCoverModeEnum[keyof typeof OrgAssetsMaterialUpdateCoverImgPostRequestCoverModeEnum];

/**
 * coverMode=3,欄位必填
 * @export
 * @interface OrgAssetsMaterialUpdateCoverImgPostRequestAttachmentCropImageRecord
 */
export interface OrgAssetsMaterialUpdateCoverImgPostRequestAttachmentCropImageRecord {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateCoverImgPostRequestAttachmentCropImageRecord
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateCoverImgPostRequestAttachmentCropImageRecord
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateCoverImgPostRequestAttachmentCropImageRecord
     */
    'rotateDeg'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateCoverImgPostRequestAttachmentCropImageRecord
     */
    'scaleRatio'?: number;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateGenerateU3mPostRequest
 */
export interface OrgAssetsMaterialUpdateGenerateU3mPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'isAutoRepeat': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'faceSideCropImgFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'backSideCropImgFileName'?: string;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecord}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'faceSideCropImageRecord'?: OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecord;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecord}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'backSideCropImageRecord'?: OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecord;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecord
 */
export interface OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecord {
    /**
     * 
     * @type {OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordSquareCropRecord}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecord
     */
    'squareCropRecord'?: OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordSquareCropRecord;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordPerspectiveCropRecord}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecord
     */
    'perspectiveCropRecord'?: OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordPerspectiveCropRecord;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordPerspectiveCropRecord
 */
export interface OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordPerspectiveCropRecord {
    /**
     * 
     * @type {PerspectiveCropImageRecordLeftTop}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordPerspectiveCropRecord
     */
    'leftTop'?: PerspectiveCropImageRecordLeftTop;
    /**
     * 
     * @type {PerspectiveCropImageRecordLeftTop}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordPerspectiveCropRecord
     */
    'leftBottom'?: PerspectiveCropImageRecordLeftTop;
    /**
     * 
     * @type {PerspectiveCropImageRecordLeftTop}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordPerspectiveCropRecord
     */
    'rightTop'?: PerspectiveCropImageRecordLeftTop;
    /**
     * 
     * @type {PerspectiveCropImageRecordLeftTop}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordPerspectiveCropRecord
     */
    'rightBottom'?: PerspectiveCropImageRecordLeftTop;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordPerspectiveCropRecord
     */
    'rotateDeg'?: number;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordSquareCropRecord
 */
export interface OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordSquareCropRecord {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordSquareCropRecord
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordSquareCropRecord
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordSquareCropRecord
     */
    'rotateDeg'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecordSquareCropRecord
     */
    'scaleRatio'?: number;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateIsDoubleSidePostRequest
 */
export interface OrgAssetsMaterialUpdateIsDoubleSidePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateIsDoubleSidePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateIsDoubleSidePostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialUpdateIsDoubleSidePostRequest
     */
    'isDoubleSideMaterial': boolean;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdatePostRequest
 */
export interface OrgAssetsMaterialUpdatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdatePostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {OrgAssetsMaterialUpdatePostRequestMaterial}
     * @memberof OrgAssetsMaterialUpdatePostRequest
     */
    'material'?: OrgAssetsMaterialUpdatePostRequestMaterial;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdatePostRequestMaterial
 */
export interface OrgAssetsMaterialUpdatePostRequestMaterial {
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'materialNo': string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'mainTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'subTypeId': number;
    /**
     * 
     * @type {Array<OrgAssetsMaterialCreatePostRequestMaterialDescriptionListInner>}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'descriptionList'?: Array<OrgAssetsMaterialCreatePostRequestMaterialDescriptionListInner>;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'weightOrThickness': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'weightOrThicknessUnit': OrgAssetsMaterialUpdatePostRequestMaterialWeightOrThicknessUnitEnum;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'weightGy'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'width': number;
    /**
     * 成分
     * @type {Array<OrgAssetsMaterialCreatePostRequestMaterialContentListInner>}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'contentList': Array<OrgAssetsMaterialCreatePostRequestMaterialContentListInner>;
    /**
     * 後處理
     * @type {Array<OrgAssetsMaterialCreatePostRequestMaterialFinishListInner>}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'finishList'?: Array<OrgAssetsMaterialCreatePostRequestMaterialFinishListInner>;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'warpYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'weftYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'warpDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'weftDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'pattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'color'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'publicTagList'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'privateTagList'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'aiTagList'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'remark'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'materialSeq'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'sampleCardsRemainingQty'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'sampleCardsLocation'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'hangersRemainingQty'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'hangersLocation'?: string;
    /**
     * 
     * @type {Array<OrgAssetsMaterialCreatePostRequestMaterialInventoryListInner>}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'inventoryList'?: Array<OrgAssetsMaterialCreatePostRequestMaterialInventoryListInner>;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'isPublicInventory'?: boolean;
    /**
     * 
     * @type {OrgAssetsMaterialCreatePostRequestMaterialPublicPrice}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'publicPrice'?: OrgAssetsMaterialCreatePostRequestMaterialPublicPrice;
    /**
     * 
     * @type {OrgAssetsMaterialCreatePostRequestMaterialPublicPrice}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'privatePrice'?: OrgAssetsMaterialCreatePostRequestMaterialPublicPrice;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgAssetsMaterialUpdatePostRequestMaterial
     */
    'certificateIdList'?: Array<number>;
}

export const OrgAssetsMaterialUpdatePostRequestMaterialWeightOrThicknessUnitEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsMaterialUpdatePostRequestMaterialWeightOrThicknessUnitEnum = typeof OrgAssetsMaterialUpdatePostRequestMaterialWeightOrThicknessUnitEnum[keyof typeof OrgAssetsMaterialUpdatePostRequestMaterialWeightOrThicknessUnitEnum];

/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateRemoveAttachmentPostRequest
 */
export interface OrgAssetsMaterialUpdateRemoveAttachmentPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateRemoveAttachmentPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateRemoveAttachmentPostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateRemoveAttachmentPostRequest
     */
    'materialAttachmentId': number;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateRemovePantonePostRequest
 */
export interface OrgAssetsMaterialUpdateRemovePantonePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateRemovePantonePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateRemovePantonePostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateRemovePantonePostRequest
     */
    'materialPantoneId': number;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200Response
 */
export interface OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200Response {
    /**
     * 
     * @type {OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200ResponseResult}
     * @memberof OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200Response
     */
    'result'?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200ResponseResult
 */
export interface OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200ResponseResult
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200ResponseResult
     */
    'faceSideCropImgUploadUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200ResponseResult
     */
    'backSideCropImgUploadUrl'?: string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest
 */
export interface OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest
     */
    'faceSideCropImgFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest
     */
    'backSideCropImgFileName'?: string;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateScanImagePostRequest
 */
export interface OrgAssetsMaterialUpdateScanImagePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateScanImagePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateScanImagePostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialUpdateScanImagePostRequest
     */
    'isExchange': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateScanImagePostRequest
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateScanImagePostRequest
     */
    'faceSideCropImgFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateScanImagePostRequest
     */
    'backSideCropImgFileName'?: string;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord}
     * @memberof OrgAssetsMaterialUpdateScanImagePostRequest
     */
    'faceSideCropImageRecord'?: OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord}
     * @memberof OrgAssetsMaterialUpdateScanImagePostRequest
     */
    'backSideCropImageRecord'?: OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord
 */
export interface OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord
     */
    'rotateDeg'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord
     */
    'scaleRatio'?: number;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateSimpleInventoryPostRequest
 */
export interface OrgAssetsMaterialUpdateSimpleInventoryPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimpleInventoryPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimpleInventoryPostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateSimpleInventoryPostRequestMaterial}
     * @memberof OrgAssetsMaterialUpdateSimpleInventoryPostRequest
     */
    'material'?: OrgAssetsMaterialUpdateSimpleInventoryPostRequestMaterial;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateSimpleInventoryPostRequestMaterial
 */
export interface OrgAssetsMaterialUpdateSimpleInventoryPostRequestMaterial {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimpleInventoryPostRequestMaterial
     */
    'sampleCardsRemainingQty'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateSimpleInventoryPostRequestMaterial
     */
    'sampleCardsLocation'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimpleInventoryPostRequestMaterial
     */
    'hangersRemainingQty'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateSimpleInventoryPostRequestMaterial
     */
    'hangersLocation'?: string;
    /**
     * 
     * @type {Array<OrgAssetsMaterialCreatePostRequestMaterialInventoryListInner>}
     * @memberof OrgAssetsMaterialUpdateSimpleInventoryPostRequestMaterial
     */
    'inventoryList'?: Array<OrgAssetsMaterialCreatePostRequestMaterialInventoryListInner>;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsMaterialUpdateSimpleInventoryPostRequestMaterial
     */
    'isPublicInventory'?: boolean;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateSimplePublicPricePostRequest
 */
export interface OrgAssetsMaterialUpdateSimplePublicPricePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimplePublicPricePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimplePublicPricePostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateSimplePublicPricePostRequestMaterial}
     * @memberof OrgAssetsMaterialUpdateSimplePublicPricePostRequest
     */
    'material'?: OrgAssetsMaterialUpdateSimplePublicPricePostRequestMaterial;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateSimplePublicPricePostRequestMaterial
 */
export interface OrgAssetsMaterialUpdateSimplePublicPricePostRequestMaterial {
    /**
     * 
     * @type {OrgAssetsMaterialCreatePostRequestMaterialPublicPrice}
     * @memberof OrgAssetsMaterialUpdateSimplePublicPricePostRequestMaterial
     */
    'publicPrice'?: OrgAssetsMaterialCreatePostRequestMaterialPublicPrice;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateSimpleSpecPostRequest
 */
export interface OrgAssetsMaterialUpdateSimpleSpecPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequest
     */
    'material'?: OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
 */
export interface OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial {
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'materialNo': string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'mainTypeId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'subTypeId': number;
    /**
     * 
     * @type {Array<OrgAssetsMaterialCreatePostRequestMaterialDescriptionListInner>}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'descriptionList'?: Array<OrgAssetsMaterialCreatePostRequestMaterialDescriptionListInner>;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'weightOrThickness': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'weightOrThicknessUnit': OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterialWeightOrThicknessUnitEnum;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'weightGy'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'width': number;
    /**
     * 成分
     * @type {Array<OrgAssetsMaterialCreatePostRequestMaterialContentListInner>}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'contentList': Array<OrgAssetsMaterialCreatePostRequestMaterialContentListInner>;
    /**
     * 後處理
     * @type {Array<OrgAssetsMaterialCreatePostRequestMaterialFinishListInner>}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'finishList'?: Array<OrgAssetsMaterialCreatePostRequestMaterialFinishListInner>;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'warpYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'weftYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'warpDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'weftDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'pattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial
     */
    'color'?: string;
}

export const OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterialWeightOrThicknessUnitEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterialWeightOrThicknessUnitEnum = typeof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterialWeightOrThicknessUnitEnum[keyof typeof OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterialWeightOrThicknessUnitEnum];

/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateSimpleTagPostRequest
 */
export interface OrgAssetsMaterialUpdateSimpleTagPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimpleTagPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateSimpleTagPostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateSimpleTagPostRequestMaterial}
     * @memberof OrgAssetsMaterialUpdateSimpleTagPostRequest
     */
    'material'?: OrgAssetsMaterialUpdateSimpleTagPostRequestMaterial;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateSimpleTagPostRequestMaterial
 */
export interface OrgAssetsMaterialUpdateSimpleTagPostRequestMaterial {
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgAssetsMaterialUpdateSimpleTagPostRequestMaterial
     */
    'publicTagList'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgAssetsMaterialUpdateSimpleTagPostRequestMaterial
     */
    'privateTagList'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgAssetsMaterialUpdateSimpleTagPostRequestMaterial
     */
    'aiTagList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface OrgAssetsMaterialUpdateUploadAttachmentPostRequest
 */
export interface OrgAssetsMaterialUpdateUploadAttachmentPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateUploadAttachmentPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsMaterialUpdateUploadAttachmentPostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateUploadAttachmentPostRequest
     */
    'tempUploadId': string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateUploadAttachmentPostRequest
     */
    'attachmentFileName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsMaterialUpdateUploadAttachmentPostRequest
     */
    'displayFileName': string;
}
/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressExcelCancelPostRequest
 */
export interface OrgAssetsUploadProgressExcelCancelPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressExcelCancelPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressExcelCancelPostRequest
     */
    'excelProgressId': number;
}
/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressExcelGetListPost200Response
 */
export interface OrgAssetsUploadProgressExcelGetListPost200Response {
    /**
     * 
     * @type {OrgAssetsUploadProgressExcelGetListPost200ResponseResult}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200Response
     */
    'result'?: OrgAssetsUploadProgressExcelGetListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressExcelGetListPost200ResponseResult
 */
export interface OrgAssetsUploadProgressExcelGetListPost200ResponseResult {
    /**
     * 
     * @type {Array<OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner>}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200ResponseResult
     */
    'excelProgressList'?: Array<OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner>;
}
/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
 */
export interface OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'excelProgressId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'category'?: OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'fileUrl'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'materialNoList'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'createDate'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'createUser'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'createAvatar'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'status'?: OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerStatusEnum;
    /**
     * status 為 3 Unsuccessful 時 msgCode 才有值
     * @type {number}
     * @memberof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'msgCode'?: OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerMsgCodeEnum;
}

export const OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerCategoryEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerCategoryEnum = typeof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerCategoryEnum[keyof typeof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerCategoryEnum];
export const OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerStatusEnum = typeof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerStatusEnum[keyof typeof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerStatusEnum];
export const OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerMsgCodeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerMsgCodeEnum = typeof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerMsgCodeEnum[keyof typeof OrgAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerMsgCodeEnum];

/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressExcelGetListPostRequest
 */
export interface OrgAssetsUploadProgressExcelGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressExcelGetListPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressExcelGetListPostRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressExcelGetListPostRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressExcelGetListPostRequest
     */
    'status'?: OrgAssetsUploadProgressExcelGetListPostRequestStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressExcelGetListPostRequest
     */
    'category'?: OrgAssetsUploadProgressExcelGetListPostRequestCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressExcelGetListPostRequest
     */
    'keyword'?: string;
    /**
     * 
     * @type {OrgAssetsUploadProgressExcelGetListPostRequestPagination}
     * @memberof OrgAssetsUploadProgressExcelGetListPostRequest
     */
    'pagination': OrgAssetsUploadProgressExcelGetListPostRequestPagination;
}

export const OrgAssetsUploadProgressExcelGetListPostRequestStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsUploadProgressExcelGetListPostRequestStatusEnum = typeof OrgAssetsUploadProgressExcelGetListPostRequestStatusEnum[keyof typeof OrgAssetsUploadProgressExcelGetListPostRequestStatusEnum];
export const OrgAssetsUploadProgressExcelGetListPostRequestCategoryEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsUploadProgressExcelGetListPostRequestCategoryEnum = typeof OrgAssetsUploadProgressExcelGetListPostRequestCategoryEnum[keyof typeof OrgAssetsUploadProgressExcelGetListPostRequestCategoryEnum];

/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressExcelGetListPostRequestPagination
 */
export interface OrgAssetsUploadProgressExcelGetListPostRequestPagination {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressExcelGetListPostRequestPagination
     */
    'perPageCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressExcelGetListPostRequestPagination
     */
    'targetPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressExcelGetListPostRequestPagination
     */
    'sort'?: OrgAssetsUploadProgressExcelGetListPostRequestPaginationSortEnum;
}

export const OrgAssetsUploadProgressExcelGetListPostRequestPaginationSortEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsUploadProgressExcelGetListPostRequestPaginationSortEnum = typeof OrgAssetsUploadProgressExcelGetListPostRequestPaginationSortEnum[keyof typeof OrgAssetsUploadProgressExcelGetListPostRequestPaginationSortEnum];

/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressExcelGetMaterialListPost200Response
 */
export interface OrgAssetsUploadProgressExcelGetMaterialListPost200Response {
    /**
     * 
     * @type {OrgAssetsMaterialGetListPost200ResponseResultAssets}
     * @memberof OrgAssetsUploadProgressExcelGetMaterialListPost200Response
     */
    'result'?: OrgAssetsMaterialGetListPost200ResponseResultAssets;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsUploadProgressExcelGetMaterialListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressExcelGetMaterialListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgAssetsUploadProgressExcelGetMaterialListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressMaterialCancelPostRequest
 */
export interface OrgAssetsUploadProgressMaterialCancelPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressMaterialCancelPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressMaterialCancelPostRequest
     */
    'materialProgressId': number;
}
/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressMaterialGetListPost200Response
 */
export interface OrgAssetsUploadProgressMaterialGetListPost200Response {
    /**
     * 
     * @type {OrgAssetsUploadProgressMaterialGetListPost200ResponseResult}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200Response
     */
    'result'?: OrgAssetsUploadProgressMaterialGetListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressMaterialGetListPost200ResponseResult
 */
export interface OrgAssetsUploadProgressMaterialGetListPost200ResponseResult {
    /**
     * 
     * @type {Array<OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner>}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200ResponseResult
     */
    'materialProgressList'?: Array<OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner>;
}
/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
 */
export interface OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'materialProgressId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'materialId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'createDate'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'status'?: OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerStatusEnum;
    /**
     * status 為 3 Unsuccessful 時 msgCode 才有值
     * @type {number}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'msgCode'?: OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerMsgCodeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'isMapping'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'sideType'?: OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerSideTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'materialNo'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'isMaterialDeleted'?: boolean;
}

export const OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerStatusEnum = typeof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerStatusEnum[keyof typeof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerStatusEnum];
export const OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerMsgCodeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerMsgCodeEnum = typeof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerMsgCodeEnum[keyof typeof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerMsgCodeEnum];
export const OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerSideTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerSideTypeEnum = typeof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerSideTypeEnum[keyof typeof OrgAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerSideTypeEnum];

/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressMaterialGetListPostRequest
 */
export interface OrgAssetsUploadProgressMaterialGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressMaterialGetListPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressMaterialGetListPostRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressMaterialGetListPostRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressMaterialGetListPostRequest
     */
    'status'?: OrgAssetsUploadProgressMaterialGetListPostRequestStatusEnum;
    /**
     * 
     * @type {OrgAssetsUploadProgressMaterialGetListPostRequestPagination}
     * @memberof OrgAssetsUploadProgressMaterialGetListPostRequest
     */
    'pagination': OrgAssetsUploadProgressMaterialGetListPostRequestPagination;
}

export const OrgAssetsUploadProgressMaterialGetListPostRequestStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsUploadProgressMaterialGetListPostRequestStatusEnum = typeof OrgAssetsUploadProgressMaterialGetListPostRequestStatusEnum[keyof typeof OrgAssetsUploadProgressMaterialGetListPostRequestStatusEnum];

/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressMaterialGetListPostRequestPagination
 */
export interface OrgAssetsUploadProgressMaterialGetListPostRequestPagination {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressMaterialGetListPostRequestPagination
     */
    'perPageCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressMaterialGetListPostRequestPagination
     */
    'targetPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressMaterialGetListPostRequestPagination
     */
    'sort'?: OrgAssetsUploadProgressMaterialGetListPostRequestPaginationSortEnum;
}

export const OrgAssetsUploadProgressMaterialGetListPostRequestPaginationSortEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsUploadProgressMaterialGetListPostRequestPaginationSortEnum = typeof OrgAssetsUploadProgressMaterialGetListPostRequestPaginationSortEnum[keyof typeof OrgAssetsUploadProgressMaterialGetListPostRequestPaginationSortEnum];

/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressU3mCancelPostRequest
 */
export interface OrgAssetsUploadProgressU3mCancelPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressU3mCancelPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressU3mCancelPostRequest
     */
    'u3mProgressId': number;
}
/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressU3mGetListPost200Response
 */
export interface OrgAssetsUploadProgressU3mGetListPost200Response {
    /**
     * 
     * @type {OrgAssetsUploadProgressU3mGetListPost200ResponseResult}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200Response
     */
    'result'?: OrgAssetsUploadProgressU3mGetListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressU3mGetListPost200ResponseResult
 */
export interface OrgAssetsUploadProgressU3mGetListPost200ResponseResult {
    /**
     * 
     * @type {Array<OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner>}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200ResponseResult
     */
    'u3mProgressList'?: Array<OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner>;
}
/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
 */
export interface OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'u3mProgressId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'materialId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'materialNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'createDate'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'createUser'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'createAvatar'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'status'?: OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'isMaterialDeleted'?: boolean;
    /**
     * status 為 3 Unsuccessful 時 msgCode 才有值
     * @type {number}
     * @memberof OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'msgCode'?: OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerMsgCodeEnum;
}

export const OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerStatusEnum = typeof OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerStatusEnum[keyof typeof OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerStatusEnum];
export const OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerMsgCodeEnum = {
    NUMBER_null: null
} as const;

export type OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerMsgCodeEnum = typeof OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerMsgCodeEnum[keyof typeof OrgAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerMsgCodeEnum];

/**
 * 
 * @export
 * @interface OrgAssetsUploadProgressU3mGetListPostRequest
 */
export interface OrgAssetsUploadProgressU3mGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressU3mGetListPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressU3mGetListPostRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressU3mGetListPostRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgAssetsUploadProgressU3mGetListPostRequest
     */
    'status'?: OrgAssetsUploadProgressU3mGetListPostRequestStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrgAssetsUploadProgressU3mGetListPostRequest
     */
    'keyword'?: string;
    /**
     * 
     * @type {OrgAssetsUploadProgressMaterialGetListPostRequestPagination}
     * @memberof OrgAssetsUploadProgressU3mGetListPostRequest
     */
    'pagination': OrgAssetsUploadProgressMaterialGetListPostRequestPagination;
}

export const OrgAssetsUploadProgressU3mGetListPostRequestStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgAssetsUploadProgressU3mGetListPostRequestStatusEnum = typeof OrgAssetsUploadProgressU3mGetListPostRequestStatusEnum[keyof typeof OrgAssetsUploadProgressU3mGetListPostRequestStatusEnum];

/**
 * 
 * @export
 * @interface OrgCheckNameExistPost200Response
 */
export interface OrgCheckNameExistPost200Response {
    /**
     * 
     * @type {OrgCheckNameExistPost200ResponseResult}
     * @memberof OrgCheckNameExistPost200Response
     */
    'result'?: OrgCheckNameExistPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgCheckNameExistPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgCheckNameExistPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgCheckNameExistPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgCheckNameExistPost200ResponseResult
 */
export interface OrgCheckNameExistPost200ResponseResult {
    /**
     * 
     * @type {boolean}
     * @memberof OrgCheckNameExistPost200ResponseResult
     */
    'isExist'?: boolean;
}
/**
 * 
 * @export
 * @interface OrgCheckNameExistPostRequest
 */
export interface OrgCheckNameExistPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgCheckNameExistPostRequest
     */
    'orgName': string;
    /**
     * 
     * @type {number}
     * @memberof OrgCheckNameExistPostRequest
     */
    'orgId'?: number | null;
}
/**
 * 
 * @export
 * @interface OrgCreatePost200Response
 */
export interface OrgCreatePost200Response {
    /**
     * 
     * @type {OrgCreatePost200ResponseResult}
     * @memberof OrgCreatePost200Response
     */
    'result'?: OrgCreatePost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgCreatePost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgCreatePost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgCreatePost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgCreatePost200ResponseResult
 */
export interface OrgCreatePost200ResponseResult {
    /**
     * 
     * @type {Organization}
     * @memberof OrgCreatePost200ResponseResult
     */
    'organization'?: Organization;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgCreatePost200ResponseResult
     */
    'availableEmailList'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface OrgCreatePostRequest
 */
export interface OrgCreatePostRequest {
    /**
     * 組織名稱
     * @type {string}
     * @memberof OrgCreatePostRequest
     */
    'orgName': string;
    /**
     * 組織類型
     * @type {number}
     * @memberof OrgCreatePostRequest
     */
    'orgCategoryId': OrgCreatePostRequestOrgCategoryIdEnum;
    /**
     * 國家代碼
     * @type {string}
     * @memberof OrgCreatePostRequest
     */
    'countryCode': string;
    /**
     * 組織地址
     * @type {string}
     * @memberof OrgCreatePostRequest
     */
    'address'?: string;
    /**
     * 電話
     * @type {string}
     * @memberof OrgCreatePostRequest
     */
    'phone'?: string;
    /**
     * 電話撥號代碼
     * @type {string}
     * @memberof OrgCreatePostRequest
     */
    'phoneCountryCode'?: string;
    /**
     * 傳真
     * @type {string}
     * @memberof OrgCreatePostRequest
     */
    'fax'?: string;
    /**
     * 傳真撥號代碼
     * @type {string}
     * @memberof OrgCreatePostRequest
     */
    'faxCountryCode'?: string;
    /**
     * 當signupSourceType為1時必填，2時非必填
     * @type {string}
     * @memberof OrgCreatePostRequest
     */
    'uploadMaterialEmail'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgCreatePostRequest
     */
    'signupSourceType': OrgCreatePostRequestSignupSourceTypeEnum;
}

export const OrgCreatePostRequestOrgCategoryIdEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgCreatePostRequestOrgCategoryIdEnum = typeof OrgCreatePostRequestOrgCategoryIdEnum[keyof typeof OrgCreatePostRequestOrgCategoryIdEnum];
export const OrgCreatePostRequestSignupSourceTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgCreatePostRequestSignupSourceTypeEnum = typeof OrgCreatePostRequestSignupSourceTypeEnum[keyof typeof OrgCreatePostRequestSignupSourceTypeEnum];

/**
 * 
 * @export
 * @interface OrgCreateUploadMaterialEmailPostRequest
 */
export interface OrgCreateUploadMaterialEmailPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgCreateUploadMaterialEmailPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgCreateUploadMaterialEmailPostRequest
     */
    'uploadMaterialEmail': string;
}
/**
 * 
 * @export
 * @interface OrgGetPost200Response
 */
export interface OrgGetPost200Response {
    /**
     * 
     * @type {OrgGetPost200ResponseResult}
     * @memberof OrgGetPost200Response
     */
    'result'?: OrgGetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgGetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgGetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgGetPost200ResponseResult
 */
export interface OrgGetPost200ResponseResult {
    /**
     * 
     * @type {Organization}
     * @memberof OrgGetPost200ResponseResult
     */
    'organization'?: Organization;
}
/**
 * 
 * @export
 * @interface OrgGetPostRequest
 */
export interface OrgGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGetPostRequest
     */
    'orgId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialAddToWorkspacePostRequest
 */
export interface OrgGroupAssetsMaterialAddToWorkspacePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialAddToWorkspacePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgGroupAssetsMaterialAddToWorkspacePostRequest
     */
    'materialIdList': Array<number>;
    /**
     * 
     * @type {Array<ShareGetReceivedClonePostRequestTargetLocationListInner>}
     * @memberof OrgGroupAssetsMaterialAddToWorkspacePostRequest
     */
    'targetWorkspaceNodeList': Array<ShareGetReceivedClonePostRequestTargetLocationListInner>;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialBatchUploadPostRequest
 */
export interface OrgGroupAssetsMaterialBatchUploadPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialBatchUploadPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialBatchUploadPostRequest
     */
    'tempUploadId': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialBatchUploadPostRequest
     */
    'xlsxFileName': string;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialCloneCheckPostRequest
 */
export interface OrgGroupAssetsMaterialCloneCheckPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialCloneCheckPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgGroupAssetsMaterialCloneCheckPostRequest
     */
    'materialIdList': Array<number>;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialClonePostRequest
 */
export interface OrgGroupAssetsMaterialClonePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialClonePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgGroupAssetsMaterialClonePostRequest
     */
    'materialIdList': Array<number>;
    /**
     * 
     * @type {Array<ShareGetReceivedClonePostRequestTargetLocationListInner>}
     * @memberof OrgGroupAssetsMaterialClonePostRequest
     */
    'targetLocationList': Array<ShareGetReceivedClonePostRequestTargetLocationListInner>;
    /**
     * 
     * @type {ShareGetReceivedClonePostRequestOptional}
     * @memberof OrgGroupAssetsMaterialClonePostRequest
     */
    'optional': ShareGetReceivedClonePostRequestOptional;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialCreatePostRequest
 */
export interface OrgGroupAssetsMaterialCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialCreatePostRequest
     */
    'orgId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialCreatePostRequest
     */
    'tempMaterialId': string;
    /**
     * 
     * @type {OrgAssetsMaterialCreatePostRequestMaterial}
     * @memberof OrgGroupAssetsMaterialCreatePostRequest
     */
    'material'?: OrgAssetsMaterialCreatePostRequestMaterial;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest
 */
export interface OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest
     */
    'tempMaterialId': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest
     */
    'tempUploadId': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest
     */
    'attachmentFileName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest
     */
    'displayFileName': string;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialDeletePostRequest
 */
export interface OrgGroupAssetsMaterialDeletePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialDeletePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgGroupAssetsMaterialDeletePostRequest
     */
    'materialIdList': Array<number>;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialGetListPostRequest
 */
export interface OrgGroupAssetsMaterialGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialGetListPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Search}
     * @memberof OrgGroupAssetsMaterialGetListPostRequest
     */
    'search'?: Search;
    /**
     * 
     * @type {AssetFilter}
     * @memberof OrgGroupAssetsMaterialGetListPostRequest
     */
    'filter'?: AssetFilter;
    /**
     * 
     * @type {PaginationReq}
     * @memberof OrgGroupAssetsMaterialGetListPostRequest
     */
    'pagination': PaginationReq;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialGetPostRequest
 */
export interface OrgGroupAssetsMaterialGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialGetPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialGetPostRequest
     */
    'materialId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialMergePostRequest
 */
export interface OrgGroupAssetsMaterialMergePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialMergePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<OrgAssetsMaterialMergePostRequestMergedListInner>}
     * @memberof OrgGroupAssetsMaterialMergePostRequest
     */
    'mergedList': Array<OrgAssetsMaterialMergePostRequestMergedListInner>;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialSmartUploadPostRequest
 */
export interface OrgGroupAssetsMaterialSmartUploadPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialSmartUploadPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner>}
     * @memberof OrgGroupAssetsMaterialSmartUploadPostRequest
     */
    'fileList': Array<OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner>;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialUpdateAddPantonePostRequest
 */
export interface OrgGroupAssetsMaterialUpdateAddPantonePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateAddPantonePostRequest
     */
    'orgId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateAddPantonePostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialUpdateAddPantonePostRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialUpdateCoverImgPostRequest
 */
export interface OrgGroupAssetsMaterialUpdateCoverImgPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateCoverImgPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateCoverImgPostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateCoverImgPostRequest
     */
    'coverMode': OrgGroupAssetsMaterialUpdateCoverImgPostRequestCoverModeEnum;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateCoverImgPostRequest
     */
    'materialAttachmentId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialUpdateCoverImgPostRequest
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialUpdateCoverImgPostRequest
     */
    'attachmentCropImgFileName'?: string;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateCoverImgPostRequestAttachmentCropImageRecord}
     * @memberof OrgGroupAssetsMaterialUpdateCoverImgPostRequest
     */
    'attachmentCropImageRecord'?: OrgAssetsMaterialUpdateCoverImgPostRequestAttachmentCropImageRecord;
}

export const OrgGroupAssetsMaterialUpdateCoverImgPostRequestCoverModeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupAssetsMaterialUpdateCoverImgPostRequestCoverModeEnum = typeof OrgGroupAssetsMaterialUpdateCoverImgPostRequestCoverModeEnum[keyof typeof OrgGroupAssetsMaterialUpdateCoverImgPostRequestCoverModeEnum];

/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest
 */
export interface OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'isAutoRepeat': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'faceSideCropImgFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'backSideCropImgFileName'?: string;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecord}
     * @memberof OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'faceSideCropImageRecord'?: OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecord;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecord}
     * @memberof OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest
     */
    'backSideCropImageRecord'?: OrgAssetsMaterialUpdateGenerateU3mPostRequestFaceSideCropImageRecord;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialUpdateIsDoubleSidePostRequest
 */
export interface OrgGroupAssetsMaterialUpdateIsDoubleSidePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateIsDoubleSidePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateIsDoubleSidePostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupAssetsMaterialUpdateIsDoubleSidePostRequest
     */
    'isDoubleSideMaterial': boolean;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialUpdatePostRequest
 */
export interface OrgGroupAssetsMaterialUpdatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdatePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdatePostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {OrgAssetsMaterialUpdatePostRequestMaterial}
     * @memberof OrgGroupAssetsMaterialUpdatePostRequest
     */
    'material'?: OrgAssetsMaterialUpdatePostRequestMaterial;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest
 */
export interface OrgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest
     */
    'materialAttachmentId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialUpdateRemovePantonePostRequest
 */
export interface OrgGroupAssetsMaterialUpdateRemovePantonePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateRemovePantonePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateRemovePantonePostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateRemovePantonePostRequest
     */
    'materialPantoneId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialUpdateScanImagePostRequest
 */
export interface OrgGroupAssetsMaterialUpdateScanImagePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateScanImagePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateScanImagePostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupAssetsMaterialUpdateScanImagePostRequest
     */
    'isExchange': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialUpdateScanImagePostRequest
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialUpdateScanImagePostRequest
     */
    'faceSideCropImgFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialUpdateScanImagePostRequest
     */
    'backSideCropImgFileName'?: string;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord}
     * @memberof OrgGroupAssetsMaterialUpdateScanImagePostRequest
     */
    'faceSideCropImageRecord'?: OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord}
     * @memberof OrgGroupAssetsMaterialUpdateScanImagePostRequest
     */
    'backSideCropImageRecord'?: OrgAssetsMaterialUpdateScanImagePostRequestFaceSideCropImageRecord;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialUpdateSimpleInventoryPostRequest
 */
export interface OrgGroupAssetsMaterialUpdateSimpleInventoryPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateSimpleInventoryPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateSimpleInventoryPostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateSimpleInventoryPostRequestMaterial}
     * @memberof OrgGroupAssetsMaterialUpdateSimpleInventoryPostRequest
     */
    'material'?: OrgAssetsMaterialUpdateSimpleInventoryPostRequestMaterial;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialUpdateSimplePublicPricePostRequest
 */
export interface OrgGroupAssetsMaterialUpdateSimplePublicPricePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateSimplePublicPricePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateSimplePublicPricePostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateSimplePublicPricePostRequestMaterial}
     * @memberof OrgGroupAssetsMaterialUpdateSimplePublicPricePostRequest
     */
    'material'?: OrgAssetsMaterialUpdateSimplePublicPricePostRequestMaterial;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialUpdateSimpleSpecPostRequest
 */
export interface OrgGroupAssetsMaterialUpdateSimpleSpecPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateSimpleSpecPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateSimpleSpecPostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial}
     * @memberof OrgGroupAssetsMaterialUpdateSimpleSpecPostRequest
     */
    'material'?: OrgAssetsMaterialUpdateSimpleSpecPostRequestMaterial;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialUpdateSimpleTagPostRequest
 */
export interface OrgGroupAssetsMaterialUpdateSimpleTagPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateSimpleTagPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateSimpleTagPostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {OrgAssetsMaterialUpdateSimpleTagPostRequestMaterial}
     * @memberof OrgGroupAssetsMaterialUpdateSimpleTagPostRequest
     */
    'material'?: OrgAssetsMaterialUpdateSimpleTagPostRequestMaterial;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest
 */
export interface OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest
     */
    'materialId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest
     */
    'tempUploadId': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest
     */
    'attachmentFileName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest
     */
    'displayFileName': string;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressExcelDeletePostRequest
 */
export interface OrgGroupAssetsUploadProgressExcelDeletePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressExcelDeletePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressExcelDeletePostRequest
     */
    'excelProgressId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressExcelGetListPost200Response
 */
export interface OrgGroupAssetsUploadProgressExcelGetListPost200Response {
    /**
     * 
     * @type {OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResult}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200Response
     */
    'result'?: OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResult
 */
export interface OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResult {
    /**
     * 
     * @type {Array<OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner>}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResult
     */
    'excelProgressList'?: Array<OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner>;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
 */
export interface OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'excelProgressId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'category'?: OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'fileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'fileUrl'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'materialNoList'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'createDate'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'createUser'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'createAvatar'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'status'?: OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerStatusEnum;
    /**
     * status 為 3 Unsuccessful 時 msgCode 才有值
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInner
     */
    'msgCode'?: OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerMsgCodeEnum;
}

export const OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerCategoryEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerCategoryEnum = typeof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerCategoryEnum[keyof typeof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerCategoryEnum];
export const OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerStatusEnum = typeof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerStatusEnum[keyof typeof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerStatusEnum];
export const OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerMsgCodeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerMsgCodeEnum = typeof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerMsgCodeEnum[keyof typeof OrgGroupAssetsUploadProgressExcelGetListPost200ResponseResultExcelProgressListInnerMsgCodeEnum];

/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressExcelGetListPostRequest
 */
export interface OrgGroupAssetsUploadProgressExcelGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPostRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPostRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPostRequest
     */
    'status'?: OrgGroupAssetsUploadProgressExcelGetListPostRequestStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPostRequest
     */
    'category'?: OrgGroupAssetsUploadProgressExcelGetListPostRequestCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPostRequest
     */
    'keyword'?: string;
    /**
     * 
     * @type {OrgAssetsUploadProgressExcelGetListPostRequestPagination}
     * @memberof OrgGroupAssetsUploadProgressExcelGetListPostRequest
     */
    'pagination': OrgAssetsUploadProgressExcelGetListPostRequestPagination;
}

export const OrgGroupAssetsUploadProgressExcelGetListPostRequestStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupAssetsUploadProgressExcelGetListPostRequestStatusEnum = typeof OrgGroupAssetsUploadProgressExcelGetListPostRequestStatusEnum[keyof typeof OrgGroupAssetsUploadProgressExcelGetListPostRequestStatusEnum];
export const OrgGroupAssetsUploadProgressExcelGetListPostRequestCategoryEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupAssetsUploadProgressExcelGetListPostRequestCategoryEnum = typeof OrgGroupAssetsUploadProgressExcelGetListPostRequestCategoryEnum[keyof typeof OrgGroupAssetsUploadProgressExcelGetListPostRequestCategoryEnum];

/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressMaterialDeletePostRequest
 */
export interface OrgGroupAssetsUploadProgressMaterialDeletePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressMaterialDeletePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressMaterialDeletePostRequest
     */
    'materialProgressId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressMaterialGetListPost200Response
 */
export interface OrgGroupAssetsUploadProgressMaterialGetListPost200Response {
    /**
     * 
     * @type {OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResult}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPost200Response
     */
    'result'?: OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResult
 */
export interface OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResult {
    /**
     * 
     * @type {Array<OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner>}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResult
     */
    'materialProgressList'?: Array<OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner>;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
 */
export interface OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'materialProgressId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'materialId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'createDate'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'status'?: OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerStatusEnum;
    /**
     * status 為 3 Unsuccessful 時 msgCode 才有值
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'msgCode'?: OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerMsgCodeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'isMapping'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'sideType'?: OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerSideTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInner
     */
    'materialNo'?: string;
}

export const OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerStatusEnum = typeof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerStatusEnum[keyof typeof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerStatusEnum];
export const OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerMsgCodeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerMsgCodeEnum = typeof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerMsgCodeEnum[keyof typeof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerMsgCodeEnum];
export const OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerSideTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerSideTypeEnum = typeof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerSideTypeEnum[keyof typeof OrgGroupAssetsUploadProgressMaterialGetListPost200ResponseResultMaterialProgressListInnerSideTypeEnum];

/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressMaterialGetListPostRequest
 */
export interface OrgGroupAssetsUploadProgressMaterialGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPostRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPostRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPostRequest
     */
    'status'?: OrgGroupAssetsUploadProgressMaterialGetListPostRequestStatusEnum;
    /**
     * 
     * @type {OrgAssetsUploadProgressMaterialGetListPostRequestPagination}
     * @memberof OrgGroupAssetsUploadProgressMaterialGetListPostRequest
     */
    'pagination': OrgAssetsUploadProgressMaterialGetListPostRequestPagination;
}

export const OrgGroupAssetsUploadProgressMaterialGetListPostRequestStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupAssetsUploadProgressMaterialGetListPostRequestStatusEnum = typeof OrgGroupAssetsUploadProgressMaterialGetListPostRequestStatusEnum[keyof typeof OrgGroupAssetsUploadProgressMaterialGetListPostRequestStatusEnum];

/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressU3mDeletePostRequest
 */
export interface OrgGroupAssetsUploadProgressU3mDeletePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressU3mDeletePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressU3mDeletePostRequest
     */
    'u3mProgressId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressU3mGetListPost200Response
 */
export interface OrgGroupAssetsUploadProgressU3mGetListPost200Response {
    /**
     * 
     * @type {OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResult}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPost200Response
     */
    'result'?: OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResult
 */
export interface OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResult {
    /**
     * 
     * @type {Array<OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner>}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResult
     */
    'u3mProgressList'?: Array<OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner>;
}
/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
 */
export interface OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'u3mProgressId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'materialId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'materialNo'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'createDate'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'createUser'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'createAvatar'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'status'?: OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInner
     */
    'isMaterialDeleted'?: boolean;
}

export const OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerStatusEnum = typeof OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerStatusEnum[keyof typeof OrgGroupAssetsUploadProgressU3mGetListPost200ResponseResultU3mProgressListInnerStatusEnum];

/**
 * 
 * @export
 * @interface OrgGroupAssetsUploadProgressU3mGetListPostRequest
 */
export interface OrgGroupAssetsUploadProgressU3mGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPostRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPostRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPostRequest
     */
    'status'?: OrgGroupAssetsUploadProgressU3mGetListPostRequestStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPostRequest
     */
    'keyword'?: string;
    /**
     * 
     * @type {OrgAssetsUploadProgressMaterialGetListPostRequestPagination}
     * @memberof OrgGroupAssetsUploadProgressU3mGetListPostRequest
     */
    'pagination': OrgAssetsUploadProgressMaterialGetListPostRequestPagination;
}

export const OrgGroupAssetsUploadProgressU3mGetListPostRequestStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupAssetsUploadProgressU3mGetListPostRequestStatusEnum = typeof OrgGroupAssetsUploadProgressU3mGetListPostRequestStatusEnum[keyof typeof OrgGroupAssetsUploadProgressU3mGetListPostRequestStatusEnum];

/**
 * 
 * @export
 * @interface OrgGroupCreatePost200Response
 */
export interface OrgGroupCreatePost200Response {
    /**
     * 
     * @type {OrgGroupCreatePost200ResponseResult}
     * @memberof OrgGroupCreatePost200Response
     */
    'result'?: OrgGroupCreatePost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupCreatePost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupCreatePost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgGroupCreatePost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgGroupCreatePost200ResponseResult
 */
export interface OrgGroupCreatePost200ResponseResult {
    /**
     * 
     * @type {Organization}
     * @memberof OrgGroupCreatePost200ResponseResult
     */
    'organization'?: Organization;
    /**
     * 
     * @type {Group}
     * @memberof OrgGroupCreatePost200ResponseResult
     */
    'group'?: Group;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgGroupCreatePost200ResponseResult
     */
    'availableEmailList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface OrgGroupCreatePostRequest
 */
export interface OrgGroupCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupCreatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupCreatePostRequest
     */
    'groupName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupCreatePostRequest
     */
    'labelColor': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupCreatePostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupCreatePostRequest
     */
    'uploadMaterialEmail': string;
}
/**
 * 
 * @export
 * @interface OrgGroupDeletePostRequest
 */
export interface OrgGroupDeletePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupDeletePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupDeletePostRequest
     */
    'transferGroupId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupDeletePostRequest
     */
    'transferOrgId'?: number;
}
/**
 * 
 * @export
 * @interface OrgGroupGetPost200Response
 */
export interface OrgGroupGetPost200Response {
    /**
     * 
     * @type {OrgGroupGetPost200ResponseResult}
     * @memberof OrgGroupGetPost200Response
     */
    'result'?: OrgGroupGetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupGetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupGetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgGroupGetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgGroupGetPost200ResponseResult
 */
export interface OrgGroupGetPost200ResponseResult {
    /**
     * 
     * @type {Group}
     * @memberof OrgGroupGetPost200ResponseResult
     */
    'group'?: Group;
}
/**
 * 
 * @export
 * @interface OrgGroupGetPostRequest
 */
export interface OrgGroupGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupGetPostRequest
     */
    'groupId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupMemberAddMembersPostRequest
 */
export interface OrgGroupMemberAddMembersPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMemberAddMembersPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgGroupMemberAddMembersPostRequest
     */
    'orgUserIdList': Array<number>;
}
/**
 * 
 * @export
 * @interface OrgGroupMemberCancelInvitationPostRequest
 */
export interface OrgGroupMemberCancelInvitationPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMemberCancelInvitationPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMemberCancelInvitationPostRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface OrgGroupMemberChangeRolePostRequest
 */
export interface OrgGroupMemberChangeRolePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMemberChangeRolePostRequest
     */
    'groupUserId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMemberChangeRolePostRequest
     */
    'roleId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupMemberDeleteMemberPostRequest
 */
export interface OrgGroupMemberDeleteMemberPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMemberDeleteMemberPostRequest
     */
    'groupUserId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupMemberInviteViaEmailPostRequest
 */
export interface OrgGroupMemberInviteViaEmailPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMemberInviteViaEmailPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgGroupMemberInviteViaEmailPostRequest
     */
    'emailList': Array<string>;
}
/**
 * 
 * @export
 * @interface OrgGroupMemberJoinViaEmailPostRequest
 */
export interface OrgGroupMemberJoinViaEmailPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMemberJoinViaEmailPostRequest
     */
    'inviteCode': string;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardCreatePostRequest
 */
export interface OrgGroupMoodboardCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardCreatePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMoodboardCreatePostRequest
     */
    'moodboardName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMoodboardCreatePostRequest
     */
    'description': string;
    /**
     * 
     * @type {OrgMoodboardCreatePostRequestTrendBoard}
     * @memberof OrgGroupMoodboardCreatePostRequest
     */
    'trendBoard'?: OrgMoodboardCreatePostRequestTrendBoard;
    /**
     * 
     * @type {Array<OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner>}
     * @memberof OrgGroupMoodboardCreatePostRequest
     */
    'attachmentList'?: Array<OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner>;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardGetPostRequest
 */
export interface OrgGroupMoodboardGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardGetPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardGetPostRequest
     */
    'moodboardId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardOfferCommentCreatePostRequest
 */
export interface OrgGroupMoodboardOfferCommentCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferCommentCreatePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferCommentCreatePostRequest
     */
    'moodboardId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferCommentCreatePostRequest
     */
    'offerId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMoodboardOfferCommentCreatePostRequest
     */
    'comment': string;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardOfferCommentGetPostRequest
 */
export interface OrgGroupMoodboardOfferCommentGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferCommentGetPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferCommentGetPostRequest
     */
    'moodboardId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferCommentGetPostRequest
     */
    'offerId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardOfferNodeClonePostRequest
 */
export interface OrgGroupMoodboardOfferNodeClonePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodeClonePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgGroupMoodboardOfferNodeClonePostRequest
     */
    'nodeIdList': Array<number>;
    /**
     * 
     * @type {Array<ShareGetReceivedClonePostRequestTargetLocationListInner>}
     * @memberof OrgGroupMoodboardOfferNodeClonePostRequest
     */
    'targetLocationList': Array<ShareGetReceivedClonePostRequestTargetLocationListInner>;
    /**
     * 
     * @type {ShareGetReceivedClonePostRequestOptional}
     * @memberof OrgGroupMoodboardOfferNodeClonePostRequest
     */
    'optional': ShareGetReceivedClonePostRequestOptional;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardOfferNodeCollectionCreatePostRequest
 */
export interface OrgGroupMoodboardOfferNodeCollectionCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodeCollectionCreatePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodeCollectionCreatePostRequest
     */
    'nodeId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMoodboardOfferNodeCollectionCreatePostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMoodboardOfferNodeCollectionCreatePostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {OrgMoodboardCreatePostRequestTrendBoard}
     * @memberof OrgGroupMoodboardOfferNodeCollectionCreatePostRequest
     */
    'trendBoard'?: OrgMoodboardCreatePostRequestTrendBoard;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardOfferNodeCollectionGetPostRequest
 */
export interface OrgGroupMoodboardOfferNodeCollectionGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodeCollectionGetPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodeCollectionGetPostRequest
     */
    'moodboardId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodeCollectionGetPostRequest
     */
    'nodeId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMoodboardOfferNodeCollectionGetPostRequest
     */
    'keyword': string;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest
 */
export interface OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest
     */
    'nodeId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {OrgMoodboardCreatePostRequestTrendBoard}
     * @memberof OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest
     */
    'newTrendBoard'?: OrgMoodboardCreatePostRequestTrendBoard;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest
     */
    'isDeleteTrendBoard'?: boolean;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardOfferNodeDeletePostRequest
 */
export interface OrgGroupMoodboardOfferNodeDeletePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodeDeletePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgGroupMoodboardOfferNodeDeletePostRequest
     */
    'nodeIdList': Array<number>;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardOfferNodeMaterialCreatePostRequest
 */
export interface OrgGroupMoodboardOfferNodeMaterialCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodeMaterialCreatePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodeMaterialCreatePostRequest
     */
    'nodeId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgGroupMoodboardOfferNodeMaterialCreatePostRequest
     */
    'materialIdList': Array<number>;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardOfferNodeMaterialGetPostRequest
 */
export interface OrgGroupMoodboardOfferNodeMaterialGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodeMaterialGetPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodeMaterialGetPostRequest
     */
    'nodeId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardOfferNodePickPostRequest
 */
export interface OrgGroupMoodboardOfferNodePickPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodePickPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferNodePickPostRequest
     */
    'nodeId': number | null;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardOfferPickedExportPostRequest
 */
export interface OrgGroupMoodboardOfferPickedExportPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferPickedExportPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferPickedExportPostRequest
     */
    'moodboardId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgGroupMoodboardOfferPickedExportPostRequest
     */
    'nodeIdList': Array<number>;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardOfferPickedGetPostRequest
 */
export interface OrgGroupMoodboardOfferPickedGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferPickedGetPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardOfferPickedGetPostRequest
     */
    'moodboardId': number;
    /**
     * 不傳時為撈All Items
     * @type {number}
     * @memberof OrgGroupMoodboardOfferPickedGetPostRequest
     */
    'offerId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMoodboardOfferPickedGetPostRequest
     */
    'keyword'?: string;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardShareGetTargetPostRequest
 */
export interface OrgGroupMoodboardShareGetTargetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardShareGetTargetPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardShareGetTargetPostRequest
     */
    'moodboardId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMoodboardShareGetTargetPostRequest
     */
    'target': string;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardSharePostRequest
 */
export interface OrgGroupMoodboardSharePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardSharePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardSharePostRequest
     */
    'moodboardId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMoodboardSharePostRequest
     */
    'message'?: string;
    /**
     * 
     * @type {Array<PublicShareAssignedPostRequestTargetListInner>}
     * @memberof OrgGroupMoodboardSharePostRequest
     */
    'targetList': Array<PublicShareAssignedPostRequestTargetListInner>;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardShareRemovePostRequest
 */
export interface OrgGroupMoodboardShareRemovePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardShareRemovePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardShareRemovePostRequest
     */
    'shareId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupMoodboardUpdatePostRequest
 */
export interface OrgGroupMoodboardUpdatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardUpdatePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupMoodboardUpdatePostRequest
     */
    'moodboardId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMoodboardUpdatePostRequest
     */
    'moodboardName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupMoodboardUpdatePostRequest
     */
    'description': string;
    /**
     * 
     * @type {OrgMoodboardCreatePostRequestTrendBoard}
     * @memberof OrgGroupMoodboardUpdatePostRequest
     */
    'newTrendBoard'?: OrgMoodboardCreatePostRequestTrendBoard;
    /**
     * 
     * @type {Array<OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner>}
     * @memberof OrgGroupMoodboardUpdatePostRequest
     */
    'newAttachmentList'?: Array<OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner>;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgGroupMoodboardUpdatePostRequest
     */
    'deleteAttachmentIdList'?: Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupMoodboardUpdatePostRequest
     */
    'isDeleteTrendBoard'?: boolean;
}
/**
 * 
 * @export
 * @interface OrgGroupShareToMeCloneCheckPostRequest
 */
export interface OrgGroupShareToMeCloneCheckPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupShareToMeCloneCheckPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>}
     * @memberof OrgGroupShareToMeCloneCheckPostRequest
     */
    'workspaceNodeList': Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>;
}
/**
 * 
 * @export
 * @interface OrgGroupShareToMeClonePostRequest
 */
export interface OrgGroupShareToMeClonePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupShareToMeClonePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>}
     * @memberof OrgGroupShareToMeClonePostRequest
     */
    'workspaceNodeList': Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>;
    /**
     * 
     * @type {Array<ShareGetReceivedClonePostRequestTargetLocationListInner>}
     * @memberof OrgGroupShareToMeClonePostRequest
     */
    'targetLocationList': Array<ShareGetReceivedClonePostRequestTargetLocationListInner>;
    /**
     * 
     * @type {ShareGetReceivedClonePostRequestOptional}
     * @memberof OrgGroupShareToMeClonePostRequest
     */
    'optional': ShareGetReceivedClonePostRequestOptional;
}
/**
 * 
 * @export
 * @interface OrgGroupShareToMeDeletePostRequest
 */
export interface OrgGroupShareToMeDeletePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupShareToMeDeletePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>}
     * @memberof OrgGroupShareToMeDeletePostRequest
     */
    'workspaceNodeList': Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>;
}
/**
 * 
 * @export
 * @interface OrgGroupShareToMeGetListPostRequest
 */
export interface OrgGroupShareToMeGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupShareToMeGetListPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupShareToMeGetListPostRequest
     */
    'sharingId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupShareToMeGetListPostRequest
     */
    'workspaceNodeId'?: number;
    /**
     * 
     * @type {Search}
     * @memberof OrgGroupShareToMeGetListPostRequest
     */
    'search'?: Search;
    /**
     * 
     * @type {ShareFilter}
     * @memberof OrgGroupShareToMeGetListPostRequest
     */
    'filter'?: ShareFilter;
    /**
     * 
     * @type {PaginationReq}
     * @memberof OrgGroupShareToMeGetListPostRequest
     */
    'pagination': PaginationReq;
}
/**
 * 
 * @export
 * @interface OrgGroupShareToMeGetMaterialPostRequest
 */
export interface OrgGroupShareToMeGetMaterialPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupShareToMeGetMaterialPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupShareToMeGetMaterialPostRequest
     */
    'sharingId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupShareToMeGetMaterialPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupShareToMeGetMaterialPostRequest
     */
    'keyword'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupShareToMeGetMaterialPostRequest
     */
    'rank'?: number;
}
/**
 * 
 * @export
 * @interface OrgGroupUpdatePost200Response
 */
export interface OrgGroupUpdatePost200Response {
    /**
     * 
     * @type {OrgGroupUpdatePost200ResponseResult}
     * @memberof OrgGroupUpdatePost200Response
     */
    'result'?: OrgGroupUpdatePost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupUpdatePost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupUpdatePost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgGroupUpdatePost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgGroupUpdatePost200ResponseResult
 */
export interface OrgGroupUpdatePost200ResponseResult {
    /**
     * 
     * @type {Organization}
     * @memberof OrgGroupUpdatePost200ResponseResult
     */
    'organization'?: Organization;
    /**
     * 
     * @type {Group}
     * @memberof OrgGroupUpdatePost200ResponseResult
     */
    'group'?: Group;
}
/**
 * 
 * @export
 * @interface OrgGroupUpdatePostRequest
 */
export interface OrgGroupUpdatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupUpdatePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupUpdatePostRequest
     */
    'groupName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupUpdatePostRequest
     */
    'labelColor': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupUpdatePostRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface OrgGroupUserGetPost200Response
 */
export interface OrgGroupUserGetPost200Response {
    /**
     * 
     * @type {OrgGroupUserGetPost200ResponseResult}
     * @memberof OrgGroupUserGetPost200Response
     */
    'result'?: OrgGroupUserGetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupUserGetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupUserGetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgGroupUserGetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgGroupUserGetPost200ResponseResult
 */
export interface OrgGroupUserGetPost200ResponseResult {
    /**
     * 
     * @type {GroupUser}
     * @memberof OrgGroupUserGetPost200ResponseResult
     */
    'groupUser'?: GroupUser;
}
/**
 * 
 * @export
 * @interface OrgGroupUserGetPostRequest
 */
export interface OrgGroupUserGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupUserGetPostRequest
     */
    'groupId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceCollectionCreatePostRequest
 */
export interface OrgGroupWorkspaceCollectionCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceCollectionCreatePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceCollectionCreatePostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceCollectionCreatePostRequest
     */
    'collectionName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceCollectionCreatePostRequest
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceCollectionCreatePostRequest
     */
    'trendBoardFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceCollectionCreatePostRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceCollectionRemoveTrendBoardPostRequest
 */
export interface OrgGroupWorkspaceCollectionRemoveTrendBoardPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceCollectionRemoveTrendBoardPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceCollectionRemoveTrendBoardPostRequest
     */
    'collectionId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceCollectionUpdatePostRequest
 */
export interface OrgGroupWorkspaceCollectionUpdatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceCollectionUpdatePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceCollectionUpdatePostRequest
     */
    'collectionId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceCollectionUpdatePostRequest
     */
    'collectionName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceCollectionUpdatePostRequest
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceCollectionUpdatePostRequest
     */
    'trendBoardFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceCollectionUpdatePostRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceGetForModalPostRequest
 */
export interface OrgGroupWorkspaceGetForModalPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceGetForModalPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceGetForModalPostRequest
     */
    'workspaceNodeId'?: number | null;
    /**
     * 
     * @type {Search}
     * @memberof OrgGroupWorkspaceGetForModalPostRequest
     */
    'search'?: Search;
    /**
     * 
     * @type {PaginationReq}
     * @memberof OrgGroupWorkspaceGetForModalPostRequest
     */
    'pagination': PaginationReq;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceGetMaterialPostRequest
 */
export interface OrgGroupWorkspaceGetMaterialPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceGetMaterialPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceGetMaterialPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceGetMaterialPostRequest
     */
    'keyword'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceGetMaterialPostRequest
     */
    'rank'?: number;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceGetPostRequest
 */
export interface OrgGroupWorkspaceGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceGetPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceGetPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {Search}
     * @memberof OrgGroupWorkspaceGetPostRequest
     */
    'search'?: Search;
    /**
     * 
     * @type {WorkspaceFilter}
     * @memberof OrgGroupWorkspaceGetPostRequest
     */
    'filter'?: WorkspaceFilter;
    /**
     * 
     * @type {PaginationReq}
     * @memberof OrgGroupWorkspaceGetPostRequest
     */
    'pagination': PaginationReq;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeDeletePostRequest
 */
export interface OrgGroupWorkspaceNodeDeletePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeDeletePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgGroupWorkspaceNodeDeletePostRequest
     */
    'workspaceNodeIdList': Array<number>;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeDuplicatePostRequest
 */
export interface OrgGroupWorkspaceNodeDuplicatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeDuplicatePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeDuplicatePostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {Array<ShareGetReceivedClonePostRequestTargetLocationListInner>}
     * @memberof OrgGroupWorkspaceNodeDuplicatePostRequest
     */
    'targetWorkspaceNodeList': Array<ShareGetReceivedClonePostRequestTargetLocationListInner>;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeMovePostRequest
 */
export interface OrgGroupWorkspaceNodeMovePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeMovePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeMovePostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeMovePostRequest
     */
    'targetWorkspaceNodeId'?: number;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodePublishPostRequest
 */
export interface OrgGroupWorkspaceNodePublishPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodePublishPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodePublishPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupWorkspaceNodePublishPostRequest
     */
    'isPublic': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupWorkspaceNodePublishPostRequest
     */
    'isCanClone': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupWorkspaceNodePublishPostRequest
     */
    'isCanDownloadU3M': boolean;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeShareAssignedGetTargetPostRequest
 */
export interface OrgGroupWorkspaceNodeShareAssignedGetTargetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareAssignedGetTargetPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareAssignedGetTargetPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceNodeShareAssignedGetTargetPostRequest
     */
    'target': string;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeShareAssignedPost200Response
 */
export interface OrgGroupWorkspaceNodeShareAssignedPost200Response {
    /**
     * 
     * @type {OrgGroupWorkspaceNodeShareAssignedPost200ResponseResult}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPost200Response
     */
    'result'?: OrgGroupWorkspaceNodeShareAssignedPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeShareAssignedPost200ResponseResult
 */
export interface OrgGroupWorkspaceNodeShareAssignedPost200ResponseResult {
    /**
     * 
     * @type {Array<OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInner>}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPost200ResponseResult
     */
    'shareList'?: Array<OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInner>;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInner
 */
export interface OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInner
     */
    'type'?: OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInnerTypeEnum;
    /**
     * (SharingId Or OrgShareToMeId  Or GroupShareToMeId)
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInner
     */
    'Id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInner
     */
    'logo'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInner
     */
    'isCanClone'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInner
     */
    'isCanDownloadU3M'?: boolean;
}

export const OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInnerTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInnerTypeEnum = typeof OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInnerTypeEnum[keyof typeof OrgGroupWorkspaceNodeShareAssignedPost200ResponseResultShareListInnerTypeEnum];

/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeShareAssignedPostRequest
 */
export interface OrgGroupWorkspaceNodeShareAssignedPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {Array<PublicShareAssignedPostRequestTargetListInner>}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPostRequest
     */
    'targetList': Array<PublicShareAssignedPostRequestTargetListInner>;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPostRequest
     */
    'isCanClone': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPostRequest
     */
    'isCanDownloadU3M': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceNodeShareAssignedPostRequest
     */
    'messages'?: string;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeShareAssignedRemovePostRequest
 */
export interface OrgGroupWorkspaceNodeShareAssignedRemovePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareAssignedRemovePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareAssignedRemovePostRequest
     */
    'type'?: OrgGroupWorkspaceNodeShareAssignedRemovePostRequestTypeEnum;
    /**
     * (SharingId Or OrgShareToMeId Or GroupShareToMeId)
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareAssignedRemovePostRequest
     */
    'id': number;
}

export const OrgGroupWorkspaceNodeShareAssignedRemovePostRequestTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupWorkspaceNodeShareAssignedRemovePostRequestTypeEnum = typeof OrgGroupWorkspaceNodeShareAssignedRemovePostRequestTypeEnum[keyof typeof OrgGroupWorkspaceNodeShareAssignedRemovePostRequestTypeEnum];

/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeShareAssignedUpdatePostRequest
 */
export interface OrgGroupWorkspaceNodeShareAssignedUpdatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareAssignedUpdatePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {Array<OrgWorkspaceNodeShareAssignedUpdatePostRequestRemoveListInner>}
     * @memberof OrgGroupWorkspaceNodeShareAssignedUpdatePostRequest
     */
    'removeList'?: Array<OrgWorkspaceNodeShareAssignedUpdatePostRequestRemoveListInner>;
    /**
     * 
     * @type {Array<OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInner>}
     * @memberof OrgGroupWorkspaceNodeShareAssignedUpdatePostRequest
     */
    'updateList'?: Array<OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInner>;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest
 */
export interface OrgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest
     */
    'isCanShared': boolean;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest
 */
export interface OrgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest
     */
    'embedKey': string;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest
     */
    'isCanDownloadU3M': boolean;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeShareGetPost200Response
 */
export interface OrgGroupWorkspaceNodeShareGetPost200Response {
    /**
     * 
     * @type {OrgGroupWorkspaceNodeShareGetPost200ResponseResult}
     * @memberof OrgGroupWorkspaceNodeShareGetPost200Response
     */
    'result'?: OrgGroupWorkspaceNodeShareGetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupWorkspaceNodeShareGetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceNodeShareGetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgGroupWorkspaceNodeShareGetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeShareGetPost200ResponseResult
 */
export interface OrgGroupWorkspaceNodeShareGetPost200ResponseResult {
    /**
     * 
     * @type {Array<OrgWorkspaceNodeShareGetPost200ResponseResultShareListInner>}
     * @memberof OrgGroupWorkspaceNodeShareGetPost200ResponseResult
     */
    'shareList'?: Array<OrgWorkspaceNodeShareGetPost200ResponseResultShareListInner>;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupWorkspaceNodeShareGetPost200ResponseResult
     */
    'isCanShared'?: boolean;
    /**
     * 
     * @type {OrgGroupWorkspaceNodeShareGetPost200ResponseResultEmbed}
     * @memberof OrgGroupWorkspaceNodeShareGetPost200ResponseResult
     */
    'embed'?: OrgGroupWorkspaceNodeShareGetPost200ResponseResultEmbed;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeShareGetPost200ResponseResultEmbed
 */
export interface OrgGroupWorkspaceNodeShareGetPost200ResponseResultEmbed {
    /**
     * 
     * @type {string}
     * @memberof OrgGroupWorkspaceNodeShareGetPost200ResponseResultEmbed
     */
    'key'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrgGroupWorkspaceNodeShareGetPost200ResponseResultEmbed
     */
    'isCanDownloadU3M'?: boolean;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeShareGetPostRequest
 */
export interface OrgGroupWorkspaceNodeShareGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareGetPostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareGetPostRequest
     */
    'workspaceNodeId': number;
}
/**
 * 
 * @export
 * @interface OrgGroupWorkspaceNodeShareSocialGeneratePostRequest
 */
export interface OrgGroupWorkspaceNodeShareSocialGeneratePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareSocialGeneratePostRequest
     */
    'groupId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareSocialGeneratePostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgGroupWorkspaceNodeShareSocialGeneratePostRequest
     */
    'type': OrgGroupWorkspaceNodeShareSocialGeneratePostRequestTypeEnum;
}

export const OrgGroupWorkspaceNodeShareSocialGeneratePostRequestTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgGroupWorkspaceNodeShareSocialGeneratePostRequestTypeEnum = typeof OrgGroupWorkspaceNodeShareSocialGeneratePostRequestTypeEnum[keyof typeof OrgGroupWorkspaceNodeShareSocialGeneratePostRequestTypeEnum];

/**
 * 
 * @export
 * @interface OrgMemberCancelInvitationPostRequest
 */
export interface OrgMemberCancelInvitationPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMemberCancelInvitationPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgMemberCancelInvitationPostRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface OrgMemberChangeRolePostRequest
 */
export interface OrgMemberChangeRolePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMemberChangeRolePostRequest
     */
    'orgUserId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMemberChangeRolePostRequest
     */
    'roleId': number;
}
/**
 * 
 * @export
 * @interface OrgMemberDeletePostRequest
 */
export interface OrgMemberDeletePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMemberDeletePostRequest
     */
    'orgUserId': number;
}
/**
 * 
 * @export
 * @interface OrgMemberInviteViaEmailPostRequest
 */
export interface OrgMemberInviteViaEmailPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMemberInviteViaEmailPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrgMemberInviteViaEmailPostRequest
     */
    'emailList': Array<string>;
}
/**
 * 
 * @export
 * @interface OrgMemberJoinViaLinkPostRequest
 */
export interface OrgMemberJoinViaLinkPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgMemberJoinViaLinkPostRequest
     */
    'inviteCode': string;
}
/**
 * 
 * @export
 * @interface OrgMoodboardCreatePostRequest
 */
export interface OrgMoodboardCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardCreatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardCreatePostRequest
     */
    'moodboardName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardCreatePostRequest
     */
    'description': string;
    /**
     * 
     * @type {OrgMoodboardCreatePostRequestTrendBoard}
     * @memberof OrgMoodboardCreatePostRequest
     */
    'trendBoard'?: OrgMoodboardCreatePostRequestTrendBoard;
    /**
     * 
     * @type {Array<OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner>}
     * @memberof OrgMoodboardCreatePostRequest
     */
    'attachmentList'?: Array<OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner>;
}
/**
 * 
 * @export
 * @interface OrgMoodboardCreatePostRequestTrendBoard
 */
export interface OrgMoodboardCreatePostRequestTrendBoard {
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardCreatePostRequestTrendBoard
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardCreatePostRequestTrendBoard
     */
    'fileName'?: string;
}
/**
 * 
 * @export
 * @interface OrgMoodboardGetListPost200Response
 */
export interface OrgMoodboardGetListPost200Response {
    /**
     * 
     * @type {OrgMoodboardGetListPost200ResponseResult}
     * @memberof OrgMoodboardGetListPost200Response
     */
    'result'?: OrgMoodboardGetListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgMoodboardGetListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardGetListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgMoodboardGetListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgMoodboardGetListPost200ResponseResult
 */
export interface OrgMoodboardGetListPost200ResponseResult {
    /**
     * 
     * @type {Array<MoodboardBase>}
     * @memberof OrgMoodboardGetListPost200ResponseResult
     */
    'moodboardList'?: Array<MoodboardBase>;
}
/**
 * 
 * @export
 * @interface OrgMoodboardGetPost200Response
 */
export interface OrgMoodboardGetPost200Response {
    /**
     * 
     * @type {OrgMoodboardGetPost200ResponseResult}
     * @memberof OrgMoodboardGetPost200Response
     */
    'result'?: OrgMoodboardGetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgMoodboardGetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardGetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgMoodboardGetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgMoodboardGetPost200ResponseResult
 */
export interface OrgMoodboardGetPost200ResponseResult {
    /**
     * 
     * @type {Moodboard}
     * @memberof OrgMoodboardGetPost200ResponseResult
     */
    'moodboard'?: Moodboard;
}
/**
 * 
 * @export
 * @interface OrgMoodboardGetPostRequest
 */
export interface OrgMoodboardGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardGetPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardGetPostRequest
     */
    'moodboardId': number;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferCommentCreatePostRequest
 */
export interface OrgMoodboardOfferCommentCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferCommentCreatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferCommentCreatePostRequest
     */
    'moodboardId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferCommentCreatePostRequest
     */
    'offerId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardOfferCommentCreatePostRequest
     */
    'comment': string;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferCommentGetPost200Response
 */
export interface OrgMoodboardOfferCommentGetPost200Response {
    /**
     * 
     * @type {OrgMoodboardOfferCommentGetPost200ResponseResult}
     * @memberof OrgMoodboardOfferCommentGetPost200Response
     */
    'result'?: OrgMoodboardOfferCommentGetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgMoodboardOfferCommentGetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardOfferCommentGetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgMoodboardOfferCommentGetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferCommentGetPost200ResponseResult
 */
export interface OrgMoodboardOfferCommentGetPost200ResponseResult {
    /**
     * 
     * @type {Array<MoodboardCommentListInner>}
     * @memberof OrgMoodboardOfferCommentGetPost200ResponseResult
     */
    'moodboardCommentList'?: Array<MoodboardCommentListInner>;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferCommentGetPostRequest
 */
export interface OrgMoodboardOfferCommentGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferCommentGetPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferCommentGetPostRequest
     */
    'moodboardId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferCommentGetPostRequest
     */
    'offerId': number;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferNodeClonePostRequest
 */
export interface OrgMoodboardOfferNodeClonePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeClonePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgMoodboardOfferNodeClonePostRequest
     */
    'nodeIdList': Array<number>;
    /**
     * 
     * @type {Array<ShareGetReceivedClonePostRequestTargetLocationListInner>}
     * @memberof OrgMoodboardOfferNodeClonePostRequest
     */
    'targetLocationList': Array<ShareGetReceivedClonePostRequestTargetLocationListInner>;
    /**
     * 
     * @type {ShareGetReceivedClonePostRequestOptional}
     * @memberof OrgMoodboardOfferNodeClonePostRequest
     */
    'optional': ShareGetReceivedClonePostRequestOptional;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferNodeCollectionCreatePostRequest
 */
export interface OrgMoodboardOfferNodeCollectionCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeCollectionCreatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeCollectionCreatePostRequest
     */
    'nodeId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardOfferNodeCollectionCreatePostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardOfferNodeCollectionCreatePostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {OrgMoodboardCreatePostRequestTrendBoard}
     * @memberof OrgMoodboardOfferNodeCollectionCreatePostRequest
     */
    'trendBoard'?: OrgMoodboardCreatePostRequestTrendBoard;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferNodeCollectionGetPostRequest
 */
export interface OrgMoodboardOfferNodeCollectionGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeCollectionGetPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeCollectionGetPostRequest
     */
    'moodboardId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeCollectionGetPostRequest
     */
    'nodeId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardOfferNodeCollectionGetPostRequest
     */
    'keyword': string;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferNodeCollectionUpdatePostRequest
 */
export interface OrgMoodboardOfferNodeCollectionUpdatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeCollectionUpdatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeCollectionUpdatePostRequest
     */
    'nodeId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardOfferNodeCollectionUpdatePostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardOfferNodeCollectionUpdatePostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {OrgMoodboardCreatePostRequestTrendBoard}
     * @memberof OrgMoodboardOfferNodeCollectionUpdatePostRequest
     */
    'newTrendBoard'?: OrgMoodboardCreatePostRequestTrendBoard;
    /**
     * 
     * @type {boolean}
     * @memberof OrgMoodboardOfferNodeCollectionUpdatePostRequest
     */
    'isDeleteTrendBoard'?: boolean;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferNodeDeletePostRequest
 */
export interface OrgMoodboardOfferNodeDeletePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeDeletePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgMoodboardOfferNodeDeletePostRequest
     */
    'nodeIdList': Array<number>;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferNodeMaterialCreatePostRequest
 */
export interface OrgMoodboardOfferNodeMaterialCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeMaterialCreatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeMaterialCreatePostRequest
     */
    'nodeId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgMoodboardOfferNodeMaterialCreatePostRequest
     */
    'materialIdList': Array<number>;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferNodeMaterialGetPost200Response
 */
export interface OrgMoodboardOfferNodeMaterialGetPost200Response {
    /**
     * 
     * @type {OrgMoodboardOfferNodeMaterialGetPost200ResponseResult}
     * @memberof OrgMoodboardOfferNodeMaterialGetPost200Response
     */
    'result'?: OrgMoodboardOfferNodeMaterialGetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgMoodboardOfferNodeMaterialGetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardOfferNodeMaterialGetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgMoodboardOfferNodeMaterialGetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferNodeMaterialGetPost200ResponseResult
 */
export interface OrgMoodboardOfferNodeMaterialGetPost200ResponseResult {
    /**
     * 
     * @type {OrgMoodboardOfferNodeMaterialGetPost200ResponseResultMoodboardOfferNodeMaterial}
     * @memberof OrgMoodboardOfferNodeMaterialGetPost200ResponseResult
     */
    'moodboardOfferNodeMaterial'?: OrgMoodboardOfferNodeMaterialGetPost200ResponseResultMoodboardOfferNodeMaterial;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferNodeMaterialGetPost200ResponseResultMoodboardOfferNodeMaterial
 */
export interface OrgMoodboardOfferNodeMaterialGetPost200ResponseResultMoodboardOfferNodeMaterial {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeMaterialGetPost200ResponseResultMoodboardOfferNodeMaterial
     */
    'nodeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeMaterialGetPost200ResponseResultMoodboardOfferNodeMaterial
     */
    'nodeType'?: OrgMoodboardOfferNodeMaterialGetPost200ResponseResultMoodboardOfferNodeMaterialNodeTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof OrgMoodboardOfferNodeMaterialGetPost200ResponseResultMoodboardOfferNodeMaterial
     */
    'isPicked'?: boolean;
    /**
     * 
     * @type {Material}
     * @memberof OrgMoodboardOfferNodeMaterialGetPost200ResponseResultMoodboardOfferNodeMaterial
     */
    'material'?: Material;
}

export const OrgMoodboardOfferNodeMaterialGetPost200ResponseResultMoodboardOfferNodeMaterialNodeTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgMoodboardOfferNodeMaterialGetPost200ResponseResultMoodboardOfferNodeMaterialNodeTypeEnum = typeof OrgMoodboardOfferNodeMaterialGetPost200ResponseResultMoodboardOfferNodeMaterialNodeTypeEnum[keyof typeof OrgMoodboardOfferNodeMaterialGetPost200ResponseResultMoodboardOfferNodeMaterialNodeTypeEnum];

/**
 * 
 * @export
 * @interface OrgMoodboardOfferNodeMaterialGetPostRequest
 */
export interface OrgMoodboardOfferNodeMaterialGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeMaterialGetPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodeMaterialGetPostRequest
     */
    'nodeId': number;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferNodePickPostRequest
 */
export interface OrgMoodboardOfferNodePickPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodePickPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferNodePickPostRequest
     */
    'nodeId': number | null;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferPickedExportPostRequest
 */
export interface OrgMoodboardOfferPickedExportPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferPickedExportPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferPickedExportPostRequest
     */
    'moodboardId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgMoodboardOfferPickedExportPostRequest
     */
    'nodeIdList': Array<number>;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferPickedGetPost200Response
 */
export interface OrgMoodboardOfferPickedGetPost200Response {
    /**
     * 
     * @type {OrgMoodboardOfferPickedGetPost200ResponseResult}
     * @memberof OrgMoodboardOfferPickedGetPost200Response
     */
    'result'?: OrgMoodboardOfferPickedGetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgMoodboardOfferPickedGetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardOfferPickedGetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgMoodboardOfferPickedGetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferPickedGetPost200ResponseResult
 */
export interface OrgMoodboardOfferPickedGetPost200ResponseResult {
    /**
     * 
     * @type {MoodboardOfferNodeCollection}
     * @memberof OrgMoodboardOfferPickedGetPost200ResponseResult
     */
    'MoodboardOfferNodeCollection'?: MoodboardOfferNodeCollection;
}
/**
 * 
 * @export
 * @interface OrgMoodboardOfferPickedGetPostRequest
 */
export interface OrgMoodboardOfferPickedGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferPickedGetPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardOfferPickedGetPostRequest
     */
    'moodboardId': number;
    /**
     * 不傳時為撈All Items
     * @type {number}
     * @memberof OrgMoodboardOfferPickedGetPostRequest
     */
    'offerId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardOfferPickedGetPostRequest
     */
    'keyword'?: string;
}
/**
 * 
 * @export
 * @interface OrgMoodboardShareGetTargetPost200Response
 */
export interface OrgMoodboardShareGetTargetPost200Response {
    /**
     * 
     * @type {OrgMoodboardShareGetTargetPost200ResponseResult}
     * @memberof OrgMoodboardShareGetTargetPost200Response
     */
    'result'?: OrgMoodboardShareGetTargetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgMoodboardShareGetTargetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardShareGetTargetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgMoodboardShareGetTargetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgMoodboardShareGetTargetPost200ResponseResult
 */
export interface OrgMoodboardShareGetTargetPost200ResponseResult {
    /**
     * 
     * @type {OrgMoodboardShareGetTargetPost200ResponseResultTarget}
     * @memberof OrgMoodboardShareGetTargetPost200ResponseResult
     */
    'target'?: OrgMoodboardShareGetTargetPost200ResponseResultTarget;
}
/**
 * 
 * @export
 * @interface OrgMoodboardShareGetTargetPost200ResponseResultTarget
 */
export interface OrgMoodboardShareGetTargetPost200ResponseResultTarget {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardShareGetTargetPost200ResponseResultTarget
     */
    'type'?: OrgMoodboardShareGetTargetPost200ResponseResultTargetTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardShareGetTargetPost200ResponseResultTarget
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardShareGetTargetPost200ResponseResultTarget
     */
    'logo'?: string;
    /**
     * OrgId GroupId Email
     * @type {string}
     * @memberof OrgMoodboardShareGetTargetPost200ResponseResultTarget
     */
    'number'?: string;
}

export const OrgMoodboardShareGetTargetPost200ResponseResultTargetTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgMoodboardShareGetTargetPost200ResponseResultTargetTypeEnum = typeof OrgMoodboardShareGetTargetPost200ResponseResultTargetTypeEnum[keyof typeof OrgMoodboardShareGetTargetPost200ResponseResultTargetTypeEnum];

/**
 * 
 * @export
 * @interface OrgMoodboardShareGetTargetPostRequest
 */
export interface OrgMoodboardShareGetTargetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardShareGetTargetPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardShareGetTargetPostRequest
     */
    'moodboardId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardShareGetTargetPostRequest
     */
    'target': string;
}
/**
 * 
 * @export
 * @interface OrgMoodboardSharePostRequest
 */
export interface OrgMoodboardSharePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardSharePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardSharePostRequest
     */
    'moodboardId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardSharePostRequest
     */
    'message'?: string;
    /**
     * 
     * @type {Array<PublicShareAssignedPostRequestTargetListInner>}
     * @memberof OrgMoodboardSharePostRequest
     */
    'targetList': Array<PublicShareAssignedPostRequestTargetListInner>;
}
/**
 * 
 * @export
 * @interface OrgMoodboardShareRemovePostRequest
 */
export interface OrgMoodboardShareRemovePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardShareRemovePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardShareRemovePostRequest
     */
    'shareId': number;
}
/**
 * 
 * @export
 * @interface OrgMoodboardUpdatePostRequest
 */
export interface OrgMoodboardUpdatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardUpdatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgMoodboardUpdatePostRequest
     */
    'moodboardId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardUpdatePostRequest
     */
    'moodboardName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgMoodboardUpdatePostRequest
     */
    'description': string;
    /**
     * 
     * @type {OrgMoodboardCreatePostRequestTrendBoard}
     * @memberof OrgMoodboardUpdatePostRequest
     */
    'newTrendBoard'?: OrgMoodboardCreatePostRequestTrendBoard;
    /**
     * 
     * @type {Array<OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner>}
     * @memberof OrgMoodboardUpdatePostRequest
     */
    'newAttachmentList'?: Array<OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner>;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgMoodboardUpdatePostRequest
     */
    'deleteAttachmentIdList'?: Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof OrgMoodboardUpdatePostRequest
     */
    'isDeleteTrendBoard'?: boolean;
}
/**
 * 
 * @export
 * @interface OrgPaymentBillingInfoUpdatePostRequest
 */
export interface OrgPaymentBillingInfoUpdatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentBillingInfoUpdatePostRequest
     */
    'orgId': number;
    /**
     * 接收者名稱
     * @type {string}
     * @memberof OrgPaymentBillingInfoUpdatePostRequest
     */
    'recipient': string;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentBillingInfoUpdatePostRequest
     */
    'email': string;
    /**
     * 國家代碼
     * @type {string}
     * @memberof OrgPaymentBillingInfoUpdatePostRequest
     */
    'countryCode': string;
    /**
     * 接收者區號
     * @type {string}
     * @memberof OrgPaymentBillingInfoUpdatePostRequest
     */
    'zipCode'?: string;
    /**
     * 接收者城市
     * @type {string}
     * @memberof OrgPaymentBillingInfoUpdatePostRequest
     */
    'city'?: string;
    /**
     * 接收者地址
     * @type {string}
     * @memberof OrgPaymentBillingInfoUpdatePostRequest
     */
    'address'?: string;
}
/**
 * 
 * @export
 * @interface OrgPaymentCardInfoCreateSetupPost200Response
 */
export interface OrgPaymentCardInfoCreateSetupPost200Response {
    /**
     * 
     * @type {OrgPaymentCardInfoCreateSetupPost200ResponseResult}
     * @memberof OrgPaymentCardInfoCreateSetupPost200Response
     */
    'result'?: OrgPaymentCardInfoCreateSetupPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgPaymentCardInfoCreateSetupPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentCardInfoCreateSetupPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgPaymentCardInfoCreateSetupPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgPaymentCardInfoCreateSetupPost200ResponseResult
 */
export interface OrgPaymentCardInfoCreateSetupPost200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentCardInfoCreateSetupPost200ResponseResult
     */
    'clientSecret'?: string;
}
/**
 * 
 * @export
 * @interface OrgPaymentCardInfoSetupCustomerPostRequest
 */
export interface OrgPaymentCardInfoSetupCustomerPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentCardInfoSetupCustomerPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentCardInfoSetupCustomerPostRequest
     */
    'clientSecret': string;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentCardInfoSetupCustomerPostRequest
     */
    'cardHolderName': string;
}
/**
 * 
 * @export
 * @interface OrgPaymentGetPricingPost200Response
 */
export interface OrgPaymentGetPricingPost200Response {
    /**
     * 
     * @type {OrgPaymentGetPricingPost200ResponseResult}
     * @memberof OrgPaymentGetPricingPost200Response
     */
    'result'?: OrgPaymentGetPricingPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgPaymentGetPricingPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentGetPricingPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgPaymentGetPricingPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgPaymentGetPricingPost200ResponseResult
 */
export interface OrgPaymentGetPricingPost200ResponseResult {
    /**
     * 
     * @type {Pricing}
     * @memberof OrgPaymentGetPricingPost200ResponseResult
     */
    'pricing'?: Pricing;
}
/**
 * 
 * @export
 * @interface OrgPaymentGetUnbilledInfoPost200Response
 */
export interface OrgPaymentGetUnbilledInfoPost200Response {
    /**
     * 
     * @type {OrgPaymentGetUnbilledInfoPost200ResponseResult}
     * @memberof OrgPaymentGetUnbilledInfoPost200Response
     */
    'result'?: OrgPaymentGetUnbilledInfoPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgPaymentGetUnbilledInfoPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentGetUnbilledInfoPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgPaymentGetUnbilledInfoPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgPaymentGetUnbilledInfoPost200ResponseResult
 */
export interface OrgPaymentGetUnbilledInfoPost200ResponseResult {
    /**
     * 
     * @type {Array<OrgPaymentGetUnbilledInfoPost200ResponseResultCheckoutItemListInner>}
     * @memberof OrgPaymentGetUnbilledInfoPost200ResponseResult
     */
    'checkoutItemList'?: Array<OrgPaymentGetUnbilledInfoPost200ResponseResultCheckoutItemListInner>;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentGetUnbilledInfoPost200ResponseResult
     */
    'totalPrice'?: string;
}
/**
 * 
 * @export
 * @interface OrgPaymentGetUnbilledInfoPost200ResponseResultCheckoutItemListInner
 */
export interface OrgPaymentGetUnbilledInfoPost200ResponseResultCheckoutItemListInner {
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentGetUnbilledInfoPost200ResponseResultCheckoutItemListInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentGetUnbilledInfoPost200ResponseResultCheckoutItemListInner
     */
    'price'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentGetUnbilledInfoPost200ResponseResultCheckoutItemListInner
     */
    'periodDate'?: string;
}
/**
 * 
 * @export
 * @interface OrgPaymentInvoiceGetListPost200Response
 */
export interface OrgPaymentInvoiceGetListPost200Response {
    /**
     * 
     * @type {OrgPaymentInvoiceGetListPost200ResponseResult}
     * @memberof OrgPaymentInvoiceGetListPost200Response
     */
    'result'?: OrgPaymentInvoiceGetListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgPaymentInvoiceGetListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentInvoiceGetListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgPaymentInvoiceGetListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgPaymentInvoiceGetListPost200ResponseResult
 */
export interface OrgPaymentInvoiceGetListPost200ResponseResult {
    /**
     * 
     * @type {Array<OrgPaymentInvoiceGetListPost200ResponseResultInvoiceListInner>}
     * @memberof OrgPaymentInvoiceGetListPost200ResponseResult
     */
    'invoiceList'?: Array<OrgPaymentInvoiceGetListPost200ResponseResultInvoiceListInner>;
    /**
     * 
     * @type {OrgPaymentInvoiceGetListPost200ResponseResultPagination}
     * @memberof OrgPaymentInvoiceGetListPost200ResponseResult
     */
    'pagination'?: OrgPaymentInvoiceGetListPost200ResponseResultPagination;
}
/**
 * 
 * @export
 * @interface OrgPaymentInvoiceGetListPost200ResponseResultInvoiceListInner
 */
export interface OrgPaymentInvoiceGetListPost200ResponseResultInvoiceListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetListPost200ResponseResultInvoiceListInner
     */
    'invoiceId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentInvoiceGetListPost200ResponseResultInvoiceListInner
     */
    'invoiceNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentInvoiceGetListPost200ResponseResultInvoiceListInner
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetListPost200ResponseResultInvoiceListInner
     */
    'category'?: OrgPaymentInvoiceGetListPost200ResponseResultInvoiceListInnerCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentInvoiceGetListPost200ResponseResultInvoiceListInner
     */
    'title'?: string;
}

export const OrgPaymentInvoiceGetListPost200ResponseResultInvoiceListInnerCategoryEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgPaymentInvoiceGetListPost200ResponseResultInvoiceListInnerCategoryEnum = typeof OrgPaymentInvoiceGetListPost200ResponseResultInvoiceListInnerCategoryEnum[keyof typeof OrgPaymentInvoiceGetListPost200ResponseResultInvoiceListInnerCategoryEnum];

/**
 * 
 * @export
 * @interface OrgPaymentInvoiceGetListPost200ResponseResultPagination
 */
export interface OrgPaymentInvoiceGetListPost200ResponseResultPagination {
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetListPost200ResponseResultPagination
     */
    'perPageCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetListPost200ResponseResultPagination
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetListPost200ResponseResultPagination
     */
    'totalPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetListPost200ResponseResultPagination
     */
    'totalCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetListPost200ResponseResultPagination
     */
    'sort'?: OrgPaymentInvoiceGetListPost200ResponseResultPaginationSortEnum;
}

export const OrgPaymentInvoiceGetListPost200ResponseResultPaginationSortEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgPaymentInvoiceGetListPost200ResponseResultPaginationSortEnum = typeof OrgPaymentInvoiceGetListPost200ResponseResultPaginationSortEnum[keyof typeof OrgPaymentInvoiceGetListPost200ResponseResultPaginationSortEnum];

/**
 * 
 * @export
 * @interface OrgPaymentInvoiceGetListPostRequest
 */
export interface OrgPaymentInvoiceGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetListPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentInvoiceGetListPostRequest
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentInvoiceGetListPostRequest
     */
    'endDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetListPostRequest
     */
    'category': OrgPaymentInvoiceGetListPostRequestCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentInvoiceGetListPostRequest
     */
    'keyword'?: string;
    /**
     * 
     * @type {OrgPaymentInvoiceGetListPostRequestPagination}
     * @memberof OrgPaymentInvoiceGetListPostRequest
     */
    'pagination': OrgPaymentInvoiceGetListPostRequestPagination;
}

export const OrgPaymentInvoiceGetListPostRequestCategoryEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgPaymentInvoiceGetListPostRequestCategoryEnum = typeof OrgPaymentInvoiceGetListPostRequestCategoryEnum[keyof typeof OrgPaymentInvoiceGetListPostRequestCategoryEnum];

/**
 * 
 * @export
 * @interface OrgPaymentInvoiceGetListPostRequestPagination
 */
export interface OrgPaymentInvoiceGetListPostRequestPagination {
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetListPostRequestPagination
     */
    'perPageCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetListPostRequestPagination
     */
    'targetPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetListPostRequestPagination
     */
    'sort'?: OrgPaymentInvoiceGetListPostRequestPaginationSortEnum;
}

export const OrgPaymentInvoiceGetListPostRequestPaginationSortEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgPaymentInvoiceGetListPostRequestPaginationSortEnum = typeof OrgPaymentInvoiceGetListPostRequestPaginationSortEnum[keyof typeof OrgPaymentInvoiceGetListPostRequestPaginationSortEnum];

/**
 * 
 * @export
 * @interface OrgPaymentInvoiceGetPost200Response
 */
export interface OrgPaymentInvoiceGetPost200Response {
    /**
     * 
     * @type {OrgPaymentInvoiceGetPost200ResponseResult}
     * @memberof OrgPaymentInvoiceGetPost200Response
     */
    'result'?: OrgPaymentInvoiceGetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgPaymentInvoiceGetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentInvoiceGetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgPaymentInvoiceGetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgPaymentInvoiceGetPost200ResponseResult
 */
export interface OrgPaymentInvoiceGetPost200ResponseResult {
    /**
     * 
     * @type {OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo}
     * @memberof OrgPaymentInvoiceGetPost200ResponseResult
     */
    'invoiceInfo'?: OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo;
}
/**
 * 
 * @export
 * @interface OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo
 */
export interface OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo {
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo
     */
    'invoiceId'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo
     */
    'invoiceNumber'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo
     */
    'invoiceDate'?: number;
    /**
     * 接收者名稱
     * @type {string}
     * @memberof OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo
     */
    'recipient'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo
     */
    'email'?: string;
    /**
     * 國家代碼
     * @type {string}
     * @memberof OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo
     */
    'countryCode'?: string;
    /**
     * 接收者區號
     * @type {string}
     * @memberof OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo
     */
    'zipCode'?: string;
    /**
     * 接收者城市
     * @type {string}
     * @memberof OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo
     */
    'city'?: string;
    /**
     * 接收者地址
     * @type {string}
     * @memberof OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo
     */
    'address'?: string;
    /**
     * 
     * @type {Array<InvoiceInfoServiceItemListInner>}
     * @memberof OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo
     */
    'serviceItemList'?: Array<InvoiceInfoServiceItemListInner>;
    /**
     * 
     * @type {OrganizationPaymentDetailCardInfo}
     * @memberof OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo
     */
    'cardInfo'?: OrganizationPaymentDetailCardInfo;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo
     */
    'currency'?: string;
    /**
     * 總費用
     * @type {string}
     * @memberof OrgPaymentInvoiceGetPost200ResponseResultInvoiceInfo
     */
    'totalPrice'?: string;
}
/**
 * 
 * @export
 * @interface OrgPaymentInvoiceGetPostRequest
 */
export interface OrgPaymentInvoiceGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceGetPostRequest
     */
    'invoiceId': number;
}
/**
 * 
 * @export
 * @interface OrgPaymentInvoiceUpdateBillingInfoPostRequest
 */
export interface OrgPaymentInvoiceUpdateBillingInfoPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceUpdateBillingInfoPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgPaymentInvoiceUpdateBillingInfoPostRequest
     */
    'invoiceId': number;
    /**
     * 接收者名稱
     * @type {string}
     * @memberof OrgPaymentInvoiceUpdateBillingInfoPostRequest
     */
    'recipient': string;
    /**
     * 
     * @type {string}
     * @memberof OrgPaymentInvoiceUpdateBillingInfoPostRequest
     */
    'email': string;
    /**
     * 國家代碼
     * @type {string}
     * @memberof OrgPaymentInvoiceUpdateBillingInfoPostRequest
     */
    'countryCode': string;
    /**
     * 接收者區號
     * @type {string}
     * @memberof OrgPaymentInvoiceUpdateBillingInfoPostRequest
     */
    'zipCode'?: string;
    /**
     * 接收者城市
     * @type {string}
     * @memberof OrgPaymentInvoiceUpdateBillingInfoPostRequest
     */
    'city'?: string;
    /**
     * 接收者地址
     * @type {string}
     * @memberof OrgPaymentInvoiceUpdateBillingInfoPostRequest
     */
    'address'?: string;
}
/**
 * 
 * @export
 * @interface OrgPlanPurchaseMaterialGetEstimateChargingPost200Response
 */
export interface OrgPlanPurchaseMaterialGetEstimateChargingPost200Response {
    /**
     * 
     * @type {OrgPlanPurchaseMaterialGetEstimateChargingPost200ResponseResult}
     * @memberof OrgPlanPurchaseMaterialGetEstimateChargingPost200Response
     */
    'result'?: OrgPlanPurchaseMaterialGetEstimateChargingPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgPlanPurchaseMaterialGetEstimateChargingPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgPlanPurchaseMaterialGetEstimateChargingPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgPlanPurchaseMaterialGetEstimateChargingPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgPlanPurchaseMaterialGetEstimateChargingPost200ResponseResult
 */
export interface OrgPlanPurchaseMaterialGetEstimateChargingPost200ResponseResult {
    /**
     * 
     * @type {number}
     * @memberof OrgPlanPurchaseMaterialGetEstimateChargingPost200ResponseResult
     */
    'estimateCharging'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgPlanPurchaseMaterialGetEstimateChargingPost200ResponseResult
     */
    'periodDate'?: string;
}
/**
 * 
 * @export
 * @interface OrgPlanPurchaseU3mPost200Response
 */
export interface OrgPlanPurchaseU3mPost200Response {
    /**
     * 
     * @type {OrgPlanPurchaseU3mPost200ResponseResult}
     * @memberof OrgPlanPurchaseU3mPost200Response
     */
    'result'?: OrgPlanPurchaseU3mPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgPlanPurchaseU3mPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgPlanPurchaseU3mPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgPlanPurchaseU3mPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgPlanPurchaseU3mPost200ResponseResult
 */
export interface OrgPlanPurchaseU3mPost200ResponseResult {
    /**
     * 
     * @type {Organization}
     * @memberof OrgPlanPurchaseU3mPost200ResponseResult
     */
    'organization'?: Organization;
    /**
     * 
     * @type {number}
     * @memberof OrgPlanPurchaseU3mPost200ResponseResult
     */
    'billingId'?: number;
}
/**
 * 
 * @export
 * @interface OrgPlanPurchaseU3mPostRequest
 */
export interface OrgPlanPurchaseU3mPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgPlanPurchaseU3mPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgPlanPurchaseU3mPostRequest
     */
    'setQty': number;
}
/**
 * 
 * @export
 * @interface OrgPlanUpgradeGetEstimateChargingPost200Response
 */
export interface OrgPlanUpgradeGetEstimateChargingPost200Response {
    /**
     * 
     * @type {OrgPlanUpgradeGetEstimateChargingPost200ResponseResult}
     * @memberof OrgPlanUpgradeGetEstimateChargingPost200Response
     */
    'result'?: OrgPlanUpgradeGetEstimateChargingPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgPlanUpgradeGetEstimateChargingPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgPlanUpgradeGetEstimateChargingPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgPlanUpgradeGetEstimateChargingPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgPlanUpgradeGetEstimateChargingPost200ResponseResult
 */
export interface OrgPlanUpgradeGetEstimateChargingPost200ResponseResult {
    /**
     * 
     * @type {number}
     * @memberof OrgPlanUpgradeGetEstimateChargingPost200ResponseResult
     */
    'estimateCharging'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgPlanUpgradeGetEstimateChargingPost200ResponseResult
     */
    'periodDate'?: string;
}
/**
 * 
 * @export
 * @interface OrgPlanUpgradeRequestPostRequest
 */
export interface OrgPlanUpgradeRequestPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgPlanUpgradeRequestPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgPlanUpgradeRequestPostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OrgPlanUpgradeRequestPostRequest
     */
    'email': string;
    /**
     * 電話
     * @type {string}
     * @memberof OrgPlanUpgradeRequestPostRequest
     */
    'phone'?: string;
    /**
     * 電話撥號代碼
     * @type {string}
     * @memberof OrgPlanUpgradeRequestPostRequest
     */
    'phoneCountryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgPlanUpgradeRequestPostRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface OrgRemoveLogoPost200Response
 */
export interface OrgRemoveLogoPost200Response {
    /**
     * 
     * @type {OrgRemoveLogoPost200ResponseResult}
     * @memberof OrgRemoveLogoPost200Response
     */
    'result'?: OrgRemoveLogoPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgRemoveLogoPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgRemoveLogoPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgRemoveLogoPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgRemoveLogoPost200ResponseResult
 */
export interface OrgRemoveLogoPost200ResponseResult {
    /**
     * 
     * @type {OrgRemoveLogoPost200ResponseResultOrganization}
     * @memberof OrgRemoveLogoPost200ResponseResult
     */
    'organization'?: OrgRemoveLogoPost200ResponseResultOrganization;
}
/**
 * 
 * @export
 * @interface OrgRemoveLogoPost200ResponseResultOrganization
 */
export interface OrgRemoveLogoPost200ResponseResultOrganization {
    /**
     * 
     * @type {string}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'logo'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'originalLogo'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'orgId': number;
    /**
     * 組織代碼
     * @type {string}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'orgNo': string;
    /**
     * 組織名稱
     * @type {string}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'orgName': string;
    /**
     * 組織類型
     * @type {number}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'orgCategoryId': OrgRemoveLogoPost200ResponseResultOrganizationOrgCategoryIdEnum;
    /**
     * 國家代碼
     * @type {string}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'countryCode': string;
    /**
     * 標籤顏色
     * @type {string}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'labelColor': string;
    /**
     * 組織地址
     * @type {string}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'address': string | null;
    /**
     * 電話
     * @type {string}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'phone': string | null;
    /**
     * 電話撥號代碼
     * @type {string}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'phoneCountryCode': string | null;
    /**
     * 傳真
     * @type {string}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'fax': string | null;
    /**
     * 傳真撥號代碼
     * @type {string}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'faxCountryCode': string | null;
    /**
     * 
     * @type {string}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'inviteCode': string;
    /**
     * 
     * @type {string}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'uploadMaterialEmail': string | null;
    /**
     * 布片上傳附件檔案大小限制(單位為BYTE)，資料型態為long(int64)
     * @type {number}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'materialAttachmentUploadSizeLimit': number;
    /**
     * 
     * @type {number}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {Array<OrgUser>}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'memberList': Array<OrgUser>;
    /**
     * 
     * @type {Array<OrganizationHistoryListInner>}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'historyList': Array<OrganizationHistoryListInner>;
    /**
     * 
     * @type {Array<OrganizationGroupListInner>}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'groupList': Array<OrganizationGroupListInner>;
    /**
     * 
     * @type {Plan}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'plan': Plan;
    /**
     * 
     * @type {OrganizationPaymentDetail}
     * @memberof OrgRemoveLogoPost200ResponseResultOrganization
     */
    'paymentDetail': OrganizationPaymentDetail;
}

export const OrgRemoveLogoPost200ResponseResultOrganizationOrgCategoryIdEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgRemoveLogoPost200ResponseResultOrganizationOrgCategoryIdEnum = typeof OrgRemoveLogoPost200ResponseResultOrganizationOrgCategoryIdEnum[keyof typeof OrgRemoveLogoPost200ResponseResultOrganizationOrgCategoryIdEnum];

/**
 * 
 * @export
 * @interface OrgRemoveLogoPostRequest
 */
export interface OrgRemoveLogoPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgRemoveLogoPostRequest
     */
    'orgId': number;
}
/**
 * 
 * @export
 * @interface OrgShareToMeCloneCheckPostRequest
 */
export interface OrgShareToMeCloneCheckPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgShareToMeCloneCheckPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>}
     * @memberof OrgShareToMeCloneCheckPostRequest
     */
    'workspaceNodeList': Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>;
}
/**
 * 
 * @export
 * @interface OrgShareToMeClonePostRequest
 */
export interface OrgShareToMeClonePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgShareToMeClonePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgShareToMeClonePostRequest
     */
    'sharingId': number;
    /**
     * 
     * @type {Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>}
     * @memberof OrgShareToMeClonePostRequest
     */
    'workspaceNodeList': Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>;
    /**
     * 
     * @type {Array<ShareGetReceivedClonePostRequestTargetLocationListInner>}
     * @memberof OrgShareToMeClonePostRequest
     */
    'targetLocationList': Array<ShareGetReceivedClonePostRequestTargetLocationListInner>;
    /**
     * 
     * @type {ShareGetReceivedClonePostRequestOptional}
     * @memberof OrgShareToMeClonePostRequest
     */
    'optional': ShareGetReceivedClonePostRequestOptional;
}
/**
 * 
 * @export
 * @interface OrgShareToMeGetListPost200Response
 */
export interface OrgShareToMeGetListPost200Response {
    /**
     * 
     * @type {OrgShareToMeGetListPost200ResponseResult}
     * @memberof OrgShareToMeGetListPost200Response
     */
    'result'?: OrgShareToMeGetListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgShareToMeGetListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgShareToMeGetListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgShareToMeGetListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgShareToMeGetListPost200ResponseResult
 */
export interface OrgShareToMeGetListPost200ResponseResult {
    /**
     * 
     * @type {PaginationRes}
     * @memberof OrgShareToMeGetListPost200ResponseResult
     */
    'pagination'?: PaginationRes;
    /**
     * 
     * @type {ShareCollection}
     * @memberof OrgShareToMeGetListPost200ResponseResult
     */
    'shareCollection'?: ShareCollection;
}
/**
 * 
 * @export
 * @interface OrgShareToMeGetListPostRequest
 */
export interface OrgShareToMeGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgShareToMeGetListPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgShareToMeGetListPostRequest
     */
    'sharingId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrgShareToMeGetListPostRequest
     */
    'workspaceNodeId'?: number;
    /**
     * 
     * @type {Search}
     * @memberof OrgShareToMeGetListPostRequest
     */
    'search'?: Search;
    /**
     * 
     * @type {ShareFilter}
     * @memberof OrgShareToMeGetListPostRequest
     */
    'filter'?: ShareFilter;
    /**
     * 
     * @type {PaginationReq}
     * @memberof OrgShareToMeGetListPostRequest
     */
    'pagination': PaginationReq;
}
/**
 * 
 * @export
 * @interface OrgShareToMeGetMaterialPostRequest
 */
export interface OrgShareToMeGetMaterialPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgShareToMeGetMaterialPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgShareToMeGetMaterialPostRequest
     */
    'sharingId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgShareToMeGetMaterialPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgShareToMeGetMaterialPostRequest
     */
    'keyword'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgShareToMeGetMaterialPostRequest
     */
    'rank'?: number;
}
/**
 * 
 * @export
 * @interface OrgUpdateLogoGetUploadUrlPost200Response
 */
export interface OrgUpdateLogoGetUploadUrlPost200Response {
    /**
     * 
     * @type {OrgUpdateLogoGetUploadUrlPost200ResponseResult}
     * @memberof OrgUpdateLogoGetUploadUrlPost200Response
     */
    'result'?: OrgUpdateLogoGetUploadUrlPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgUpdateLogoGetUploadUrlPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgUpdateLogoGetUploadUrlPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgUpdateLogoGetUploadUrlPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgUpdateLogoGetUploadUrlPost200ResponseResult
 */
export interface OrgUpdateLogoGetUploadUrlPost200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof OrgUpdateLogoGetUploadUrlPost200ResponseResult
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgUpdateLogoGetUploadUrlPost200ResponseResult
     */
    'logoUploadUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgUpdateLogoGetUploadUrlPost200ResponseResult
     */
    'originalLogoUploadUrl'?: string;
}
/**
 * 
 * @export
 * @interface OrgUpdateLogoGetUploadUrlPostRequest
 */
export interface OrgUpdateLogoGetUploadUrlPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgUpdateLogoGetUploadUrlPostRequest
     */
    'logoFileName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgUpdateLogoGetUploadUrlPostRequest
     */
    'originalLogoFileName': string;
}
/**
 * 
 * @export
 * @interface OrgUpdateLogoPostRequest
 */
export interface OrgUpdateLogoPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgUpdateLogoPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgUpdateLogoPostRequest
     */
    'tempUploadId': string;
    /**
     * 
     * @type {string}
     * @memberof OrgUpdateLogoPostRequest
     */
    'logoFileName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgUpdateLogoPostRequest
     */
    'originalLogoFileName': string;
}
/**
 * 
 * @export
 * @interface OrgUpdatePostRequest
 */
export interface OrgUpdatePostRequest {
    /**
     * 組織 ID
     * @type {number}
     * @memberof OrgUpdatePostRequest
     */
    'orgId': number;
    /**
     * 組織名稱
     * @type {string}
     * @memberof OrgUpdatePostRequest
     */
    'orgName': string;
    /**
     * 組織類型
     * @type {number}
     * @memberof OrgUpdatePostRequest
     */
    'orgCategoryId': OrgUpdatePostRequestOrgCategoryIdEnum;
    /**
     * 國家代碼
     * @type {string}
     * @memberof OrgUpdatePostRequest
     */
    'countryCode': string;
    /**
     * 標籤顏色
     * @type {string}
     * @memberof OrgUpdatePostRequest
     */
    'labelColor': string;
    /**
     * 組織地址
     * @type {string}
     * @memberof OrgUpdatePostRequest
     */
    'address'?: string;
    /**
     * 電話
     * @type {string}
     * @memberof OrgUpdatePostRequest
     */
    'phone'?: string;
    /**
     * 電話撥號代碼
     * @type {string}
     * @memberof OrgUpdatePostRequest
     */
    'phoneCountryCode'?: string;
    /**
     * 傳真
     * @type {string}
     * @memberof OrgUpdatePostRequest
     */
    'fax'?: string;
    /**
     * 傳真撥號代碼
     * @type {string}
     * @memberof OrgUpdatePostRequest
     */
    'faxCountryCode'?: string;
}

export const OrgUpdatePostRequestOrgCategoryIdEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgUpdatePostRequestOrgCategoryIdEnum = typeof OrgUpdatePostRequestOrgCategoryIdEnum[keyof typeof OrgUpdatePostRequestOrgCategoryIdEnum];

/**
 * isPending 為 true 的 user 除了 email、avatar、originalAvatar、isPending 以外的欄位皆為 null isPending 為 false 的 user 只有 lastSignInTime 有可能為 null 
 * @export
 * @interface OrgUser
 */
export interface OrgUser {
    /**
     * 
     * @type {number}
     * @memberof OrgUser
     */
    'orgUserId': number | null;
    /**
     * 
     * @type {number}
     * @memberof OrgUser
     */
    'userId': number | null;
    /**
     * 
     * @type {number}
     * @memberof OrgUser
     */
    'orgRoleId': number | null;
    /**
     * 
     * @type {string}
     * @memberof OrgUser
     */
    'displayName': string | null;
    /**
     * 
     * @type {string}
     * @memberof OrgUser
     */
    'avatar': string;
    /**
     * 
     * @type {string}
     * @memberof OrgUser
     */
    'originalAvatar': string;
    /**
     * 
     * @type {string}
     * @memberof OrgUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof OrgUser
     */
    'lastSignInTime': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OrgUser
     */
    'isPending': boolean;
    /**
     * 
     * @type {Array<NotificationListInner>}
     * @memberof OrgUser
     */
    'notificationList': Array<NotificationListInner>;
}
/**
 * 
 * @export
 * @interface OrgUserRemoveAvatarPost200Response
 */
export interface OrgUserRemoveAvatarPost200Response {
    /**
     * 
     * @type {OrgUserRemoveAvatarPost200ResponseResult}
     * @memberof OrgUserRemoveAvatarPost200Response
     */
    'result'?: OrgUserRemoveAvatarPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgUserRemoveAvatarPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgUserRemoveAvatarPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgUserRemoveAvatarPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgUserRemoveAvatarPost200ResponseResult
 */
export interface OrgUserRemoveAvatarPost200ResponseResult {
    /**
     * 
     * @type {OrgUserRemoveAvatarPost200ResponseResultOrgUser}
     * @memberof OrgUserRemoveAvatarPost200ResponseResult
     */
    'orgUser'?: OrgUserRemoveAvatarPost200ResponseResultOrgUser;
}
/**
 * 
 * @export
 * @interface OrgUserRemoveAvatarPost200ResponseResultOrgUser
 */
export interface OrgUserRemoveAvatarPost200ResponseResultOrgUser {
    /**
     * 
     * @type {string}
     * @memberof OrgUserRemoveAvatarPost200ResponseResultOrgUser
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgUserRemoveAvatarPost200ResponseResultOrgUser
     */
    'originalAvatar'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgUserRemoveAvatarPost200ResponseResultOrgUser
     */
    'orgUserId': number | null;
    /**
     * 
     * @type {number}
     * @memberof OrgUserRemoveAvatarPost200ResponseResultOrgUser
     */
    'userId': number | null;
    /**
     * 
     * @type {number}
     * @memberof OrgUserRemoveAvatarPost200ResponseResultOrgUser
     */
    'orgRoleId': number | null;
    /**
     * 
     * @type {string}
     * @memberof OrgUserRemoveAvatarPost200ResponseResultOrgUser
     */
    'displayName': string | null;
    /**
     * 
     * @type {string}
     * @memberof OrgUserRemoveAvatarPost200ResponseResultOrgUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof OrgUserRemoveAvatarPost200ResponseResultOrgUser
     */
    'lastSignInTime': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OrgUserRemoveAvatarPost200ResponseResultOrgUser
     */
    'isPending': boolean;
    /**
     * 
     * @type {Array<NotificationListInner>}
     * @memberof OrgUserRemoveAvatarPost200ResponseResultOrgUser
     */
    'notificationList': Array<NotificationListInner>;
}
/**
 * 
 * @export
 * @interface OrgUserUpdateAvatarGetUploadUrlPost200Response
 */
export interface OrgUserUpdateAvatarGetUploadUrlPost200Response {
    /**
     * 
     * @type {OrgUserUpdateAvatarGetUploadUrlPost200ResponseResult}
     * @memberof OrgUserUpdateAvatarGetUploadUrlPost200Response
     */
    'result'?: OrgUserUpdateAvatarGetUploadUrlPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgUserUpdateAvatarGetUploadUrlPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgUserUpdateAvatarGetUploadUrlPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgUserUpdateAvatarGetUploadUrlPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgUserUpdateAvatarGetUploadUrlPost200ResponseResult
 */
export interface OrgUserUpdateAvatarGetUploadUrlPost200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof OrgUserUpdateAvatarGetUploadUrlPost200ResponseResult
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgUserUpdateAvatarGetUploadUrlPost200ResponseResult
     */
    'avatarUploadUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgUserUpdateAvatarGetUploadUrlPost200ResponseResult
     */
    'originalAvatarUploadUrl'?: string;
}
/**
 * 
 * @export
 * @interface OrgUserUpdateAvatarGetUploadUrlPostRequest
 */
export interface OrgUserUpdateAvatarGetUploadUrlPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgUserUpdateAvatarGetUploadUrlPostRequest
     */
    'avatarFileName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgUserUpdateAvatarGetUploadUrlPostRequest
     */
    'originalAvatarFileName': string;
}
/**
 * 
 * @export
 * @interface OrgUserUpdateAvatarPostRequest
 */
export interface OrgUserUpdateAvatarPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgUserUpdateAvatarPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgUserUpdateAvatarPostRequest
     */
    'tempUploadId': string;
    /**
     * 
     * @type {string}
     * @memberof OrgUserUpdateAvatarPostRequest
     */
    'avatarFileName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgUserUpdateAvatarPostRequest
     */
    'originalAvatarFileName': string;
}
/**
 * 
 * @export
 * @interface OrgUserUpdateDisplayNamePostRequest
 */
export interface OrgUserUpdateDisplayNamePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgUserUpdateDisplayNamePostRequest
     */
    'orgId': number;
    /**
     * 顯示名稱
     * @type {string}
     * @memberof OrgUserUpdateDisplayNamePostRequest
     */
    'displayName': string;
}
/**
 * 
 * @export
 * @interface OrgValueAddedServiceMade2flowScheduleMeetingPost200Response
 */
export interface OrgValueAddedServiceMade2flowScheduleMeetingPost200Response {
    /**
     * 
     * @type {OrgValueAddedServiceMade2flowScheduleMeetingPost200ResponseResult}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPost200Response
     */
    'result'?: OrgValueAddedServiceMade2flowScheduleMeetingPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgValueAddedServiceMade2flowScheduleMeetingPost200ResponseResult
 */
export interface OrgValueAddedServiceMade2flowScheduleMeetingPost200ResponseResult {
    /**
     * 
     * @type {OrgUser}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPost200ResponseResult
     */
    'orgUser'?: OrgUser;
}
/**
 * 
 * @export
 * @interface OrgValueAddedServiceMade2flowScheduleMeetingPostRequest
 */
export interface OrgValueAddedServiceMade2flowScheduleMeetingPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPostRequest
     */
    'orgId': number;
    /**
     * 組織名稱
     * @type {string}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPostRequest
     */
    'orgName': string;
    /**
     * 組織類型
     * @type {number}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPostRequest
     */
    'orgCategoryId': OrgValueAddedServiceMade2flowScheduleMeetingPostRequestOrgCategoryIdEnum;
    /**
     * 使用者名稱
     * @type {string}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPostRequest
     */
    'name': string;
    /**
     * 職稱
     * @type {string}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPostRequest
     */
    'jobTitle'?: string;
    /**
     * 電話撥號代碼
     * @type {string}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPostRequest
     */
    'phoneCountryCode': string;
    /**
     * 電話
     * @type {string}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPostRequest
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPostRequest
     */
    'message'?: string;
    /**
     * 
     * @type {Array<OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner>}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPostRequest
     */
    'attachmentList'?: Array<OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner>;
}

export const OrgValueAddedServiceMade2flowScheduleMeetingPostRequestOrgCategoryIdEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgValueAddedServiceMade2flowScheduleMeetingPostRequestOrgCategoryIdEnum = typeof OrgValueAddedServiceMade2flowScheduleMeetingPostRequestOrgCategoryIdEnum[keyof typeof OrgValueAddedServiceMade2flowScheduleMeetingPostRequestOrgCategoryIdEnum];

/**
 * 
 * @export
 * @interface OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner
 */
export interface OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner {
    /**
     * 
     * @type {string}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgValueAddedServiceMade2flowScheduleMeetingPostRequestAttachmentListInner
     */
    'fileName'?: string;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceCollectionCreateGetUploadUrlPost200Response
 */
export interface OrgWorkspaceCollectionCreateGetUploadUrlPost200Response {
    /**
     * 
     * @type {OrgWorkspaceCollectionCreateGetUploadUrlPost200ResponseResult}
     * @memberof OrgWorkspaceCollectionCreateGetUploadUrlPost200Response
     */
    'result'?: OrgWorkspaceCollectionCreateGetUploadUrlPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceCollectionCreateGetUploadUrlPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceCollectionCreateGetUploadUrlPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgWorkspaceCollectionCreateGetUploadUrlPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceCollectionCreateGetUploadUrlPost200ResponseResult
 */
export interface OrgWorkspaceCollectionCreateGetUploadUrlPost200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceCollectionCreateGetUploadUrlPost200ResponseResult
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceCollectionCreateGetUploadUrlPost200ResponseResult
     */
    'trendBoardUploadUrl'?: string;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceCollectionCreateGetUploadUrlPostRequest
 */
export interface OrgWorkspaceCollectionCreateGetUploadUrlPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceCollectionCreateGetUploadUrlPostRequest
     */
    'trendBoardFileName': string;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceCollectionCreatePostRequest
 */
export interface OrgWorkspaceCollectionCreatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceCollectionCreatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceCollectionCreatePostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceCollectionCreatePostRequest
     */
    'collectionName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceCollectionCreatePostRequest
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceCollectionCreatePostRequest
     */
    'trendBoardFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceCollectionCreatePostRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceCollectionRemoveTrendBoardPostRequest
 */
export interface OrgWorkspaceCollectionRemoveTrendBoardPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceCollectionRemoveTrendBoardPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceCollectionRemoveTrendBoardPostRequest
     */
    'collectionId': number;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceCollectionUpdatePostRequest
 */
export interface OrgWorkspaceCollectionUpdatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceCollectionUpdatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceCollectionUpdatePostRequest
     */
    'collectionId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceCollectionUpdatePostRequest
     */
    'collectionName': string;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceCollectionUpdatePostRequest
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceCollectionUpdatePostRequest
     */
    'trendBoardFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceCollectionUpdatePostRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceGetForModalPostRequest
 */
export interface OrgWorkspaceGetForModalPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceGetForModalPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceGetForModalPostRequest
     */
    'workspaceNodeId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceGetForModalPostRequest
     */
    'workspaceNodeLocation'?: OrgWorkspaceGetForModalPostRequestWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {Search}
     * @memberof OrgWorkspaceGetForModalPostRequest
     */
    'search'?: Search;
    /**
     * 
     * @type {PaginationReq}
     * @memberof OrgWorkspaceGetForModalPostRequest
     */
    'pagination': PaginationReq;
}

export const OrgWorkspaceGetForModalPostRequestWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgWorkspaceGetForModalPostRequestWorkspaceNodeLocationEnum = typeof OrgWorkspaceGetForModalPostRequestWorkspaceNodeLocationEnum[keyof typeof OrgWorkspaceGetForModalPostRequestWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface OrgWorkspaceGetMaterialPost200Response
 */
export interface OrgWorkspaceGetMaterialPost200Response {
    /**
     * 
     * @type {OrgWorkspaceGetMaterialPost200ResponseResult}
     * @memberof OrgWorkspaceGetMaterialPost200Response
     */
    'result'?: OrgWorkspaceGetMaterialPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceGetMaterialPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceGetMaterialPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgWorkspaceGetMaterialPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceGetMaterialPost200ResponseResult
 */
export interface OrgWorkspaceGetMaterialPost200ResponseResult {
    /**
     * 
     * @type {Array<BreadcrumbListInner>}
     * @memberof OrgWorkspaceGetMaterialPost200ResponseResult
     */
    'breadcrumbList'?: Array<BreadcrumbListInner>;
    /**
     * 
     * @type {Material}
     * @memberof OrgWorkspaceGetMaterialPost200ResponseResult
     */
    'material'?: Material;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceGetMaterialPostRequest
 */
export interface OrgWorkspaceGetMaterialPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceGetMaterialPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceGetMaterialPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceGetMaterialPostRequest
     */
    'keyword'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceGetMaterialPostRequest
     */
    'rank'?: number;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceGetPost200Response
 */
export interface OrgWorkspaceGetPost200Response {
    /**
     * 
     * @type {OrgWorkspaceGetPost200ResponseResult}
     * @memberof OrgWorkspaceGetPost200Response
     */
    'result'?: OrgWorkspaceGetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceGetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceGetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgWorkspaceGetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceGetPost200ResponseResult
 */
export interface OrgWorkspaceGetPost200ResponseResult {
    /**
     * 
     * @type {PaginationRes}
     * @memberof OrgWorkspaceGetPost200ResponseResult
     */
    'pagination'?: PaginationRes;
    /**
     * 
     * @type {WorkspaceCollection}
     * @memberof OrgWorkspaceGetPost200ResponseResult
     */
    'workspaceCollection'?: WorkspaceCollection;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceGetPostRequest
 */
export interface OrgWorkspaceGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceGetPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceGetPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {Search}
     * @memberof OrgWorkspaceGetPostRequest
     */
    'search'?: Search;
    /**
     * 
     * @type {WorkspaceFilter}
     * @memberof OrgWorkspaceGetPostRequest
     */
    'filter'?: WorkspaceFilter;
    /**
     * 
     * @type {PaginationReq}
     * @memberof OrgWorkspaceGetPostRequest
     */
    'pagination': PaginationReq;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeDeletePostRequest
 */
export interface OrgWorkspaceNodeDeletePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeDeletePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof OrgWorkspaceNodeDeletePostRequest
     */
    'workspaceNodeIdList': Array<number>;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeDuplicatePostRequest
 */
export interface OrgWorkspaceNodeDuplicatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeDuplicatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeDuplicatePostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {Array<ShareGetReceivedClonePostRequestTargetLocationListInner>}
     * @memberof OrgWorkspaceNodeDuplicatePostRequest
     */
    'targetWorkspaceNodeList': Array<ShareGetReceivedClonePostRequestTargetLocationListInner>;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeMovePostRequest
 */
export interface OrgWorkspaceNodeMovePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeMovePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeMovePostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeMovePostRequest
     */
    'targetWorkspaceNodeId': number;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodePublishPostRequest
 */
export interface OrgWorkspaceNodePublishPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodePublishPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodePublishPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodePublishPostRequest
     */
    'isPublic': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodePublishPostRequest
     */
    'isCanClone': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodePublishPostRequest
     */
    'isCanDownloadU3M': boolean;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareAssignedGetTargetPostRequest
 */
export interface OrgWorkspaceNodeShareAssignedGetTargetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareAssignedGetTargetPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareAssignedGetTargetPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceNodeShareAssignedGetTargetPostRequest
     */
    'target': string;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareAssignedPost200Response
 */
export interface OrgWorkspaceNodeShareAssignedPost200Response {
    /**
     * 
     * @type {OrgWorkspaceNodeShareAssignedPost200ResponseResult}
     * @memberof OrgWorkspaceNodeShareAssignedPost200Response
     */
    'result'?: OrgWorkspaceNodeShareAssignedPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodeShareAssignedPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceNodeShareAssignedPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgWorkspaceNodeShareAssignedPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareAssignedPost200ResponseResult
 */
export interface OrgWorkspaceNodeShareAssignedPost200ResponseResult {
    /**
     * 
     * @type {Array<OrgWorkspaceNodeShareGetPost200ResponseResultShareListInner>}
     * @memberof OrgWorkspaceNodeShareAssignedPost200ResponseResult
     */
    'shareList'?: Array<OrgWorkspaceNodeShareGetPost200ResponseResultShareListInner>;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareAssignedPostRequest
 */
export interface OrgWorkspaceNodeShareAssignedPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareAssignedPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareAssignedPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {Array<PublicShareAssignedPostRequestTargetListInner>}
     * @memberof OrgWorkspaceNodeShareAssignedPostRequest
     */
    'targetList': Array<PublicShareAssignedPostRequestTargetListInner>;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodeShareAssignedPostRequest
     */
    'isCanClone': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodeShareAssignedPostRequest
     */
    'isCanDownloadU3M': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceNodeShareAssignedPostRequest
     */
    'messages'?: string;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareAssignedRemovePostRequest
 */
export interface OrgWorkspaceNodeShareAssignedRemovePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareAssignedRemovePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareAssignedRemovePostRequest
     */
    'type'?: OrgWorkspaceNodeShareAssignedRemovePostRequestTypeEnum;
    /**
     * (SharingId Or OrgShareToMeId  Or GroupShareToMeId)
     * @type {number}
     * @memberof OrgWorkspaceNodeShareAssignedRemovePostRequest
     */
    'id': number;
}

export const OrgWorkspaceNodeShareAssignedRemovePostRequestTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgWorkspaceNodeShareAssignedRemovePostRequestTypeEnum = typeof OrgWorkspaceNodeShareAssignedRemovePostRequestTypeEnum[keyof typeof OrgWorkspaceNodeShareAssignedRemovePostRequestTypeEnum];

/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareAssignedUpdatePostRequest
 */
export interface OrgWorkspaceNodeShareAssignedUpdatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareAssignedUpdatePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<OrgWorkspaceNodeShareAssignedUpdatePostRequestRemoveListInner>}
     * @memberof OrgWorkspaceNodeShareAssignedUpdatePostRequest
     */
    'removeList'?: Array<OrgWorkspaceNodeShareAssignedUpdatePostRequestRemoveListInner>;
    /**
     * 
     * @type {Array<OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInner>}
     * @memberof OrgWorkspaceNodeShareAssignedUpdatePostRequest
     */
    'updateList'?: Array<OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInner>;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareAssignedUpdatePostRequestRemoveListInner
 */
export interface OrgWorkspaceNodeShareAssignedUpdatePostRequestRemoveListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareAssignedUpdatePostRequestRemoveListInner
     */
    'type'?: OrgWorkspaceNodeShareAssignedUpdatePostRequestRemoveListInnerTypeEnum;
    /**
     * (SharingId Or OrgShareToMeId  Or GroupShareToMeId)
     * @type {number}
     * @memberof OrgWorkspaceNodeShareAssignedUpdatePostRequestRemoveListInner
     */
    'id'?: number;
}

export const OrgWorkspaceNodeShareAssignedUpdatePostRequestRemoveListInnerTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgWorkspaceNodeShareAssignedUpdatePostRequestRemoveListInnerTypeEnum = typeof OrgWorkspaceNodeShareAssignedUpdatePostRequestRemoveListInnerTypeEnum[keyof typeof OrgWorkspaceNodeShareAssignedUpdatePostRequestRemoveListInnerTypeEnum];

/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInner
 */
export interface OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInner
     */
    'type'?: OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInnerTypeEnum;
    /**
     * (SharingId Or OrgShareToMeId  Or GroupShareToMeId)
     * @type {number}
     * @memberof OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInner
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInner
     */
    'isCanClone'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInner
     */
    'isCanDownloadU3M'?: boolean;
}

export const OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInnerTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInnerTypeEnum = typeof OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInnerTypeEnum[keyof typeof OrgWorkspaceNodeShareAssignedUpdatePostRequestUpdateListInnerTypeEnum];

/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest
 */
export interface OrgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest
     */
    'isCanShared': boolean;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareEmbedUpdateSettingPostRequest
 */
export interface OrgWorkspaceNodeShareEmbedUpdateSettingPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareEmbedUpdateSettingPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceNodeShareEmbedUpdateSettingPostRequest
     */
    'embedKey': string;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodeShareEmbedUpdateSettingPostRequest
     */
    'isCanDownloadU3M': boolean;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareGetPost200Response
 */
export interface OrgWorkspaceNodeShareGetPost200Response {
    /**
     * 
     * @type {OrgWorkspaceNodeShareGetPost200ResponseResult}
     * @memberof OrgWorkspaceNodeShareGetPost200Response
     */
    'result'?: OrgWorkspaceNodeShareGetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodeShareGetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceNodeShareGetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrgWorkspaceNodeShareGetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareGetPost200ResponseResult
 */
export interface OrgWorkspaceNodeShareGetPost200ResponseResult {
    /**
     * 
     * @type {Array<OrgWorkspaceNodeShareGetPost200ResponseResultShareListInner>}
     * @memberof OrgWorkspaceNodeShareGetPost200ResponseResult
     */
    'shareList'?: Array<OrgWorkspaceNodeShareGetPost200ResponseResultShareListInner>;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodeShareGetPost200ResponseResult
     */
    'isCanShared'?: boolean;
    /**
     * 
     * @type {OrgWorkspaceNodeShareGetPost200ResponseResultEmbed}
     * @memberof OrgWorkspaceNodeShareGetPost200ResponseResult
     */
    'embed'?: OrgWorkspaceNodeShareGetPost200ResponseResultEmbed;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareGetPost200ResponseResultEmbed
 */
export interface OrgWorkspaceNodeShareGetPost200ResponseResultEmbed {
    /**
     * 即為 sharingKey
     * @type {string}
     * @memberof OrgWorkspaceNodeShareGetPost200ResponseResultEmbed
     */
    'key'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodeShareGetPost200ResponseResultEmbed
     */
    'isCanDownloadU3M'?: boolean;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareGetPost200ResponseResultShareListInner
 */
export interface OrgWorkspaceNodeShareGetPost200ResponseResultShareListInner {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareGetPost200ResponseResultShareListInner
     */
    'type'?: OrgWorkspaceNodeShareGetPost200ResponseResultShareListInnerTypeEnum;
    /**
     * (SharingId Or OrgShareToMeId  Or GroupShareToMeId)
     * @type {number}
     * @memberof OrgWorkspaceNodeShareGetPost200ResponseResultShareListInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceNodeShareGetPost200ResponseResultShareListInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgWorkspaceNodeShareGetPost200ResponseResultShareListInner
     */
    'logo'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodeShareGetPost200ResponseResultShareListInner
     */
    'isCanClone'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrgWorkspaceNodeShareGetPost200ResponseResultShareListInner
     */
    'isCanDownloadU3M'?: boolean;
}

export const OrgWorkspaceNodeShareGetPost200ResponseResultShareListInnerTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgWorkspaceNodeShareGetPost200ResponseResultShareListInnerTypeEnum = typeof OrgWorkspaceNodeShareGetPost200ResponseResultShareListInnerTypeEnum[keyof typeof OrgWorkspaceNodeShareGetPost200ResponseResultShareListInnerTypeEnum];

/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareGetPostRequest
 */
export interface OrgWorkspaceNodeShareGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareGetPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareGetPostRequest
     */
    'workspaceNodeId': number;
}
/**
 * 
 * @export
 * @interface OrgWorkspaceNodeShareSocialGeneratePostRequest
 */
export interface OrgWorkspaceNodeShareSocialGeneratePostRequest {
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareSocialGeneratePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareSocialGeneratePostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {number}
     * @memberof OrgWorkspaceNodeShareSocialGeneratePostRequest
     */
    'type': OrgWorkspaceNodeShareSocialGeneratePostRequestTypeEnum;
}

export const OrgWorkspaceNodeShareSocialGeneratePostRequestTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrgWorkspaceNodeShareSocialGeneratePostRequestTypeEnum = typeof OrgWorkspaceNodeShareSocialGeneratePostRequestTypeEnum[keyof typeof OrgWorkspaceNodeShareSocialGeneratePostRequestTypeEnum];

/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'orgId': number;
    /**
     * 組織代碼
     * @type {string}
     * @memberof Organization
     */
    'orgNo': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'logo': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'originalLogo': string;
    /**
     * 組織名稱
     * @type {string}
     * @memberof Organization
     */
    'orgName': string;
    /**
     * 組織類型
     * @type {number}
     * @memberof Organization
     */
    'orgCategoryId': OrganizationOrgCategoryIdEnum;
    /**
     * 國家代碼
     * @type {string}
     * @memberof Organization
     */
    'countryCode': string;
    /**
     * 標籤顏色
     * @type {string}
     * @memberof Organization
     */
    'labelColor': string;
    /**
     * 組織地址
     * @type {string}
     * @memberof Organization
     */
    'address': string | null;
    /**
     * 電話
     * @type {string}
     * @memberof Organization
     */
    'phone': string | null;
    /**
     * 電話撥號代碼
     * @type {string}
     * @memberof Organization
     */
    'phoneCountryCode': string | null;
    /**
     * 傳真
     * @type {string}
     * @memberof Organization
     */
    'fax': string | null;
    /**
     * 傳真撥號代碼
     * @type {string}
     * @memberof Organization
     */
    'faxCountryCode': string | null;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'inviteCode': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'uploadMaterialEmail': string | null;
    /**
     * 布片上傳附件檔案大小限制(單位為BYTE)，資料型態為long(int64)
     * @type {number}
     * @memberof Organization
     */
    'materialAttachmentUploadSizeLimit': number;
    /**
     * 
     * @type {number}
     * @memberof Organization
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {Array<OrgUser>}
     * @memberof Organization
     */
    'memberList': Array<OrgUser>;
    /**
     * 
     * @type {Array<OrganizationHistoryListInner>}
     * @memberof Organization
     */
    'historyList': Array<OrganizationHistoryListInner>;
    /**
     * 
     * @type {Array<OrganizationGroupListInner>}
     * @memberof Organization
     */
    'groupList': Array<OrganizationGroupListInner>;
    /**
     * 
     * @type {Plan}
     * @memberof Organization
     */
    'plan': Plan;
    /**
     * 
     * @type {OrganizationPaymentDetail}
     * @memberof Organization
     */
    'paymentDetail': OrganizationPaymentDetail;
}

export const OrganizationOrgCategoryIdEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type OrganizationOrgCategoryIdEnum = typeof OrganizationOrgCategoryIdEnum[keyof typeof OrganizationOrgCategoryIdEnum];

/**
 * 
 * @export
 * @interface OrganizationGroupListInner
 */
export interface OrganizationGroupListInner {
    /**
     * 
     * @type {number}
     * @memberof OrganizationGroupListInner
     */
    'groupId': number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationGroupListInner
     */
    'groupName': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationGroupListInner
     */
    'labelColor': string;
    /**
     * 
     * @type {number}
     * @memberof OrganizationGroupListInner
     */
    'workspaceNodeId': number;
}
/**
 * 
 * @export
 * @interface OrganizationHistoryListInner
 */
export interface OrganizationHistoryListInner {
    /**
     * 
     * @type {number}
     * @memberof OrganizationHistoryListInner
     */
    'createDate'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationHistoryListInner
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface OrganizationPaymentDetail
 */
export interface OrganizationPaymentDetail {
    /**
     * 
     * @type {OrganizationPaymentDetailCardInfo}
     * @memberof OrganizationPaymentDetail
     */
    'cardInfo'?: OrganizationPaymentDetailCardInfo;
    /**
     * 
     * @type {OrganizationPaymentDetailBillingInfo}
     * @memberof OrganizationPaymentDetail
     */
    'billingInfo'?: OrganizationPaymentDetailBillingInfo;
}
/**
 * 
 * @export
 * @interface OrganizationPaymentDetailBillingInfo
 */
export interface OrganizationPaymentDetailBillingInfo {
    /**
     * 接收者名稱
     * @type {string}
     * @memberof OrganizationPaymentDetailBillingInfo
     */
    'recipient'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPaymentDetailBillingInfo
     */
    'email'?: string;
    /**
     * 國家代碼
     * @type {string}
     * @memberof OrganizationPaymentDetailBillingInfo
     */
    'countryCode'?: string;
    /**
     * 接收者區號
     * @type {string}
     * @memberof OrganizationPaymentDetailBillingInfo
     */
    'zipCode'?: string;
    /**
     * 接收者城市
     * @type {string}
     * @memberof OrganizationPaymentDetailBillingInfo
     */
    'city'?: string;
    /**
     * 接收者地址
     * @type {string}
     * @memberof OrganizationPaymentDetailBillingInfo
     */
    'address'?: string;
}
/**
 * 
 * @export
 * @interface OrganizationPaymentDetailCardInfo
 */
export interface OrganizationPaymentDetailCardInfo {
    /**
     * 
     * @type {string}
     * @memberof OrganizationPaymentDetailCardInfo
     */
    'lastFour'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPaymentDetailCardInfo
     */
    'expiredDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationPaymentDetailCardInfo
     */
    'cardHolderName'?: string;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * 
     * @type {boolean}
     * @memberof Pagination
     */
    'isShowMatch'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'sort'?: PaginationSortEnum;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'perPageCount'?: number;
}

export const PaginationSortEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PaginationSortEnum = typeof PaginationSortEnum[keyof typeof PaginationSortEnum];

/**
 * 
 * @export
 * @interface PaginationReq
 */
export interface PaginationReq {
    /**
     * 
     * @type {number}
     * @memberof PaginationReq
     */
    'targetPage'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PaginationReq
     */
    'isShowMatch'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PaginationReq
     */
    'sort'?: PaginationReqSortEnum;
    /**
     * 
     * @type {number}
     * @memberof PaginationReq
     */
    'perPageCount'?: number;
}

export const PaginationReqSortEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PaginationReqSortEnum = typeof PaginationReqSortEnum[keyof typeof PaginationReqSortEnum];

/**
 * 
 * @export
 * @interface PaginationRes
 */
export interface PaginationRes {
    /**
     * 
     * @type {number}
     * @memberof PaginationRes
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginationRes
     */
    'totalPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginationRes
     */
    'totalCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PaginationRes
     */
    'isShowMatch'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PaginationRes
     */
    'sort'?: PaginationResSortEnum;
    /**
     * 
     * @type {number}
     * @memberof PaginationRes
     */
    'perPageCount'?: number;
}

export const PaginationResSortEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PaginationResSortEnum = typeof PaginationResSortEnum[keyof typeof PaginationResSortEnum];

/**
 * 記錄透視變形裁切圖片的參數
 * @export
 * @interface PerspectiveCropImageRecord
 */
export interface PerspectiveCropImageRecord {
    /**
     * 
     * @type {PerspectiveCropImageRecordLeftTop}
     * @memberof PerspectiveCropImageRecord
     */
    'leftTop'?: PerspectiveCropImageRecordLeftTop;
    /**
     * 
     * @type {PerspectiveCropImageRecordLeftTop}
     * @memberof PerspectiveCropImageRecord
     */
    'leftBottom'?: PerspectiveCropImageRecordLeftTop;
    /**
     * 
     * @type {PerspectiveCropImageRecordLeftTop}
     * @memberof PerspectiveCropImageRecord
     */
    'rightTop'?: PerspectiveCropImageRecordLeftTop;
    /**
     * 
     * @type {PerspectiveCropImageRecordLeftTop}
     * @memberof PerspectiveCropImageRecord
     */
    'rightBottom'?: PerspectiveCropImageRecordLeftTop;
    /**
     * 
     * @type {number}
     * @memberof PerspectiveCropImageRecord
     */
    'rotateDeg'?: number;
}
/**
 * 
 * @export
 * @interface PerspectiveCropImageRecordLeftTop
 */
export interface PerspectiveCropImageRecordLeftTop {
    /**
     * 
     * @type {number}
     * @memberof PerspectiveCropImageRecordLeftTop
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof PerspectiveCropImageRecordLeftTop
     */
    'y'?: number;
}
/**
 * 
 * @export
 * @interface Plan
 */
export interface Plan {
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'planType'?: PlanPlanTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Plan
     */
    'status'?: PlanStatusEnum;
    /**
     * 停用日
     * @type {string}
     * @memberof Plan
     */
    'deactivatedDate'?: string;
    /**
     * buffer預計停用日
     * @type {string}
     * @memberof Plan
     */
    'bufferDeactivatedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Plan
     */
    'renewDate'?: string;
    /**
     * 
     * @type {PlanQuota}
     * @memberof Plan
     */
    'quota'?: PlanQuota;
    /**
     * 
     * @type {boolean}
     * @memberof Plan
     */
    'hideCarbonEmissionUI'?: boolean;
}

export const PlanPlanTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PlanPlanTypeEnum = typeof PlanPlanTypeEnum[keyof typeof PlanPlanTypeEnum];
export const PlanStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PlanStatusEnum = typeof PlanStatusEnum[keyof typeof PlanStatusEnum];

/**
 * 
 * @export
 * @interface PlanQuota
 */
export interface PlanQuota {
    /**
     * 
     * @type {PlanQuotaMaterial}
     * @memberof PlanQuota
     */
    'material'?: PlanQuotaMaterial;
    /**
     * 
     * @type {PlanQuotaMaterial}
     * @memberof PlanQuota
     */
    'u3m'?: PlanQuotaMaterial;
    /**
     * 
     * @type {PlanQuotaMember}
     * @memberof PlanQuota
     */
    'member'?: PlanQuotaMember;
}
/**
 * 
 * @export
 * @interface PlanQuotaMaterial
 */
export interface PlanQuotaMaterial {
    /**
     * 
     * @type {number}
     * @memberof PlanQuotaMaterial
     */
    'max'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlanQuotaMaterial
     */
    'used'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PlanQuotaMaterial
     */
    'isUnlimited'?: boolean;
}
/**
 * 
 * @export
 * @interface PlanQuotaMember
 */
export interface PlanQuotaMember {
    /**
     * 
     * @type {number}
     * @memberof PlanQuotaMember
     */
    'max'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlanQuotaMember
     */
    'used'?: number;
}
/**
 * 
 * @export
 * @interface PollingDigitalThreadStickerTagListGetPost200Response
 */
export interface PollingDigitalThreadStickerTagListGetPost200Response {
    /**
     * 
     * @type {PollingDigitalThreadStickerTagListGetPost200ResponseResult}
     * @memberof PollingDigitalThreadStickerTagListGetPost200Response
     */
    'result'?: PollingDigitalThreadStickerTagListGetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof PollingDigitalThreadStickerTagListGetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof PollingDigitalThreadStickerTagListGetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof PollingDigitalThreadStickerTagListGetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface PollingDigitalThreadStickerTagListGetPost200ResponseResult
 */
export interface PollingDigitalThreadStickerTagListGetPost200ResponseResult {
    /**
     * 
     * @type {Array<string>}
     * @memberof PollingDigitalThreadStickerTagListGetPost200ResponseResult
     */
    'tagList'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PollingDigitalThreadStickerTagListGetPostRequest
 */
export interface PollingDigitalThreadStickerTagListGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof PollingDigitalThreadStickerTagListGetPostRequest
     */
    'ogId': number;
    /**
     * 
     * @type {number}
     * @memberof PollingDigitalThreadStickerTagListGetPostRequest
     */
    'ogType': PollingDigitalThreadStickerTagListGetPostRequestOgTypeEnum;
}

export const PollingDigitalThreadStickerTagListGetPostRequestOgTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PollingDigitalThreadStickerTagListGetPostRequestOgTypeEnum = typeof PollingDigitalThreadStickerTagListGetPostRequestOgTypeEnum[keyof typeof PollingDigitalThreadStickerTagListGetPostRequestOgTypeEnum];

/**
 * 
 * @export
 * @interface PollingSidebarPost200Response
 */
export interface PollingSidebarPost200Response {
    /**
     * 
     * @type {PollingSidebarPost200ResponseResult}
     * @memberof PollingSidebarPost200Response
     */
    'result'?: PollingSidebarPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof PollingSidebarPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof PollingSidebarPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof PollingSidebarPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface PollingSidebarPost200ResponseResult
 */
export interface PollingSidebarPost200ResponseResult {
    /**
     * 
     * @type {PollingSidebarPost200ResponseResultPolling}
     * @memberof PollingSidebarPost200ResponseResult
     */
    'polling'?: PollingSidebarPost200ResponseResultPolling;
}
/**
 * 
 * @export
 * @interface PollingSidebarPost200ResponseResultPolling
 */
export interface PollingSidebarPost200ResponseResultPolling {
    /**
     * 
     * @type {boolean}
     * @memberof PollingSidebarPost200ResponseResultPolling
     */
    'isProcessing'?: boolean;
    /**
     * 
     * @type {Array<NotificationListInner>}
     * @memberof PollingSidebarPost200ResponseResultPolling
     */
    'notificationList'?: Array<NotificationListInner>;
    /**
     * 
     * @type {Plan}
     * @memberof PollingSidebarPost200ResponseResultPolling
     */
    'plan'?: Plan;
    /**
     * 
     * @type {ValueAddedService}
     * @memberof PollingSidebarPost200ResponseResultPolling
     */
    'valueAddedService'?: ValueAddedService;
}
/**
 * 
 * @export
 * @interface PollingSidebarPostRequest
 */
export interface PollingSidebarPostRequest {
    /**
     * 
     * @type {number}
     * @memberof PollingSidebarPostRequest
     */
    'orgId': number;
}
/**
 * 
 * @export
 * @interface Pricing
 */
export interface Pricing {
    /**
     * 
     * @type {PricingBasic}
     * @memberof Pricing
     */
    'basic'?: PricingBasic;
    /**
     * 
     * @type {PricingPro}
     * @memberof Pricing
     */
    'pro'?: PricingPro;
}
/**
 * 
 * @export
 * @interface PricingBasic
 */
export interface PricingBasic {
    /**
     * 
     * @type {number}
     * @memberof PricingBasic
     */
    'planPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingBasic
     */
    'materialUnit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingBasic
     */
    'materialPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingBasic
     */
    'materialUpgradeAlert'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingBasic
     */
    'materialFreeQuota'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingBasic
     */
    'u3mUnit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingBasic
     */
    'u3mPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingBasic
     */
    'u3mFreeQty'?: number;
}
/**
 * 
 * @export
 * @interface PricingPro
 */
export interface PricingPro {
    /**
     * 
     * @type {number}
     * @memberof PricingPro
     */
    'planPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingPro
     */
    'memberPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingPro
     */
    'materialUnit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingPro
     */
    'materialPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingPro
     */
    'materialFreeQuota'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingPro
     */
    'u3mUnit'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingPro
     */
    'u3mPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof PricingPro
     */
    'u3mMonthFreeQty'?: number;
}
/**
 * 
 * @export
 * @interface PublicCloneCheckPostRequest
 */
export interface PublicCloneCheckPostRequest {
    /**
     * 
     * @type {number}
     * @memberof PublicCloneCheckPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>}
     * @memberof PublicCloneCheckPostRequest
     */
    'workspaceNodeList': Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>;
}
/**
 * 
 * @export
 * @interface PublicClonePostRequest
 */
export interface PublicClonePostRequest {
    /**
     * 
     * @type {number}
     * @memberof PublicClonePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>}
     * @memberof PublicClonePostRequest
     */
    'workspaceNodeList': Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>;
    /**
     * 
     * @type {Array<ShareGetReceivedClonePostRequestTargetLocationListInner>}
     * @memberof PublicClonePostRequest
     */
    'targetLocationList': Array<ShareGetReceivedClonePostRequestTargetLocationListInner>;
    /**
     * 
     * @type {ShareGetReceivedClonePostRequestOptional}
     * @memberof PublicClonePostRequest
     */
    'optional'?: ShareGetReceivedClonePostRequestOptional;
}
/**
 * 
 * @export
 * @interface PublicCollection
 */
export interface PublicCollection {
    /**
     * 
     * @type {Publish}
     * @memberof PublicCollection
     */
    'publish'?: Publish;
    /**
     * 
     * @type {Array<object>}
     * @memberof PublicCollection
     */
    'childMaterialList'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof PublicCollection
     */
    'childCollectionList'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof PublicCollection
     */
    'workspaceNodeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PublicCollection
     */
    'workspaceNodeLocation'?: PublicCollectionWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {number}
     * @memberof PublicCollection
     */
    'collectionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof PublicCollection
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicCollection
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicCollection
     */
    'trendBoardCoverImg'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicCollection
     */
    'trendBoardDisplayFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicCollection
     */
    'trendBoardUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicCollection
     */
    'isPublic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicCollection
     */
    'isCanShared'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicCollection
     */
    'isCanClone'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicCollection
     */
    'isCanDownloadU3M'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PublicCollection
     */
    'publicDate'?: number;
    /**
     * 
     * @type {number}
     * @memberof PublicCollection
     */
    'createDate'?: number;
    /**
     * 
     * @type {Array<BreadcrumbListInner>}
     * @memberof PublicCollection
     */
    'breadcrumbList'?: Array<BreadcrumbListInner>;
}

export const PublicCollectionWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PublicCollectionWorkspaceNodeLocationEnum = typeof PublicCollectionWorkspaceNodeLocationEnum[keyof typeof PublicCollectionWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface PublicFilter
 */
export interface PublicFilter {
    /**
     * 
     * @type {object}
     * @memberof PublicFilter
     */
    'price'?: object;
    /**
     * 
     * @type {boolean}
     * @memberof PublicFilter
     */
    'hasU3M'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicFilter
     */
    'category'?: string;
    /**
     * 
     * @type {Array<FilterContentListInner>}
     * @memberof PublicFilter
     */
    'contentList'?: Array<FilterContentListInner>;
    /**
     * 
     * @type {string}
     * @memberof PublicFilter
     */
    'pattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicFilter
     */
    'color'?: string;
    /**
     * 
     * @type {FilterWidth}
     * @memberof PublicFilter
     */
    'width'?: FilterWidth;
    /**
     * 
     * @type {FilterWeightGsm}
     * @memberof PublicFilter
     */
    'weightGsm'?: FilterWeightGsm;
    /**
     * 
     * @type {string}
     * @memberof PublicFilter
     */
    'warpDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicFilter
     */
    'weftDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicFilter
     */
    'wovenWarpYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicFilter
     */
    'wovenWeftYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicFilter
     */
    'knitYarnCount'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PublicFilter
     */
    'finishList'?: Array<string>;
    /**
     * 
     * @type {FilterInventory}
     * @memberof PublicFilter
     */
    'inventory'?: FilterInventory;
}
/**
 * 
 * @export
 * @interface PublicGetListPost200Response
 */
export interface PublicGetListPost200Response {
    /**
     * 
     * @type {PublicGetListPost200ResponseResult}
     * @memberof PublicGetListPost200Response
     */
    'result'?: PublicGetListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof PublicGetListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicGetListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof PublicGetListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface PublicGetListPost200ResponseResult
 */
export interface PublicGetListPost200ResponseResult {
    /**
     * 
     * @type {PaginationRes}
     * @memberof PublicGetListPost200ResponseResult
     */
    'pagination'?: PaginationRes;
    /**
     * 
     * @type {PublicCollection}
     * @memberof PublicGetListPost200ResponseResult
     */
    'publicCollection'?: PublicCollection;
}
/**
 * 
 * @export
 * @interface PublicGetListPostRequest
 */
export interface PublicGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof PublicGetListPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof PublicGetListPostRequest
     */
    'workspaceNodeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PublicGetListPostRequest
     */
    'workspaceNodeLocation'?: PublicGetListPostRequestWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {Search}
     * @memberof PublicGetListPostRequest
     */
    'search'?: Search;
    /**
     * 
     * @type {PublicFilter}
     * @memberof PublicGetListPostRequest
     */
    'filter'?: PublicFilter;
    /**
     * 
     * @type {PaginationReq}
     * @memberof PublicGetListPostRequest
     */
    'pagination': PaginationReq;
}

export const PublicGetListPostRequestWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PublicGetListPostRequestWorkspaceNodeLocationEnum = typeof PublicGetListPostRequestWorkspaceNodeLocationEnum[keyof typeof PublicGetListPostRequestWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface PublicGetMaterialPost200Response
 */
export interface PublicGetMaterialPost200Response {
    /**
     * 
     * @type {PublicGetMaterialPost200ResponseResult}
     * @memberof PublicGetMaterialPost200Response
     */
    'result'?: PublicGetMaterialPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof PublicGetMaterialPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicGetMaterialPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof PublicGetMaterialPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface PublicGetMaterialPost200ResponseResult
 */
export interface PublicGetMaterialPost200ResponseResult {
    /**
     * 
     * @type {Array<BreadcrumbListInner>}
     * @memberof PublicGetMaterialPost200ResponseResult
     */
    'breadcrumbList'?: Array<BreadcrumbListInner>;
    /**
     * 
     * @type {Material}
     * @memberof PublicGetMaterialPost200ResponseResult
     */
    'material'?: Material;
    /**
     * 
     * @type {Publish}
     * @memberof PublicGetMaterialPost200ResponseResult
     */
    'publish'?: Publish;
}
/**
 * 
 * @export
 * @interface PublicGetMaterialPostRequest
 */
export interface PublicGetMaterialPostRequest {
    /**
     * 
     * @type {number}
     * @memberof PublicGetMaterialPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof PublicGetMaterialPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {number}
     * @memberof PublicGetMaterialPostRequest
     */
    'workspaceNodeLocation': PublicGetMaterialPostRequestWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {string}
     * @memberof PublicGetMaterialPostRequest
     */
    'keyword'?: string;
    /**
     * 
     * @type {number}
     * @memberof PublicGetMaterialPostRequest
     */
    'rank'?: number;
}

export const PublicGetMaterialPostRequestWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PublicGetMaterialPostRequestWorkspaceNodeLocationEnum = typeof PublicGetMaterialPostRequestWorkspaceNodeLocationEnum[keyof typeof PublicGetMaterialPostRequestWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface PublicShareAssignedGetTargetPost200Response
 */
export interface PublicShareAssignedGetTargetPost200Response {
    /**
     * 
     * @type {PublicShareAssignedGetTargetPost200ResponseResult}
     * @memberof PublicShareAssignedGetTargetPost200Response
     */
    'result'?: PublicShareAssignedGetTargetPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof PublicShareAssignedGetTargetPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicShareAssignedGetTargetPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof PublicShareAssignedGetTargetPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface PublicShareAssignedGetTargetPost200ResponseResult
 */
export interface PublicShareAssignedGetTargetPost200ResponseResult {
    /**
     * 
     * @type {PublicShareAssignedGetTargetPost200ResponseResultTarget}
     * @memberof PublicShareAssignedGetTargetPost200ResponseResult
     */
    'target'?: PublicShareAssignedGetTargetPost200ResponseResultTarget;
}
/**
 * 
 * @export
 * @interface PublicShareAssignedGetTargetPost200ResponseResultTarget
 */
export interface PublicShareAssignedGetTargetPost200ResponseResultTarget {
    /**
     * 
     * @type {number}
     * @memberof PublicShareAssignedGetTargetPost200ResponseResultTarget
     */
    'type'?: PublicShareAssignedGetTargetPost200ResponseResultTargetTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PublicShareAssignedGetTargetPost200ResponseResultTarget
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicShareAssignedGetTargetPost200ResponseResultTarget
     */
    'logo'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicShareAssignedGetTargetPost200ResponseResultTarget
     */
    'number'?: string;
}

export const PublicShareAssignedGetTargetPost200ResponseResultTargetTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PublicShareAssignedGetTargetPost200ResponseResultTargetTypeEnum = typeof PublicShareAssignedGetTargetPost200ResponseResultTargetTypeEnum[keyof typeof PublicShareAssignedGetTargetPost200ResponseResultTargetTypeEnum];

/**
 * 
 * @export
 * @interface PublicShareAssignedGetTargetPostRequest
 */
export interface PublicShareAssignedGetTargetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof PublicShareAssignedGetTargetPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {number}
     * @memberof PublicShareAssignedGetTargetPostRequest
     */
    'workspaceNodeLocation': PublicShareAssignedGetTargetPostRequestWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {string}
     * @memberof PublicShareAssignedGetTargetPostRequest
     */
    'target': string;
}

export const PublicShareAssignedGetTargetPostRequestWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PublicShareAssignedGetTargetPostRequestWorkspaceNodeLocationEnum = typeof PublicShareAssignedGetTargetPostRequestWorkspaceNodeLocationEnum[keyof typeof PublicShareAssignedGetTargetPostRequestWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface PublicShareAssignedPostRequest
 */
export interface PublicShareAssignedPostRequest {
    /**
     * 
     * @type {number}
     * @memberof PublicShareAssignedPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof PublicShareAssignedPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {number}
     * @memberof PublicShareAssignedPostRequest
     */
    'workspaceNodeLocation': PublicShareAssignedPostRequestWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {Array<PublicShareAssignedPostRequestTargetListInner>}
     * @memberof PublicShareAssignedPostRequest
     */
    'targetList': Array<PublicShareAssignedPostRequestTargetListInner>;
}

export const PublicShareAssignedPostRequestWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PublicShareAssignedPostRequestWorkspaceNodeLocationEnum = typeof PublicShareAssignedPostRequestWorkspaceNodeLocationEnum[keyof typeof PublicShareAssignedPostRequestWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface PublicShareAssignedPostRequestTargetListInner
 */
export interface PublicShareAssignedPostRequestTargetListInner {
    /**
     * 
     * @type {number}
     * @memberof PublicShareAssignedPostRequestTargetListInner
     */
    'type'?: PublicShareAssignedPostRequestTargetListInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PublicShareAssignedPostRequestTargetListInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicShareAssignedPostRequestTargetListInner
     */
    'logo'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicShareAssignedPostRequestTargetListInner
     */
    'number'?: string;
}

export const PublicShareAssignedPostRequestTargetListInnerTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PublicShareAssignedPostRequestTargetListInnerTypeEnum = typeof PublicShareAssignedPostRequestTargetListInnerTypeEnum[keyof typeof PublicShareAssignedPostRequestTargetListInnerTypeEnum];

/**
 * 
 * @export
 * @interface PublicShareCopyLinkGeneratePost200Response
 */
export interface PublicShareCopyLinkGeneratePost200Response {
    /**
     * 
     * @type {PublicShareCopyLinkGeneratePost200ResponseResult}
     * @memberof PublicShareCopyLinkGeneratePost200Response
     */
    'result'?: PublicShareCopyLinkGeneratePost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof PublicShareCopyLinkGeneratePost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicShareCopyLinkGeneratePost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof PublicShareCopyLinkGeneratePost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface PublicShareCopyLinkGeneratePost200ResponseResult
 */
export interface PublicShareCopyLinkGeneratePost200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof PublicShareCopyLinkGeneratePost200ResponseResult
     */
    'key'?: string;
}
/**
 * 
 * @export
 * @interface PublicShareCopyLinkGeneratePostRequest
 */
export interface PublicShareCopyLinkGeneratePostRequest {
    /**
     * 
     * @type {number}
     * @memberof PublicShareCopyLinkGeneratePostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {number}
     * @memberof PublicShareCopyLinkGeneratePostRequest
     */
    'workspaceNodeLocation': PublicShareCopyLinkGeneratePostRequestWorkspaceNodeLocationEnum;
}

export const PublicShareCopyLinkGeneratePostRequestWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PublicShareCopyLinkGeneratePostRequestWorkspaceNodeLocationEnum = typeof PublicShareCopyLinkGeneratePostRequestWorkspaceNodeLocationEnum[keyof typeof PublicShareCopyLinkGeneratePostRequestWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface PublicShareSocialGeneratePostRequest
 */
export interface PublicShareSocialGeneratePostRequest {
    /**
     * 
     * @type {number}
     * @memberof PublicShareSocialGeneratePostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {number}
     * @memberof PublicShareSocialGeneratePostRequest
     */
    'workspaceNodeLocation': PublicShareSocialGeneratePostRequestWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {number}
     * @memberof PublicShareSocialGeneratePostRequest
     */
    'type': PublicShareSocialGeneratePostRequestTypeEnum;
}

export const PublicShareSocialGeneratePostRequestWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PublicShareSocialGeneratePostRequestWorkspaceNodeLocationEnum = typeof PublicShareSocialGeneratePostRequestWorkspaceNodeLocationEnum[keyof typeof PublicShareSocialGeneratePostRequestWorkspaceNodeLocationEnum];
export const PublicShareSocialGeneratePostRequestTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PublicShareSocialGeneratePostRequestTypeEnum = typeof PublicShareSocialGeneratePostRequestTypeEnum[keyof typeof PublicShareSocialGeneratePostRequestTypeEnum];

/**
 * 
 * @export
 * @interface Publish
 */
export interface Publish {
    /**
     * 
     * @type {number}
     * @memberof Publish
     */
    'workspaceNodeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Publish
     */
    'workspaceNodeLocation'?: PublishWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {string}
     * @memberof Publish
     */
    'logo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Publish
     */
    'displayName'?: string;
    /**
     * 
     * @type {number}
     * @memberof Publish
     */
    'publicDate'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Publish
     */
    'isCanClone'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Publish
     */
    'isCanDownloadU3M'?: boolean;
}

export const PublishWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type PublishWorkspaceNodeLocationEnum = typeof PublishWorkspaceNodeLocationEnum[keyof typeof PublishWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface ReadAllUnreadDigitalThreadRequest
 */
export interface ReadAllUnreadDigitalThreadRequest {
    /**
     * 組織ID
     * @type {number}
     * @memberof ReadAllUnreadDigitalThreadRequest
     */
    'orgId': number;
    /**
     * 
     * @type {OgType}
     * @memberof ReadAllUnreadDigitalThreadRequest
     */
    'ogType': OgType;
    /**
     * 單位(組織或團隊)ID
     * @type {number}
     * @memberof ReadAllUnreadDigitalThreadRequest
     */
    'ogId': number;
    /**
     * 要已讀的Digital Thread清單
     * @type {Array<number>}
     * @memberof ReadAllUnreadDigitalThreadRequest
     */
    'digitalThreadSideIdList': Array<number>;
}


/**
 * 
 * @export
 * @interface RenameWorkflowStageRequest
 */
export interface RenameWorkflowStageRequest {
    /**
     * 組織ID
     * @type {number}
     * @memberof RenameWorkflowStageRequest
     */
    'orgId': number;
    /**
     * WorkflowStage Id
     * @type {number}
     * @memberof RenameWorkflowStageRequest
     */
    'workflowStageId': number;
    /**
     * WorkflowStage名稱
     * @type {string}
     * @memberof RenameWorkflowStageRequest
     */
    'workflowStageName': string;
}
/**
 * 
 * @export
 * @interface ResSuccessTrue
 */
export interface ResSuccessTrue {
    /**
     * 
     * @type {boolean}
     * @memberof ResSuccessTrue
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ResSuccessTrue
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ResSuccessTrue
     */
    'result'?: object | null;
    /**
     * 
     * @type {object}
     * @memberof ResSuccessTrue
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface SamplePost200Response
 */
export interface SamplePost200Response {
    /**
     * 
     * @type {SamplePost200ResponseResult}
     * @memberof SamplePost200Response
     */
    'result'?: SamplePost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof SamplePost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof SamplePost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof SamplePost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface SamplePost200ResponseResult
 */
export interface SamplePost200ResponseResult {
    /**
     * is user from old platform
     * @type {boolean}
     * @memberof SamplePost200ResponseResult
     */
    'isOldUser'?: boolean;
    /**
     * accessToken
     * @type {string}
     * @memberof SamplePost200ResponseResult
     */
    'accessToken'?: string;
    /**
     * refreshToken
     * @type {string}
     * @memberof SamplePost200ResponseResult
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface SamplePost400Response
 */
export interface SamplePost400Response {
    /**
     * 
     * @type {SamplePost400ResponseMessage}
     * @memberof SamplePost400Response
     */
    'message'?: SamplePost400ResponseMessage;
}
/**
 * 
 * @export
 * @interface SamplePost400ResponseMessage
 */
export interface SamplePost400ResponseMessage {
    /**
     * Message Title
     * @type {string}
     * @memberof SamplePost400ResponseMessage
     */
    'title'?: string;
    /**
     * Message Content
     * @type {string}
     * @memberof SamplePost400ResponseMessage
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface SamplePostRequest
 */
export interface SamplePostRequest {
    /**
     * Email
     * @type {string}
     * @memberof SamplePostRequest
     */
    'email': string;
    /**
     * Password
     * @type {string}
     * @memberof SamplePostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Search
 */
export interface Search {
    /**
     * 
     * @type {string}
     * @memberof Search
     */
    'keyword'?: string;
    /**
     * 
     * @type {Array<SearchGetAiTagsPost200ResponseResultTagListInner>}
     * @memberof Search
     */
    'tagList'?: Array<SearchGetAiTagsPost200ResponseResultTagListInner>;
}
/**
 * 
 * @export
 * @interface SearchGetAiTagsPost200Response
 */
export interface SearchGetAiTagsPost200Response {
    /**
     * 
     * @type {SearchGetAiTagsPost200ResponseResult}
     * @memberof SearchGetAiTagsPost200Response
     */
    'result'?: SearchGetAiTagsPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof SearchGetAiTagsPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof SearchGetAiTagsPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof SearchGetAiTagsPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface SearchGetAiTagsPost200ResponseResult
 */
export interface SearchGetAiTagsPost200ResponseResult {
    /**
     * 
     * @type {Array<SearchGetAiTagsPost200ResponseResultTagListInner>}
     * @memberof SearchGetAiTagsPost200ResponseResult
     */
    'tagList'?: Array<SearchGetAiTagsPost200ResponseResultTagListInner>;
}
/**
 * 
 * @export
 * @interface SearchGetAiTagsPost200ResponseResultTagListInner
 */
export interface SearchGetAiTagsPost200ResponseResultTagListInner {
    /**
     * 
     * @type {number}
     * @memberof SearchGetAiTagsPost200ResponseResultTagListInner
     */
    'type'?: SearchGetAiTagsPost200ResponseResultTagListInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SearchGetAiTagsPost200ResponseResultTagListInner
     */
    'name'?: string;
}

export const SearchGetAiTagsPost200ResponseResultTagListInnerTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type SearchGetAiTagsPost200ResponseResultTagListInnerTypeEnum = typeof SearchGetAiTagsPost200ResponseResultTagListInnerTypeEnum[keyof typeof SearchGetAiTagsPost200ResponseResultTagListInnerTypeEnum];

/**
 * 
 * @export
 * @interface SearchGetAiTagsPostRequest
 */
export interface SearchGetAiTagsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SearchGetAiTagsPostRequest
     */
    'searchKeyword': string;
}
/**
 * 
 * @export
 * @interface Share
 */
export interface Share {
    /**
     * 
     * @type {number}
     * @memberof Share
     */
    'sharingId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    'sharingKey'?: string;
    /**
     * 
     * @type {number}
     * @memberof Share
     */
    'sharingFrom'?: ShareSharingFromEnum;
    /**
     * 
     * @type {number}
     * @memberof Share
     */
    'workspaceNodeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Share
     */
    'workspaceNodeType'?: ShareWorkspaceNodeTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Share
     */
    'workspaceNodeLocation'?: ShareWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    'logo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    'displayName'?: string;
    /**
     * 
     * @type {number}
     * @memberof Share
     */
    'shareDate'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Share
     */
    'isCanClone'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Share
     */
    'isCanDownloadU3M'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Share
     */
    'isClosed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Share
     */
    'isCanSave'?: boolean;
    /**
     * 該share物件(material或是collection)的源頭物件擁有者是否有訂閱Made2Flow加值服務
     * @type {boolean}
     * @memberof Share
     */
    'isSourceOrgHasMade2FlowPlan'?: boolean;
}

export const ShareSharingFromEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ShareSharingFromEnum = typeof ShareSharingFromEnum[keyof typeof ShareSharingFromEnum];
export const ShareWorkspaceNodeTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ShareWorkspaceNodeTypeEnum = typeof ShareWorkspaceNodeTypeEnum[keyof typeof ShareWorkspaceNodeTypeEnum];
export const ShareWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ShareWorkspaceNodeLocationEnum = typeof ShareWorkspaceNodeLocationEnum[keyof typeof ShareWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface ShareCollection
 */
export interface ShareCollection {
    /**
     * 
     * @type {Share}
     * @memberof ShareCollection
     */
    'share'?: Share;
    /**
     * 
     * @type {Array<object>}
     * @memberof ShareCollection
     */
    'childMaterialList'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof ShareCollection
     */
    'childCollectionList'?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof ShareCollection
     */
    'workspaceNodeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShareCollection
     */
    'workspaceNodeLocation'?: ShareCollectionWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {number}
     * @memberof ShareCollection
     */
    'collectionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShareCollection
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShareCollection
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShareCollection
     */
    'trendBoardCoverImg'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShareCollection
     */
    'trendBoardDisplayFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShareCollection
     */
    'trendBoardUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ShareCollection
     */
    'isPublic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ShareCollection
     */
    'isCanShared'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ShareCollection
     */
    'isCanClone'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ShareCollection
     */
    'isCanDownloadU3M'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ShareCollection
     */
    'publicDate'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShareCollection
     */
    'createDate'?: number;
    /**
     * 
     * @type {Array<BreadcrumbListInner>}
     * @memberof ShareCollection
     */
    'breadcrumbList'?: Array<BreadcrumbListInner>;
}

export const ShareCollectionWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ShareCollectionWorkspaceNodeLocationEnum = typeof ShareCollectionWorkspaceNodeLocationEnum[keyof typeof ShareCollectionWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface ShareFilter
 */
export interface ShareFilter {
    /**
     * 
     * @type {object}
     * @memberof ShareFilter
     */
    'price'?: object;
    /**
     * 
     * @type {boolean}
     * @memberof ShareFilter
     */
    'hasU3M'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShareFilter
     */
    'category'?: string;
    /**
     * 
     * @type {Array<FilterContentListInner>}
     * @memberof ShareFilter
     */
    'contentList'?: Array<FilterContentListInner>;
    /**
     * 
     * @type {string}
     * @memberof ShareFilter
     */
    'pattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShareFilter
     */
    'color'?: string;
    /**
     * 
     * @type {FilterWidth}
     * @memberof ShareFilter
     */
    'width'?: FilterWidth;
    /**
     * 
     * @type {FilterWeightGsm}
     * @memberof ShareFilter
     */
    'weightGsm'?: FilterWeightGsm;
    /**
     * 
     * @type {string}
     * @memberof ShareFilter
     */
    'warpDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShareFilter
     */
    'weftDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShareFilter
     */
    'wovenWarpYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShareFilter
     */
    'wovenWeftYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShareFilter
     */
    'knitYarnCount'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShareFilter
     */
    'finishList'?: Array<string>;
    /**
     * 
     * @type {FilterInventory}
     * @memberof ShareFilter
     */
    'inventory'?: FilterInventory;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedCheckPermissionPost200Response
 */
export interface ShareGetReceivedCheckPermissionPost200Response {
    /**
     * 
     * @type {ShareGetReceivedCheckPermissionPost200ResponseResult}
     * @memberof ShareGetReceivedCheckPermissionPost200Response
     */
    'result'?: ShareGetReceivedCheckPermissionPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof ShareGetReceivedCheckPermissionPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ShareGetReceivedCheckPermissionPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ShareGetReceivedCheckPermissionPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedCheckPermissionPost200ResponseResult
 */
export interface ShareGetReceivedCheckPermissionPost200ResponseResult {
    /**
     * 
     * @type {boolean}
     * @memberof ShareGetReceivedCheckPermissionPost200ResponseResult
     */
    'allow'?: boolean;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedCheckPermissionPostRequest
 */
export interface ShareGetReceivedCheckPermissionPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ShareGetReceivedCheckPermissionPostRequest
     */
    'sharingKey': string;
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedCheckPermissionPostRequest
     */
    'type': ShareGetReceivedCheckPermissionPostRequestTypeEnum;
}

export const ShareGetReceivedCheckPermissionPostRequestTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ShareGetReceivedCheckPermissionPostRequestTypeEnum = typeof ShareGetReceivedCheckPermissionPostRequestTypeEnum[keyof typeof ShareGetReceivedCheckPermissionPostRequestTypeEnum];

/**
 * 
 * @export
 * @interface ShareGetReceivedCloneCheckPost200Response
 */
export interface ShareGetReceivedCloneCheckPost200Response {
    /**
     * 
     * @type {ShareGetReceivedCloneCheckPost200ResponseResult}
     * @memberof ShareGetReceivedCloneCheckPost200Response
     */
    'result'?: ShareGetReceivedCloneCheckPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof ShareGetReceivedCloneCheckPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ShareGetReceivedCloneCheckPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ShareGetReceivedCloneCheckPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedCloneCheckPost200ResponseResult
 */
export interface ShareGetReceivedCloneCheckPost200ResponseResult {
    /**
     * 
     * @type {ShareGetReceivedCloneCheckPost200ResponseResultEstimatedQuota}
     * @memberof ShareGetReceivedCloneCheckPost200ResponseResult
     */
    'estimatedQuota'?: ShareGetReceivedCloneCheckPost200ResponseResultEstimatedQuota;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedCloneCheckPost200ResponseResultEstimatedQuota
 */
export interface ShareGetReceivedCloneCheckPost200ResponseResultEstimatedQuota {
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedCloneCheckPost200ResponseResultEstimatedQuota
     */
    'u3m'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedCloneCheckPost200ResponseResultEstimatedQuota
     */
    'material'?: number;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedCloneCheckPostRequest
 */
export interface ShareGetReceivedCloneCheckPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedCloneCheckPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>}
     * @memberof ShareGetReceivedCloneCheckPostRequest
     */
    'workspaceNodeList': Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner
 */
export interface ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner {
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner
     */
    'location'?: ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInnerLocationEnum;
}

export const ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInnerLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInnerLocationEnum = typeof ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInnerLocationEnum[keyof typeof ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInnerLocationEnum];

/**
 * 
 * @export
 * @interface ShareGetReceivedClonePostRequest
 */
export interface ShareGetReceivedClonePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ShareGetReceivedClonePostRequest
     */
    'sharingKey': string;
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedClonePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>}
     * @memberof ShareGetReceivedClonePostRequest
     */
    'workspaceNodeList': Array<ShareGetReceivedCloneCheckPostRequestWorkspaceNodeListInner>;
    /**
     * 
     * @type {Array<ShareGetReceivedClonePostRequestTargetLocationListInner>}
     * @memberof ShareGetReceivedClonePostRequest
     */
    'targetLocationList': Array<ShareGetReceivedClonePostRequestTargetLocationListInner>;
    /**
     * 
     * @type {ShareGetReceivedClonePostRequestOptional}
     * @memberof ShareGetReceivedClonePostRequest
     */
    'optional': ShareGetReceivedClonePostRequestOptional;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedClonePostRequestOptional
 */
export interface ShareGetReceivedClonePostRequestOptional {
    /**
     * 
     * @type {boolean}
     * @memberof ShareGetReceivedClonePostRequestOptional
     */
    'u3m'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ShareGetReceivedClonePostRequestOptional
     */
    'attachment'?: boolean;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedClonePostRequestTargetLocationListInner
 */
export interface ShareGetReceivedClonePostRequestTargetLocationListInner {
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedClonePostRequestTargetLocationListInner
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedClonePostRequestTargetLocationListInner
     */
    'location'?: ShareGetReceivedClonePostRequestTargetLocationListInnerLocationEnum;
}

export const ShareGetReceivedClonePostRequestTargetLocationListInnerLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ShareGetReceivedClonePostRequestTargetLocationListInnerLocationEnum = typeof ShareGetReceivedClonePostRequestTargetLocationListInnerLocationEnum[keyof typeof ShareGetReceivedClonePostRequestTargetLocationListInnerLocationEnum];

/**
 * 
 * @export
 * @interface ShareGetReceivedGetListPost200Response
 */
export interface ShareGetReceivedGetListPost200Response {
    /**
     * 
     * @type {ShareGetReceivedGetListPost200ResponseResult}
     * @memberof ShareGetReceivedGetListPost200Response
     */
    'result'?: ShareGetReceivedGetListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof ShareGetReceivedGetListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ShareGetReceivedGetListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ShareGetReceivedGetListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedGetListPost200ResponseResult
 */
export interface ShareGetReceivedGetListPost200ResponseResult {
    /**
     * 
     * @type {PaginationRes}
     * @memberof ShareGetReceivedGetListPost200ResponseResult
     */
    'pagination'?: PaginationRes;
    /**
     * 
     * @type {WorkspaceCollection}
     * @memberof ShareGetReceivedGetListPost200ResponseResult
     */
    'workspaceCollection'?: WorkspaceCollection;
    /**
     * 
     * @type {Share}
     * @memberof ShareGetReceivedGetListPost200ResponseResult
     */
    'share'?: Share;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedGetListPostRequest
 */
export interface ShareGetReceivedGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedGetListPostRequest
     */
    'orgId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedGetListPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {string}
     * @memberof ShareGetReceivedGetListPostRequest
     */
    'sharingKey': string;
    /**
     * 
     * @type {Search}
     * @memberof ShareGetReceivedGetListPostRequest
     */
    'search'?: Search;
    /**
     * 
     * @type {ShareFilter}
     * @memberof ShareGetReceivedGetListPostRequest
     */
    'filter'?: ShareFilter;
    /**
     * 
     * @type {PaginationReq}
     * @memberof ShareGetReceivedGetListPostRequest
     */
    'pagination'?: PaginationReq;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedGetMaterialPost200Response
 */
export interface ShareGetReceivedGetMaterialPost200Response {
    /**
     * 
     * @type {ShareGetReceivedGetMaterialPost200ResponseResult}
     * @memberof ShareGetReceivedGetMaterialPost200Response
     */
    'result'?: ShareGetReceivedGetMaterialPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof ShareGetReceivedGetMaterialPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ShareGetReceivedGetMaterialPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ShareGetReceivedGetMaterialPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedGetMaterialPost200ResponseResult
 */
export interface ShareGetReceivedGetMaterialPost200ResponseResult {
    /**
     * 
     * @type {Array<BreadcrumbListInner>}
     * @memberof ShareGetReceivedGetMaterialPost200ResponseResult
     */
    'breadcrumbList'?: Array<BreadcrumbListInner>;
    /**
     * 
     * @type {Material}
     * @memberof ShareGetReceivedGetMaterialPost200ResponseResult
     */
    'material'?: Material;
    /**
     * 
     * @type {Share}
     * @memberof ShareGetReceivedGetMaterialPost200ResponseResult
     */
    'share'?: Share;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedGetMaterialPostRequest
 */
export interface ShareGetReceivedGetMaterialPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedGetMaterialPostRequest
     */
    'orgId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedGetMaterialPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {string}
     * @memberof ShareGetReceivedGetMaterialPostRequest
     */
    'sharingKey': string;
    /**
     * 
     * @type {string}
     * @memberof ShareGetReceivedGetMaterialPostRequest
     */
    'keyword'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedGetMaterialPostRequest
     */
    'rank'?: number;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedPost200Response
 */
export interface ShareGetReceivedPost200Response {
    /**
     * 
     * @type {ShareGetReceivedPost200ResponseResult}
     * @memberof ShareGetReceivedPost200Response
     */
    'result'?: ShareGetReceivedPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof ShareGetReceivedPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ShareGetReceivedPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ShareGetReceivedPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedPost200ResponseResult
 */
export interface ShareGetReceivedPost200ResponseResult {
    /**
     * 
     * @type {Share}
     * @memberof ShareGetReceivedPost200ResponseResult
     */
    'share'?: Share;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedPostRequest
 */
export interface ShareGetReceivedPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ShareGetReceivedPostRequest
     */
    'sharingKey': string;
}
/**
 * 
 * @export
 * @interface ShareGetReceivedSavePostRequest
 */
export interface ShareGetReceivedSavePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ShareGetReceivedSavePostRequest
     */
    'sharingKey': string;
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedSavePostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof ShareGetReceivedSavePostRequest
     */
    'groupId'?: number;
}
/**
 * 
 * @export
 * @interface ShareMoodboardGetReceivedPost200Response
 */
export interface ShareMoodboardGetReceivedPost200Response {
    /**
     * 
     * @type {ShareMoodboardGetReceivedPost200ResponseResult}
     * @memberof ShareMoodboardGetReceivedPost200Response
     */
    'result'?: ShareMoodboardGetReceivedPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof ShareMoodboardGetReceivedPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ShareMoodboardGetReceivedPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ShareMoodboardGetReceivedPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface ShareMoodboardGetReceivedPost200ResponseResult
 */
export interface ShareMoodboardGetReceivedPost200ResponseResult {
    /**
     * 
     * @type {MoodboardShare}
     * @memberof ShareMoodboardGetReceivedPost200ResponseResult
     */
    'moodboardShare'?: MoodboardShare;
    /**
     * 
     * @type {Moodboard}
     * @memberof ShareMoodboardGetReceivedPost200ResponseResult
     */
    'moodboard'?: Moodboard;
}
/**
 * 
 * @export
 * @interface ShowroomGetAnnouncementPost200Response
 */
export interface ShowroomGetAnnouncementPost200Response {
    /**
     * 
     * @type {ShowroomGetAnnouncementPost200ResponseResult}
     * @memberof ShowroomGetAnnouncementPost200Response
     */
    'result'?: ShowroomGetAnnouncementPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof ShowroomGetAnnouncementPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetAnnouncementPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ShowroomGetAnnouncementPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface ShowroomGetAnnouncementPost200ResponseResult
 */
export interface ShowroomGetAnnouncementPost200ResponseResult {
    /**
     * 用來判斷要不要跳showroom的annoucement modal
     * @type {boolean}
     * @memberof ShowroomGetAnnouncementPost200ResponseResult
     */
    'isPromoting'?: boolean;
    /**
     * 
     * @type {ShowroomGetAnnouncementPost200ResponseResultAnnouncement}
     * @memberof ShowroomGetAnnouncementPost200ResponseResult
     */
    'announcement'?: ShowroomGetAnnouncementPost200ResponseResultAnnouncement;
}
/**
 * 
 * @export
 * @interface ShowroomGetAnnouncementPost200ResponseResultAnnouncement
 */
export interface ShowroomGetAnnouncementPost200ResponseResultAnnouncement {
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetAnnouncementPost200ResponseResultAnnouncement
     */
    'coverImg'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetAnnouncementPost200ResponseResultAnnouncement
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetAnnouncementPost200ResponseResultAnnouncement
     */
    'subtitle'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShowroomGetAnnouncementPost200ResponseResultAnnouncement
     */
    'participatedOrgLogoList'?: Array<string>;
    /**
     * 
     * @type {ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescription}
     * @memberof ShowroomGetAnnouncementPost200ResponseResultAnnouncement
     */
    'description'?: ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescription;
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetAnnouncementPost200ResponseResultAnnouncement
     */
    'showroomId'?: number;
}
/**
 * 
 * @export
 * @interface ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescription
 */
export interface ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescription {
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescription
     */
    'content'?: string;
    /**
     * 
     * @type {Array<ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInner>}
     * @memberof ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescription
     */
    'contentValue'?: Array<ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInner>;
}
/**
 * 
 * @export
 * @interface ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInner
 */
export interface ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInner {
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInner
     */
    'type'?: ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInner
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInner
     */
    'value'?: string;
}

export const ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInnerTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInnerTypeEnum = typeof ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInnerTypeEnum[keyof typeof ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInnerTypeEnum];

/**
 * 
 * @export
 * @interface ShowroomGetAnnouncementPostRequest
 */
export interface ShowroomGetAnnouncementPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetAnnouncementPostRequest
     */
    'orgId': number;
}
/**
 * 
 * @export
 * @interface ShowroomGetBannerAndListPost200Response
 */
export interface ShowroomGetBannerAndListPost200Response {
    /**
     * 
     * @type {ShowroomGetBannerAndListPost200ResponseResult}
     * @memberof ShowroomGetBannerAndListPost200Response
     */
    'result'?: ShowroomGetBannerAndListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof ShowroomGetBannerAndListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetBannerAndListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ShowroomGetBannerAndListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface ShowroomGetBannerAndListPost200ResponseResult
 */
export interface ShowroomGetBannerAndListPost200ResponseResult {
    /**
     * 
     * @type {ShowroomGetBannerAndListPost200ResponseResultBanner}
     * @memberof ShowroomGetBannerAndListPost200ResponseResult
     */
    'banner'?: ShowroomGetBannerAndListPost200ResponseResultBanner;
    /**
     * 
     * @type {Array<ShowroomGetBannerAndListPost200ResponseResultShowroomListInner>}
     * @memberof ShowroomGetBannerAndListPost200ResponseResult
     */
    'showroomList'?: Array<ShowroomGetBannerAndListPost200ResponseResultShowroomListInner>;
}
/**
 * 
 * @export
 * @interface ShowroomGetBannerAndListPost200ResponseResultBanner
 */
export interface ShowroomGetBannerAndListPost200ResponseResultBanner {
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetBannerAndListPost200ResponseResultBanner
     */
    'coverImg'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetBannerAndListPost200ResponseResultBanner
     */
    'color'?: ShowroomGetBannerAndListPost200ResponseResultBannerColorEnum;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetBannerAndListPost200ResponseResultBanner
     */
    'title'?: string;
    /**
     * 
     * @type {ShowroomGetBannerAndListPost200ResponseResultBannerDescription}
     * @memberof ShowroomGetBannerAndListPost200ResponseResultBanner
     */
    'description'?: ShowroomGetBannerAndListPost200ResponseResultBannerDescription;
}

export const ShowroomGetBannerAndListPost200ResponseResultBannerColorEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ShowroomGetBannerAndListPost200ResponseResultBannerColorEnum = typeof ShowroomGetBannerAndListPost200ResponseResultBannerColorEnum[keyof typeof ShowroomGetBannerAndListPost200ResponseResultBannerColorEnum];

/**
 * 
 * @export
 * @interface ShowroomGetBannerAndListPost200ResponseResultBannerDescription
 */
export interface ShowroomGetBannerAndListPost200ResponseResultBannerDescription {
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetBannerAndListPost200ResponseResultBannerDescription
     */
    'content'?: string;
    /**
     * 
     * @type {Array<ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInner>}
     * @memberof ShowroomGetBannerAndListPost200ResponseResultBannerDescription
     */
    'contentValue'?: Array<ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescriptionContentValueInner>;
}
/**
 * 
 * @export
 * @interface ShowroomGetBannerAndListPost200ResponseResultShowroomListInner
 */
export interface ShowroomGetBannerAndListPost200ResponseResultShowroomListInner {
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetBannerAndListPost200ResponseResultShowroomListInner
     */
    'showroomId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetBannerAndListPost200ResponseResultShowroomListInner
     */
    'coverImg'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetBannerAndListPost200ResponseResultShowroomListInner
     */
    'status'?: ShowroomGetBannerAndListPost200ResponseResultShowroomListInnerStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetBannerAndListPost200ResponseResultShowroomListInner
     */
    'period'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetBannerAndListPost200ResponseResultShowroomListInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetBannerAndListPost200ResponseResultShowroomListInner
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetBannerAndListPost200ResponseResultShowroomListInner
     */
    'subtitle'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShowroomGetBannerAndListPost200ResponseResultShowroomListInner
     */
    'categoryList'?: Array<string>;
}

export const ShowroomGetBannerAndListPost200ResponseResultShowroomListInnerStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ShowroomGetBannerAndListPost200ResponseResultShowroomListInnerStatusEnum = typeof ShowroomGetBannerAndListPost200ResponseResultShowroomListInnerStatusEnum[keyof typeof ShowroomGetBannerAndListPost200ResponseResultShowroomListInnerStatusEnum];

/**
 * 
 * @export
 * @interface ShowroomGetInfoPost200Response
 */
export interface ShowroomGetInfoPost200Response {
    /**
     * 
     * @type {ShowroomGetInfoPost200ResponseResult}
     * @memberof ShowroomGetInfoPost200Response
     */
    'result'?: ShowroomGetInfoPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof ShowroomGetInfoPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetInfoPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ShowroomGetInfoPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface ShowroomGetInfoPost200ResponseResult
 */
export interface ShowroomGetInfoPost200ResponseResult {
    /**
     * 
     * @type {ShowroomGetInfoPost200ResponseResultShowroom}
     * @memberof ShowroomGetInfoPost200ResponseResult
     */
    'showroom'?: ShowroomGetInfoPost200ResponseResultShowroom;
}
/**
 * 
 * @export
 * @interface ShowroomGetInfoPost200ResponseResultShowroom
 */
export interface ShowroomGetInfoPost200ResponseResultShowroom {
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroom
     */
    'showroomId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroom
     */
    'coverImg'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroom
     */
    'color'?: ShowroomGetInfoPost200ResponseResultShowroomColorEnum;
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroom
     */
    'status'?: ShowroomGetInfoPost200ResponseResultShowroomStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroom
     */
    'period'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroom
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroom
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroom
     */
    'subtitle'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroom
     */
    'categoryList'?: Array<string>;
    /**
     * 
     * @type {ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescription}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroom
     */
    'description'?: ShowroomGetAnnouncementPost200ResponseResultAnnouncementDescription;
    /**
     * 
     * @type {Array<ShowroomGetInfoPost200ResponseResultShowroomParticipatedOrgListInner>}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroom
     */
    'participatedOrgList'?: Array<ShowroomGetInfoPost200ResponseResultShowroomParticipatedOrgListInner>;
}

export const ShowroomGetInfoPost200ResponseResultShowroomColorEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ShowroomGetInfoPost200ResponseResultShowroomColorEnum = typeof ShowroomGetInfoPost200ResponseResultShowroomColorEnum[keyof typeof ShowroomGetInfoPost200ResponseResultShowroomColorEnum];
export const ShowroomGetInfoPost200ResponseResultShowroomStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ShowroomGetInfoPost200ResponseResultShowroomStatusEnum = typeof ShowroomGetInfoPost200ResponseResultShowroomStatusEnum[keyof typeof ShowroomGetInfoPost200ResponseResultShowroomStatusEnum];

/**
 * 
 * @export
 * @interface ShowroomGetInfoPost200ResponseResultShowroomParticipatedOrgListInner
 */
export interface ShowroomGetInfoPost200ResponseResultShowroomParticipatedOrgListInner {
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroomParticipatedOrgListInner
     */
    'orgId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroomParticipatedOrgListInner
     */
    'logo'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroomParticipatedOrgListInner
     */
    'orgName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowroomGetInfoPost200ResponseResultShowroomParticipatedOrgListInner
     */
    'contactEmail'?: string;
}
/**
 * 
 * @export
 * @interface ShowroomGetInfoPostRequest
 */
export interface ShowroomGetInfoPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetInfoPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetInfoPostRequest
     */
    'showroomId': number;
}
/**
 * 
 * @export
 * @interface ShowroomGetListPostRequest
 */
export interface ShowroomGetListPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetListPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetListPostRequest
     */
    'showroomId': number;
    /**
     * showroom root層的時候不用傳
     * @type {number}
     * @memberof ShowroomGetListPostRequest
     */
    'workspaceNodeId'?: number | null;
    /**
     * showroom root層的時候不用傳
     * @type {number}
     * @memberof ShowroomGetListPostRequest
     */
    'workspaceNodeLocation'?: ShowroomGetListPostRequestWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {Search}
     * @memberof ShowroomGetListPostRequest
     */
    'search'?: Search;
    /**
     * 
     * @type {PublicFilter}
     * @memberof ShowroomGetListPostRequest
     */
    'filter'?: PublicFilter;
    /**
     * 
     * @type {PaginationReq}
     * @memberof ShowroomGetListPostRequest
     */
    'pagination': PaginationReq;
}

export const ShowroomGetListPostRequestWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ShowroomGetListPostRequestWorkspaceNodeLocationEnum = typeof ShowroomGetListPostRequestWorkspaceNodeLocationEnum[keyof typeof ShowroomGetListPostRequestWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface ShowroomGetMaterialPostRequest
 */
export interface ShowroomGetMaterialPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetMaterialPostRequest
     */
    'orgId': number;
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetMaterialPostRequest
     */
    'workspaceNodeId': number;
    /**
     * 
     * @type {number}
     * @memberof ShowroomGetMaterialPostRequest
     */
    'workspaceNodeLocation': ShowroomGetMaterialPostRequestWorkspaceNodeLocationEnum;
    /**
     * 使用者用什麼關鍵字搜到
     * @type {string}
     * @memberof ShowroomGetMaterialPostRequest
     */
    'keyword'?: string;
    /**
     * 使用者用關鍵字搜尋後的該布片排序分數
     * @type {number}
     * @memberof ShowroomGetMaterialPostRequest
     */
    'rank'?: number;
}

export const ShowroomGetMaterialPostRequestWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ShowroomGetMaterialPostRequestWorkspaceNodeLocationEnum = typeof ShowroomGetMaterialPostRequestWorkspaceNodeLocationEnum[keyof typeof ShowroomGetMaterialPostRequestWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface ShowroomSendMailPostRequest
 */
export interface ShowroomSendMailPostRequest {
    /**
     * 
     * @type {number}
     * @memberof ShowroomSendMailPostRequest
     */
    'showroomId': number;
    /**
     * 
     * @type {string}
     * @memberof ShowroomSendMailPostRequest
     */
    'fromEmail': string;
    /**
     * 
     * @type {number}
     * @memberof ShowroomSendMailPostRequest
     */
    'toOrgId': number;
    /**
     * 
     * @type {string}
     * @memberof ShowroomSendMailPostRequest
     */
    'subject': string;
    /**
     * 
     * @type {string}
     * @memberof ShowroomSendMailPostRequest
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface SignInGeneralPost200Response
 */
export interface SignInGeneralPost200Response {
    /**
     * 
     * @type {SignInGeneralPost200ResponseResult}
     * @memberof SignInGeneralPost200Response
     */
    'result'?: SignInGeneralPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof SignInGeneralPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof SignInGeneralPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof SignInGeneralPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface SignInGeneralPost200ResponseResult
 */
export interface SignInGeneralPost200ResponseResult {
    /**
     * is user from old platform and not change password
     * @type {boolean}
     * @memberof SignInGeneralPost200ResponseResult
     */
    'isOldUser'?: boolean;
    /**
     * Old platform users use this token to reset their passwords
     * @type {string}
     * @memberof SignInGeneralPost200ResponseResult
     */
    'oldUserVerifyToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignInGeneralPost200ResponseResult
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignInGeneralPost200ResponseResult
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {User}
     * @memberof SignInGeneralPost200ResponseResult
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface SignInGeneralPostRequest
 */
export interface SignInGeneralPostRequest {
    /**
     * Email
     * @type {string}
     * @memberof SignInGeneralPostRequest
     */
    'email': string;
    /**
     * Password
     * @type {string}
     * @memberof SignInGeneralPostRequest
     */
    'password': string;
    /**
     * 
     * @type {number}
     * @memberof SignInGeneralPostRequest
     */
    'platform': SignInGeneralPostRequestPlatformEnum;
}

export const SignInGeneralPostRequestPlatformEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type SignInGeneralPostRequestPlatformEnum = typeof SignInGeneralPostRequestPlatformEnum[keyof typeof SignInGeneralPostRequestPlatformEnum];

/**
 * 
 * @export
 * @interface SignInGooglePost200Response
 */
export interface SignInGooglePost200Response {
    /**
     * 
     * @type {SignInGooglePost200ResponseResult}
     * @memberof SignInGooglePost200Response
     */
    'result'?: SignInGooglePost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof SignInGooglePost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof SignInGooglePost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof SignInGooglePost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface SignInGooglePost200ResponseResult
 */
export interface SignInGooglePost200ResponseResult {
    /**
     * accessToken
     * @type {string}
     * @memberof SignInGooglePost200ResponseResult
     */
    'accessToken'?: string;
    /**
     * refreshToken
     * @type {string}
     * @memberof SignInGooglePost200ResponseResult
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {User}
     * @memberof SignInGooglePost200ResponseResult
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface SignInGooglePostRequest
 */
export interface SignInGooglePostRequest {
    /**
     * https://developers.google.com/identity/sign-in/web/reference#gapiauth2authresponse
     * @type {string}
     * @memberof SignInGooglePostRequest
     */
    'idToken': string;
    /**
     * 
     * @type {number}
     * @memberof SignInGooglePostRequest
     */
    'platform': SignInGooglePostRequestPlatformEnum;
}

export const SignInGooglePostRequestPlatformEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type SignInGooglePostRequestPlatformEnum = typeof SignInGooglePostRequestPlatformEnum[keyof typeof SignInGooglePostRequestPlatformEnum];

/**
 * 
 * @export
 * @interface SignUpRequestPostRequest
 */
export interface SignUpRequestPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SignUpRequestPostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SignUpRequestPostRequest
     */
    'email': string;
    /**
     * 電話
     * @type {string}
     * @memberof SignUpRequestPostRequest
     */
    'phone'?: string;
    /**
     * 電話撥號代碼
     * @type {string}
     * @memberof SignUpRequestPostRequest
     */
    'phoneCountryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignUpRequestPostRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface Sticker
 */
export interface Sticker {
    /**
     * 檢視者是否有尚未查看的Child Sticker
     * @type {boolean}
     * @memberof Sticker
     */
    'hasChildStickerUnread'?: boolean;
    /**
     * ChildSticker數量，不受filter影響數量
     * @type {number}
     * @memberof Sticker
     */
    'childStickerCount'?: number;
    /**
     * 
     * @type {Array<StickerBase>}
     * @memberof Sticker
     */
    'childStickerList'?: Array<StickerBase>;
    /**
     * 
     * @type {number}
     * @memberof Sticker
     */
    'stickerId'?: number;
    /**
     * 
     * @type {number}
     * @memberof Sticker
     */
    'addTo'?: StickerAddToEnum;
    /**
     * 
     * @type {number}
     * @memberof Sticker
     */
    'type'?: StickerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Sticker
     */
    'content'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Sticker
     */
    'tagList'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof Sticker
     */
    'isStarred'?: boolean;
    /**
     * Sticker建立者組織名稱
     * @type {string}
     * @memberof Sticker
     */
    'creatorOrgName'?: string;
    /**
     * Sticker建立者單位，檢視者所屬組織和Sticker建立者單位那方所屬組織相同時為:呈現Sticker建立者的組織(+團隊)名稱，非建立者那方單位所屬組織為:呈現Sticker建立者的組織名稱
     * @type {string}
     * @memberof Sticker
     */
    'creatorUnitName'?: string;
    /**
     * Sticker建立者的單位的Logo
     * @type {string}
     * @memberof Sticker
     */
    'creatorUnitLogo'?: string;
    /**
     * Sticker建立者的單位的標籤顏色，檢視者所屬組織和Sticker建立者單位那方所屬組織相同時為:呈現Sticker建立者組織或團隊的label color，非建立者那方單位所屬組織為Null值
     * @type {string}
     * @memberof Sticker
     */
    'creatorUnitLabelColor'?: string;
    /**
     * Sticker建立者的使用者名稱，檢視者所屬組織和Sticker建立者單位那方所屬組織相同時呈現Sticker建立者的使用者名稱，非建立者那方單位所屬組織為Null值
     * @type {string}
     * @memberof Sticker
     */
    'creator'?: string;
    /**
     * Sticker建立者的大頭貼，檢視者所屬組織和Sticker建立者單位那方所屬組織相同時呈現Sticker建立者的大頭貼，非建立者那方單位所屬組織為Null值
     * @type {string}
     * @memberof Sticker
     */
    'creatorAvatar'?: string;
    /**
     * 
     * @type {number}
     * @memberof Sticker
     */
    'createDate'?: number;
}

export const StickerAddToEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type StickerAddToEnum = typeof StickerAddToEnum[keyof typeof StickerAddToEnum];
export const StickerTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type StickerTypeEnum = typeof StickerTypeEnum[keyof typeof StickerTypeEnum];

/**
 * 
 * @export
 * @interface StickerBase
 */
export interface StickerBase {
    /**
     * 
     * @type {number}
     * @memberof StickerBase
     */
    'stickerId'?: number;
    /**
     * 
     * @type {number}
     * @memberof StickerBase
     */
    'addTo'?: StickerBaseAddToEnum;
    /**
     * 
     * @type {number}
     * @memberof StickerBase
     */
    'type'?: StickerBaseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof StickerBase
     */
    'content'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof StickerBase
     */
    'tagList'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof StickerBase
     */
    'isStarred'?: boolean;
    /**
     * Sticker建立者組織名稱
     * @type {string}
     * @memberof StickerBase
     */
    'creatorOrgName'?: string;
    /**
     * Sticker建立者單位，檢視者所屬組織和Sticker建立者單位那方所屬組織相同時為:呈現Sticker建立者的組織(+團隊)名稱，非建立者那方單位所屬組織為:呈現Sticker建立者的組織名稱
     * @type {string}
     * @memberof StickerBase
     */
    'creatorUnitName'?: string;
    /**
     * Sticker建立者的單位的Logo
     * @type {string}
     * @memberof StickerBase
     */
    'creatorUnitLogo'?: string;
    /**
     * Sticker建立者的單位的標籤顏色，檢視者所屬組織和Sticker建立者單位那方所屬組織相同時為:呈現Sticker建立者組織或團隊的label color，非建立者那方單位所屬組織為Null值
     * @type {string}
     * @memberof StickerBase
     */
    'creatorUnitLabelColor'?: string;
    /**
     * Sticker建立者的使用者名稱，檢視者所屬組織和Sticker建立者單位那方所屬組織相同時呈現Sticker建立者的使用者名稱，非建立者那方單位所屬組織為Null值
     * @type {string}
     * @memberof StickerBase
     */
    'creator'?: string;
    /**
     * Sticker建立者的大頭貼，檢視者所屬組織和Sticker建立者單位那方所屬組織相同時呈現Sticker建立者的大頭貼，非建立者那方單位所屬組織為Null值
     * @type {string}
     * @memberof StickerBase
     */
    'creatorAvatar'?: string;
    /**
     * 
     * @type {number}
     * @memberof StickerBase
     */
    'createDate'?: number;
}

export const StickerBaseAddToEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type StickerBaseAddToEnum = typeof StickerBaseAddToEnum[keyof typeof StickerBaseAddToEnum];
export const StickerBaseTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type StickerBaseTypeEnum = typeof StickerBaseTypeEnum[keyof typeof StickerBaseTypeEnum];

/**
 * 
 * @export
 * @interface ThreadBoard
 */
export interface ThreadBoard {
    /**
     * workflowStage清單
     * @type {Array<ThreadBoardWorkflowStageListInner>}
     * @memberof ThreadBoard
     */
    'workflowStageList': Array<ThreadBoardWorkflowStageListInner>;
}
/**
 * 
 * @export
 * @interface ThreadBoardQuery
 */
export interface ThreadBoardQuery {
    /**
     * by user 紀錄
     * @type {string}
     * @memberof ThreadBoardQuery
     */
    'search': string | null;
    /**
     * by OG 紀錄
     * @type {number}
     * @memberof ThreadBoardQuery
     */
    'sortBy': ThreadBoardQuerySortByEnum;
    /**
     * by OG 紀錄
     * @type {boolean}
     * @memberof ThreadBoardQuery
     */
    'onlyShowUnread': boolean;
    /**
     * 
     * @type {ThreadBoardQueryFilter}
     * @memberof ThreadBoardQuery
     */
    'filter': ThreadBoardQueryFilter;
}

export const ThreadBoardQuerySortByEnum = {
    NEWEST_TO_OLDEST: 1,
    OLDEST_TO_NEWEST: 2,
    CUSTOM: 3
} as const;

export type ThreadBoardQuerySortByEnum = typeof ThreadBoardQuerySortByEnum[keyof typeof ThreadBoardQuerySortByEnum];

/**
 * 
 * @export
 * @interface ThreadBoardQueryFilter
 */
export interface ThreadBoardQueryFilter {
    /**
     * 
     * @type {ThreadBoardQueryFilterCreatedBy}
     * @memberof ThreadBoardQueryFilter
     */
    'createdBy': ThreadBoardQueryFilterCreatedBy;
    /**
     * by OG 紀錄
     * @type {Array<number>}
     * @memberof ThreadBoardQueryFilter
     */
    'participantUserIdList': Array<number>;
    /**
     * 
     * @type {ThreadBoardQueryFilterStickerType}
     * @memberof ThreadBoardQueryFilter
     */
    'stickerType': ThreadBoardQueryFilterStickerType;
    /**
     * 
     * @type {string}
     * @memberof ThreadBoardQueryFilter
     */
    'createStartDate': string | null;
    /**
     * 
     * @type {string}
     * @memberof ThreadBoardQueryFilter
     */
    'createEndDate': string | null;
}
/**
 * 
 * @export
 * @interface ThreadBoardQueryFilterCreatedBy
 */
export interface ThreadBoardQueryFilterCreatedBy {
    /**
     * 
     * @type {boolean}
     * @memberof ThreadBoardQueryFilterCreatedBy
     */
    'createdByMe': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ThreadBoardQueryFilterCreatedBy
     */
    'createdByInternalUnit': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ThreadBoardQueryFilterCreatedBy
     */
    'createdByExternalUnit': boolean;
}
/**
 * 畫面上filter的Contain sticker type
 * @export
 * @interface ThreadBoardQueryFilterStickerType
 */
export interface ThreadBoardQueryFilterStickerType {
    /**
     * 
     * @type {boolean}
     * @memberof ThreadBoardQueryFilterStickerType
     */
    'internal': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ThreadBoardQueryFilterStickerType
     */
    'external': boolean;
}
/**
 * 
 * @export
 * @interface ThreadBoardWorkflowStageListInner
 */
export interface ThreadBoardWorkflowStageListInner {
    /**
     * workflowStage的Id
     * @type {number}
     * @memberof ThreadBoardWorkflowStageListInner
     */
    'workflowStageId': number;
    /**
     * workflowStage名稱
     * @type {string}
     * @memberof ThreadBoardWorkflowStageListInner
     */
    'workflowStageName': string;
    /**
     * 是否可被刪除
     * @type {boolean}
     * @memberof ThreadBoardWorkflowStageListInner
     */
    'canDelete': boolean;
    /**
     * 是否可被隱藏
     * @type {boolean}
     * @memberof ThreadBoardWorkflowStageListInner
     */
    'canHide'?: boolean;
    /**
     * 是否為預設的WorkflowStage
     * @type {boolean}
     * @memberof ThreadBoardWorkflowStageListInner
     */
    'isDefault': boolean;
    /**
     * 是否被隱藏
     * @type {boolean}
     * @memberof ThreadBoardWorkflowStageListInner
     */
    'isHidden': boolean;
    /**
     * DigitalThread清單
     * @type {Array<DigitalThreadBase>}
     * @memberof ThreadBoardWorkflowStageListInner
     */
    'digitalThreadList': Array<DigitalThreadBase>;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isVerify'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<UserOrganizationListInner>}
     * @memberof User
     */
    'organizationList'?: Array<UserOrganizationListInner>;
    /**
     * 是否顯示公告
     * @type {boolean}
     * @memberof User
     */
    'isShowAnnouncement'?: boolean;
    /**
     * 是否顯示New Feature Launch的Button
     * @type {boolean}
     * @memberof User
     */
    'isPromotingNewFeature'?: boolean;
}
/**
 * 
 * @export
 * @interface UserChangeLanguagePostRequest
 */
export interface UserChangeLanguagePostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserChangeLanguagePostRequest
     */
    'locale': string;
}
/**
 * 
 * @export
 * @interface UserChangePasswordPostRequest
 */
export interface UserChangePasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserChangePasswordPostRequest
     */
    'currentPassword': string;
    /**
     * 
     * @type {string}
     * @memberof UserChangePasswordPostRequest
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface UserFeedbackRemoveAttachmentPostRequest
 */
export interface UserFeedbackRemoveAttachmentPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserFeedbackRemoveAttachmentPostRequest
     */
    'tempFeedbackId': string;
    /**
     * 
     * @type {number}
     * @memberof UserFeedbackRemoveAttachmentPostRequest
     */
    'tempFeedbackAttachmentId': number;
}
/**
 * 
 * @export
 * @interface UserFeedbackSendPostRequest
 */
export interface UserFeedbackSendPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserFeedbackSendPostRequest
     */
    'tempFeedbackId': string;
    /**
     * 
     * @type {number}
     * @memberof UserFeedbackSendPostRequest
     */
    'category': UserFeedbackSendPostRequestCategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof UserFeedbackSendPostRequest
     */
    'comment': string;
}

export const UserFeedbackSendPostRequestCategoryEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type UserFeedbackSendPostRequestCategoryEnum = typeof UserFeedbackSendPostRequestCategoryEnum[keyof typeof UserFeedbackSendPostRequestCategoryEnum];

/**
 * 
 * @export
 * @interface UserFeedbackUploadAttachmentGetUploadUrlPost200Response
 */
export interface UserFeedbackUploadAttachmentGetUploadUrlPost200Response {
    /**
     * 
     * @type {UserFeedbackUploadAttachmentGetUploadUrlPost200ResponseResult}
     * @memberof UserFeedbackUploadAttachmentGetUploadUrlPost200Response
     */
    'result'?: UserFeedbackUploadAttachmentGetUploadUrlPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof UserFeedbackUploadAttachmentGetUploadUrlPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserFeedbackUploadAttachmentGetUploadUrlPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof UserFeedbackUploadAttachmentGetUploadUrlPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface UserFeedbackUploadAttachmentGetUploadUrlPost200ResponseResult
 */
export interface UserFeedbackUploadAttachmentGetUploadUrlPost200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof UserFeedbackUploadAttachmentGetUploadUrlPost200ResponseResult
     */
    'tempUploadId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserFeedbackUploadAttachmentGetUploadUrlPost200ResponseResult
     */
    'attachmentUploadUrl'?: string;
}
/**
 * 
 * @export
 * @interface UserFeedbackUploadAttachmentGetUploadUrlPostRequest
 */
export interface UserFeedbackUploadAttachmentGetUploadUrlPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserFeedbackUploadAttachmentGetUploadUrlPostRequest
     */
    'attachmentFileName': string;
}
/**
 * 
 * @export
 * @interface UserFeedbackUploadAttachmentPost200Response
 */
export interface UserFeedbackUploadAttachmentPost200Response {
    /**
     * 
     * @type {UserFeedbackUploadAttachmentPost200ResponseResult}
     * @memberof UserFeedbackUploadAttachmentPost200Response
     */
    'result'?: UserFeedbackUploadAttachmentPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof UserFeedbackUploadAttachmentPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserFeedbackUploadAttachmentPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof UserFeedbackUploadAttachmentPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface UserFeedbackUploadAttachmentPost200ResponseResult
 */
export interface UserFeedbackUploadAttachmentPost200ResponseResult {
    /**
     * 
     * @type {Array<UserFeedbackUploadAttachmentPost200ResponseResultFeedbackAttachmentListInner>}
     * @memberof UserFeedbackUploadAttachmentPost200ResponseResult
     */
    'feedbackAttachmentList'?: Array<UserFeedbackUploadAttachmentPost200ResponseResultFeedbackAttachmentListInner>;
}
/**
 * 
 * @export
 * @interface UserFeedbackUploadAttachmentPost200ResponseResultFeedbackAttachmentListInner
 */
export interface UserFeedbackUploadAttachmentPost200ResponseResultFeedbackAttachmentListInner {
    /**
     * 
     * @type {number}
     * @memberof UserFeedbackUploadAttachmentPost200ResponseResultFeedbackAttachmentListInner
     */
    'tempFeedbackAttachmentId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserFeedbackUploadAttachmentPost200ResponseResultFeedbackAttachmentListInner
     */
    'fileName'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserFeedbackUploadAttachmentPost200ResponseResultFeedbackAttachmentListInner
     */
    'fileSize'?: number;
}
/**
 * 
 * @export
 * @interface UserFeedbackUploadAttachmentPostRequest
 */
export interface UserFeedbackUploadAttachmentPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserFeedbackUploadAttachmentPostRequest
     */
    'tempFeedbackId': string;
    /**
     * 
     * @type {string}
     * @memberof UserFeedbackUploadAttachmentPostRequest
     */
    'tempUploadId': string;
    /**
     * 
     * @type {string}
     * @memberof UserFeedbackUploadAttachmentPostRequest
     */
    'attachmentFileName': string;
}
/**
 * 
 * @export
 * @interface UserForgotPasswordResetPasswordPostRequest
 */
export interface UserForgotPasswordResetPasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserForgotPasswordResetPasswordPostRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserForgotPasswordResetPasswordPostRequest
     */
    'verifyToken': string;
}
/**
 * 
 * @export
 * @interface UserForgotPasswordSendEmailPostRequest
 */
export interface UserForgotPasswordSendEmailPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserForgotPasswordSendEmailPostRequest
     */
    'email': string;
    /**
     * 
     * @type {number}
     * @memberof UserForgotPasswordSendEmailPostRequest
     */
    'platform': UserForgotPasswordSendEmailPostRequestPlatformEnum;
}

export const UserForgotPasswordSendEmailPostRequestPlatformEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type UserForgotPasswordSendEmailPostRequestPlatformEnum = typeof UserForgotPasswordSendEmailPostRequestPlatformEnum[keyof typeof UserForgotPasswordSendEmailPostRequestPlatformEnum];

/**
 * 
 * @export
 * @interface UserForgotPasswordVerifyPost200Response
 */
export interface UserForgotPasswordVerifyPost200Response {
    /**
     * 
     * @type {UserForgotPasswordVerifyPost200ResponseResult}
     * @memberof UserForgotPasswordVerifyPost200Response
     */
    'result'?: UserForgotPasswordVerifyPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof UserForgotPasswordVerifyPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserForgotPasswordVerifyPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof UserForgotPasswordVerifyPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface UserForgotPasswordVerifyPost200ResponseResult
 */
export interface UserForgotPasswordVerifyPost200ResponseResult {
    /**
     * 
     * @type {string}
     * @memberof UserForgotPasswordVerifyPost200ResponseResult
     */
    'verifyToken'?: string;
}
/**
 * 
 * @export
 * @interface UserForgotPasswordVerifyPostRequest
 */
export interface UserForgotPasswordVerifyPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserForgotPasswordVerifyPostRequest
     */
    'verifyCode': string;
}
/**
 * 
 * @export
 * @interface UserGet200Response
 */
export interface UserGet200Response {
    /**
     * 
     * @type {UserGet200ResponseResult}
     * @memberof UserGet200Response
     */
    'result'?: UserGet200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof UserGet200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserGet200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof UserGet200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface UserGet200ResponseResult
 */
export interface UserGet200ResponseResult {
    /**
     * 
     * @type {User}
     * @memberof UserGet200ResponseResult
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface UserGetOrgListPost200Response
 */
export interface UserGetOrgListPost200Response {
    /**
     * 
     * @type {UserGetOrgListPost200ResponseResult}
     * @memberof UserGetOrgListPost200Response
     */
    'result'?: UserGetOrgListPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof UserGetOrgListPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserGetOrgListPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof UserGetOrgListPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface UserGetOrgListPost200ResponseResult
 */
export interface UserGetOrgListPost200ResponseResult {
    /**
     * 
     * @type {UserGetOrgListPost200ResponseResultUser}
     * @memberof UserGetOrgListPost200ResponseResult
     */
    'user'?: UserGetOrgListPost200ResponseResultUser;
}
/**
 * 
 * @export
 * @interface UserGetOrgListPost200ResponseResultUser
 */
export interface UserGetOrgListPost200ResponseResultUser {
    /**
     * 
     * @type {Array<UserGetOrgListPost200ResponseResultUserOrganizationListInner>}
     * @memberof UserGetOrgListPost200ResponseResultUser
     */
    'organizationList'?: Array<UserGetOrgListPost200ResponseResultUserOrganizationListInner>;
}
/**
 * 
 * @export
 * @interface UserGetOrgListPost200ResponseResultUserOrganizationListInner
 */
export interface UserGetOrgListPost200ResponseResultUserOrganizationListInner {
    /**
     * 
     * @type {number}
     * @memberof UserGetOrgListPost200ResponseResultUserOrganizationListInner
     */
    'orgId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserGetOrgListPost200ResponseResultUserOrganizationListInner
     */
    'logo'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserGetOrgListPost200ResponseResultUserOrganizationListInner
     */
    'orgName'?: string;
    /**
     * 
     * @type {Array<UserGetOrgListPost200ResponseResultUserOrganizationListInnerMemberListInner>}
     * @memberof UserGetOrgListPost200ResponseResultUserOrganizationListInner
     */
    'memberList'?: Array<UserGetOrgListPost200ResponseResultUserOrganizationListInnerMemberListInner>;
}
/**
 * 
 * @export
 * @interface UserGetOrgListPost200ResponseResultUserOrganizationListInnerMemberListInner
 */
export interface UserGetOrgListPost200ResponseResultUserOrganizationListInnerMemberListInner {
    /**
     * 
     * @type {string}
     * @memberof UserGetOrgListPost200ResponseResultUserOrganizationListInnerMemberListInner
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserGetOrgListPost200ResponseResultUserOrganizationListInnerMemberListInner
     */
    'avatar'?: string;
}
/**
 * 
 * @export
 * @interface UserOldUserResetPasswordPostRequest
 */
export interface UserOldUserResetPasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserOldUserResetPasswordPostRequest
     */
    'password': string;
    /**
     * Old platform users use this token to reset their passwords
     * @type {string}
     * @memberof UserOldUserResetPasswordPostRequest
     */
    'oldUserVerifyToken': string;
}
/**
 * 
 * @export
 * @interface UserOrganizationListInner
 */
export interface UserOrganizationListInner {
    /**
     * 
     * @type {number}
     * @memberof UserOrganizationListInner
     */
    'orgId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserOrganizationListInner
     */
    'logo'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOrganizationListInner
     */
    'orgName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOrganizationListInner
     */
    'orgNo'?: string;
    /**
     * 
     * @type {Array<UserGetOrgListPost200ResponseResultUserOrganizationListInnerMemberListInner>}
     * @memberof UserOrganizationListInner
     */
    'memberList'?: Array<UserGetOrgListPost200ResponseResultUserOrganizationListInnerMemberListInner>;
    /**
     * 
     * @type {Array<UserOrganizationListInnerGroupListInner>}
     * @memberof UserOrganizationListInner
     */
    'groupList'?: Array<UserOrganizationListInnerGroupListInner>;
}
/**
 * 
 * @export
 * @interface UserOrganizationListInnerGroupListInner
 */
export interface UserOrganizationListInnerGroupListInner {
    /**
     * 
     * @type {number}
     * @memberof UserOrganizationListInnerGroupListInner
     */
    'groupId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserOrganizationListInnerGroupListInner
     */
    'groupName'?: string;
}
/**
 * 
 * @export
 * @interface UserResendVerifyEmailPostRequest
 */
export interface UserResendVerifyEmailPostRequest {
    /**
     * 
     * @type {number}
     * @memberof UserResendVerifyEmailPostRequest
     */
    'platform': UserResendVerifyEmailPostRequestPlatformEnum;
    /**
     * 
     * @type {number}
     * @memberof UserResendVerifyEmailPostRequest
     */
    'signupSourceType': UserResendVerifyEmailPostRequestSignupSourceTypeEnum;
}

export const UserResendVerifyEmailPostRequestPlatformEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type UserResendVerifyEmailPostRequestPlatformEnum = typeof UserResendVerifyEmailPostRequestPlatformEnum[keyof typeof UserResendVerifyEmailPostRequestPlatformEnum];
export const UserResendVerifyEmailPostRequestSignupSourceTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type UserResendVerifyEmailPostRequestSignupSourceTypeEnum = typeof UserResendVerifyEmailPostRequestSignupSourceTypeEnum[keyof typeof UserResendVerifyEmailPostRequestSignupSourceTypeEnum];

/**
 * 
 * @export
 * @interface UserUpdatePostRequest
 */
export interface UserUpdatePostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserUpdatePostRequest
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdatePostRequest
     */
    'lastName': string;
}
/**
 * 
 * @export
 * @interface UserVerifyPasswordPost200Response
 */
export interface UserVerifyPasswordPost200Response {
    /**
     * 
     * @type {UserVerifyPasswordPost200ResponseResult}
     * @memberof UserVerifyPasswordPost200Response
     */
    'result'?: UserVerifyPasswordPost200ResponseResult;
    /**
     * 
     * @type {boolean}
     * @memberof UserVerifyPasswordPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserVerifyPasswordPost200Response
     */
    'code'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof UserVerifyPasswordPost200Response
     */
    'message'?: object | null;
}
/**
 * 
 * @export
 * @interface UserVerifyPasswordPost200ResponseResult
 */
export interface UserVerifyPasswordPost200ResponseResult {
    /**
     * 
     * @type {boolean}
     * @memberof UserVerifyPasswordPost200ResponseResult
     */
    'isVerify'?: boolean;
}
/**
 * 
 * @export
 * @interface UserVerifyPasswordPostRequest
 */
export interface UserVerifyPasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserVerifyPasswordPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserVerifyPostRequest
 */
export interface UserVerifyPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UserVerifyPostRequest
     */
    'verifyCode': string;
}
/**
 * 
 * @export
 * @interface ValueAddedService
 */
export interface ValueAddedService {
    /**
     * 
     * @type {ValueAddedServiceMade2flow}
     * @memberof ValueAddedService
     */
    'made2flow'?: ValueAddedServiceMade2flow;
}
/**
 * 
 * @export
 * @interface ValueAddedServiceMade2flow
 */
export interface ValueAddedServiceMade2flow {
    /**
     * 
     * @type {string}
     * @memberof ValueAddedServiceMade2flow
     */
    'renewDate'?: string;
    /**
     * 
     * @type {number}
     * @memberof ValueAddedServiceMade2flow
     */
    'status'?: ValueAddedServiceMade2flowStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof ValueAddedServiceMade2flow
     */
    'planType'?: ValueAddedServiceMade2flowPlanTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ValueAddedServiceMade2flow
     */
    'completeQty'?: number;
    /**
     * 
     * @type {number}
     * @memberof ValueAddedServiceMade2flow
     */
    'totalQty'?: number;
    /**
     * 
     * @type {number}
     * @memberof ValueAddedServiceMade2flow
     */
    'unFilledCertificationQty'?: number;
    /**
     * 
     * @type {number}
     * @memberof ValueAddedServiceMade2flow
     */
    'subscribeDate'?: number;
}

export const ValueAddedServiceMade2flowStatusEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ValueAddedServiceMade2flowStatusEnum = typeof ValueAddedServiceMade2flowStatusEnum[keyof typeof ValueAddedServiceMade2flowStatusEnum];
export const ValueAddedServiceMade2flowPlanTypeEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type ValueAddedServiceMade2flowPlanTypeEnum = typeof ValueAddedServiceMade2flowPlanTypeEnum[keyof typeof ValueAddedServiceMade2flowPlanTypeEnum];

/**
 * 
 * @export
 * @interface WorkflowStage
 */
export interface WorkflowStage {
    /**
     * workflowStage的Id
     * @type {number}
     * @memberof WorkflowStage
     */
    'workflowStageId': number;
    /**
     * workflowStage名稱
     * @type {string}
     * @memberof WorkflowStage
     */
    'workflowStageName': string;
    /**
     * 是否可被刪除
     * @type {boolean}
     * @memberof WorkflowStage
     */
    'canDelete': boolean;
    /**
     * 是否可被隱藏
     * @type {boolean}
     * @memberof WorkflowStage
     */
    'canHide'?: boolean;
    /**
     * 是否為預設的WorkflowStage
     * @type {boolean}
     * @memberof WorkflowStage
     */
    'isDefault': boolean;
    /**
     * 是否被隱藏
     * @type {boolean}
     * @memberof WorkflowStage
     */
    'isHidden': boolean;
    /**
     * DigitalThread清單
     * @type {Array<DigitalThreadBase>}
     * @memberof WorkflowStage
     */
    'digitalThreadList': Array<DigitalThreadBase>;
}
/**
 * 
 * @export
 * @interface WorkspaceCollection
 */
export interface WorkspaceCollection {
    /**
     * 
     * @type {number}
     * @memberof WorkspaceCollection
     */
    'workspaceNodeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceCollection
     */
    'workspaceNodeLocation'?: WorkspaceCollectionWorkspaceNodeLocationEnum;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceCollection
     */
    'collectionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceCollection
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceCollection
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceCollection
     */
    'trendBoardCoverImg'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceCollection
     */
    'trendBoardDisplayFileName'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceCollection
     */
    'trendBoardUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceCollection
     */
    'isPublic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceCollection
     */
    'isCanShared'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceCollection
     */
    'isCanClone'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceCollection
     */
    'isCanDownloadU3M'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceCollection
     */
    'publicDate'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceCollection
     */
    'createDate'?: number;
    /**
     * 
     * @type {Array<BreadcrumbListInner>}
     * @memberof WorkspaceCollection
     */
    'breadcrumbList'?: Array<BreadcrumbListInner>;
    /**
     * 
     * @type {Array<ChildCollectionListInner>}
     * @memberof WorkspaceCollection
     */
    'childCollectionList'?: Array<ChildCollectionListInner>;
    /**
     * 
     * @type {Array<ChildMaterialListInner>}
     * @memberof WorkspaceCollection
     */
    'childMaterialList'?: Array<ChildMaterialListInner>;
}

export const WorkspaceCollectionWorkspaceNodeLocationEnum = {
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type WorkspaceCollectionWorkspaceNodeLocationEnum = typeof WorkspaceCollectionWorkspaceNodeLocationEnum[keyof typeof WorkspaceCollectionWorkspaceNodeLocationEnum];

/**
 * 
 * @export
 * @interface WorkspaceFilter
 */
export interface WorkspaceFilter {
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceFilter
     */
    'hasPrice'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceFilter
     */
    'hasU3M'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceFilter
     */
    'made2Flow'?: WorkspaceFilterMade2FlowEnum;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceFilter
     */
    'category'?: string;
    /**
     * 
     * @type {Array<FilterContentListInner>}
     * @memberof WorkspaceFilter
     */
    'contentList'?: Array<FilterContentListInner>;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceFilter
     */
    'pattern'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceFilter
     */
    'color'?: string;
    /**
     * 
     * @type {FilterWidth}
     * @memberof WorkspaceFilter
     */
    'width'?: FilterWidth;
    /**
     * 
     * @type {FilterWeightGsm}
     * @memberof WorkspaceFilter
     */
    'weightGsm'?: FilterWeightGsm;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceFilter
     */
    'warpDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceFilter
     */
    'weftDensity'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceFilter
     */
    'wovenWarpYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceFilter
     */
    'wovenWeftYarnCount'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceFilter
     */
    'knitYarnCount'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkspaceFilter
     */
    'finishList'?: Array<string>;
    /**
     * 
     * @type {FilterInventory}
     * @memberof WorkspaceFilter
     */
    'inventory'?: FilterInventory;
}

export const WorkspaceFilterMade2FlowEnum = {
    NUMBER_null: null,
    NUMBER_null: null,
    NUMBER_null: null
} as const;

export type WorkspaceFilterMade2FlowEnum = typeof WorkspaceFilterMade2FlowEnum[keyof typeof WorkspaceFilterMade2FlowEnum];


/**
 * CodeApi - axios parameter creator
 * @export
 */
export const CodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取得國家 code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeCountryGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/code/country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得filter選項
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeFilterOptionGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/code/filter-option`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得組織種類 code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeOrgCategoryListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/code/org-category-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得pantone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codePantoneGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/code/pantone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得角色轉換限制 code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeRoleLimitTableGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/code/role-limit-table`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得角色 code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeRoleListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/code/role-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得角色與權限對照表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeRolePermissionGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/code/role-permission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CodeApi - functional programming interface
 * @export
 */
export const CodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 取得國家 code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeCountryGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeCountryGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeCountryGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得filter選項
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeFilterOptionGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeFilterOptionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeFilterOptionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得組織種類 code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeOrgCategoryListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeOrgCategoryListGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeOrgCategoryListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得pantone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codePantoneGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodePantoneGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codePantoneGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得角色轉換限制 code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeRoleLimitTableGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRoleLimitTableGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeRoleLimitTableGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得角色 code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeRoleListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRoleListGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeRoleListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得角色與權限對照表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeRolePermissionGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeRolePermissionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CodeApi - factory interface
 * @export
 */
export const CodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CodeApiFp(configuration)
    return {
        /**
         * 
         * @summary 取得國家 code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeCountryGet(options?: any): AxiosPromise<CodeCountryGet200Response> {
            return localVarFp.codeCountryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得filter選項
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeFilterOptionGet(options?: any): AxiosPromise<CodeFilterOptionGet200Response> {
            return localVarFp.codeFilterOptionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得組織種類 code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeOrgCategoryListGet(options?: any): AxiosPromise<CodeOrgCategoryListGet200Response> {
            return localVarFp.codeOrgCategoryListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得pantone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codePantoneGet(options?: any): AxiosPromise<CodePantoneGet200Response> {
            return localVarFp.codePantoneGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得角色轉換限制 code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeRoleLimitTableGet(options?: any): AxiosPromise<CodeRoleLimitTableGet200Response> {
            return localVarFp.codeRoleLimitTableGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得角色 code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeRoleListGet(options?: any): AxiosPromise<CodeRoleListGet200Response> {
            return localVarFp.codeRoleListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得角色與權限對照表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeRolePermissionGet(options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.codeRolePermissionGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CodeApi - object-oriented interface
 * @export
 * @class CodeApi
 * @extends {BaseAPI}
 */
export class CodeApi extends BaseAPI {
    /**
     * 
     * @summary 取得國家 code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public codeCountryGet(options?: AxiosRequestConfig) {
        return CodeApiFp(this.configuration).codeCountryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得filter選項
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public codeFilterOptionGet(options?: AxiosRequestConfig) {
        return CodeApiFp(this.configuration).codeFilterOptionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得組織種類 code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public codeOrgCategoryListGet(options?: AxiosRequestConfig) {
        return CodeApiFp(this.configuration).codeOrgCategoryListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得pantone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public codePantoneGet(options?: AxiosRequestConfig) {
        return CodeApiFp(this.configuration).codePantoneGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得角色轉換限制 code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public codeRoleLimitTableGet(options?: AxiosRequestConfig) {
        return CodeApiFp(this.configuration).codeRoleLimitTableGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得角色 code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public codeRoleListGet(options?: AxiosRequestConfig) {
        return CodeApiFp(this.configuration).codeRoleListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得角色與權限對照表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public codeRolePermissionGet(options?: AxiosRequestConfig) {
        return CodeApiFp(this.configuration).codeRolePermissionGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DashboardApi - axios parameter creator
 * @export
 */
export const DashboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 可在使用者未登入狀態下紀錄
         * @summary 新增下載記錄
         * @param {CreateDownloadLogRequest} [createDownloadLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDownloadLog: async (createDownloadLogRequest?: CreateDownloadLogRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dashboard/download-log/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDownloadLogRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 可在使用者未登入狀態下紀錄
         * @summary 新增開啟EmbedPage記錄
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmbedPageLog: async (shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dashboard/embed-page-log/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareGetReceivedPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 可在使用者未登入狀態下紀錄
         * @summary 新增開啟ReceivePage記錄
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReceivePageLog: async (shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dashboard/receive-page-log/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareGetReceivedPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 可在使用者未登入狀態下紀錄
         * @summary 新增3DViewer執行記錄
         * @param {CreateViewerLogRequest} [createViewerLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createViewerLog: async (createViewerLogRequest?: CreateViewerLogRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dashboard/viewer-log/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createViewerLogRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得Dashboard資訊
         * @param {GetDashboardRequest} [getDashboardRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboard: async (getDashboardRequest?: GetDashboardRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dashboard/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getDashboardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardApi - functional programming interface
 * @export
 */
export const DashboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardApiAxiosParamCreator(configuration)
    return {
        /**
         * 可在使用者未登入狀態下紀錄
         * @summary 新增下載記錄
         * @param {CreateDownloadLogRequest} [createDownloadLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDownloadLog(createDownloadLogRequest?: CreateDownloadLogRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDownloadLog(createDownloadLogRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 可在使用者未登入狀態下紀錄
         * @summary 新增開啟EmbedPage記錄
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmbedPageLog(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmbedPageLog(shareGetReceivedPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 可在使用者未登入狀態下紀錄
         * @summary 新增開啟ReceivePage記錄
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReceivePageLog(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReceivePageLog(shareGetReceivedPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 可在使用者未登入狀態下紀錄
         * @summary 新增3DViewer執行記錄
         * @param {CreateViewerLogRequest} [createViewerLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createViewerLog(createViewerLogRequest?: CreateViewerLogRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createViewerLog(createViewerLogRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得Dashboard資訊
         * @param {GetDashboardRequest} [getDashboardRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDashboard(getDashboardRequest?: GetDashboardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDashboard200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDashboard(getDashboardRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DashboardApi - factory interface
 * @export
 */
export const DashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardApiFp(configuration)
    return {
        /**
         * 可在使用者未登入狀態下紀錄
         * @summary 新增下載記錄
         * @param {CreateDownloadLogRequest} [createDownloadLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDownloadLog(createDownloadLogRequest?: CreateDownloadLogRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.createDownloadLog(createDownloadLogRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 可在使用者未登入狀態下紀錄
         * @summary 新增開啟EmbedPage記錄
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmbedPageLog(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.createEmbedPageLog(shareGetReceivedPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 可在使用者未登入狀態下紀錄
         * @summary 新增開啟ReceivePage記錄
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReceivePageLog(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.createReceivePageLog(shareGetReceivedPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 可在使用者未登入狀態下紀錄
         * @summary 新增3DViewer執行記錄
         * @param {CreateViewerLogRequest} [createViewerLogRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createViewerLog(createViewerLogRequest?: CreateViewerLogRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.createViewerLog(createViewerLogRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得Dashboard資訊
         * @param {GetDashboardRequest} [getDashboardRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboard(getDashboardRequest?: GetDashboardRequest, options?: any): AxiosPromise<GetDashboard200Response> {
            return localVarFp.getDashboard(getDashboardRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DashboardApi - object-oriented interface
 * @export
 * @class DashboardApi
 * @extends {BaseAPI}
 */
export class DashboardApi extends BaseAPI {
    /**
     * 可在使用者未登入狀態下紀錄
     * @summary 新增下載記錄
     * @param {CreateDownloadLogRequest} [createDownloadLogRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public createDownloadLog(createDownloadLogRequest?: CreateDownloadLogRequest, options?: AxiosRequestConfig) {
        return DashboardApiFp(this.configuration).createDownloadLog(createDownloadLogRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 可在使用者未登入狀態下紀錄
     * @summary 新增開啟EmbedPage記錄
     * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public createEmbedPageLog(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: AxiosRequestConfig) {
        return DashboardApiFp(this.configuration).createEmbedPageLog(shareGetReceivedPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 可在使用者未登入狀態下紀錄
     * @summary 新增開啟ReceivePage記錄
     * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public createReceivePageLog(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: AxiosRequestConfig) {
        return DashboardApiFp(this.configuration).createReceivePageLog(shareGetReceivedPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 可在使用者未登入狀態下紀錄
     * @summary 新增3DViewer執行記錄
     * @param {CreateViewerLogRequest} [createViewerLogRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public createViewerLog(createViewerLogRequest?: CreateViewerLogRequest, options?: AxiosRequestConfig) {
        return DashboardApiFp(this.configuration).createViewerLog(createViewerLogRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得Dashboard資訊
     * @param {GetDashboardRequest} [getDashboardRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public getDashboard(getDashboardRequest?: GetDashboardRequest, options?: AxiosRequestConfig) {
        return DashboardApiFp(this.configuration).getDashboard(getDashboardRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DigitalThreadApi - axios parameter creator
 * @export
 */
export const DigitalThreadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 變更 Digital Thread 的 Workflow Stage
         * @param {ChangeDigitalThreadWorkflowStageRequest} changeDigitalThreadWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDigitalThreadWorkflowStage: async (changeDigitalThreadWorkflowStageRequest: ChangeDigitalThreadWorkflowStageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeDigitalThreadWorkflowStageRequest' is not null or undefined
            assertParamExists('changeDigitalThreadWorkflowStage', 'changeDigitalThreadWorkflowStageRequest', changeDigitalThreadWorkflowStageRequest)
            const localVarPath = `/digital-thread/update/workflow-stage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeDigitalThreadWorkflowStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 建立布片的 Digital Thread
         * @param {DigitalThreadCreatePostRequest} [digitalThreadCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadCreatePost: async (digitalThreadCreatePostRequest?: DigitalThreadCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/digital-thread/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(digitalThreadCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得布片的 Digital Thread 清單
         * @param {DigitalThreadGetListPostRequest} [digitalThreadGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadGetListPost: async (digitalThreadGetListPostRequest?: DigitalThreadGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/digital-thread/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(digitalThreadGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Digital Thread 中的material明細
         * @param {DigitalThreadGetMaterialPostRequest} [digitalThreadGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadGetMaterialPost: async (digitalThreadGetMaterialPostRequest?: DigitalThreadGetMaterialPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/digital-thread/get-material`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(digitalThreadGetMaterialPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得布片的 Digital Thread 資訊
         * @param {DigitalThreadGetPostRequest} [digitalThreadGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadGetPost: async (digitalThreadGetPostRequest?: DigitalThreadGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/digital-thread/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(digitalThreadGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 建立布片的 Digital Thread的sticker底下的child Sticker
         * @param {DigitalThreadStickerChildStickerCreatePostRequest} [digitalThreadStickerChildStickerCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadStickerChildStickerCreatePost: async (digitalThreadStickerChildStickerCreatePostRequest?: DigitalThreadStickerChildStickerCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/digital-thread/sticker/child-sticker/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(digitalThreadStickerChildStickerCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 建立布片的 Digital Thread的Sticker
         * @param {DigitalThreadStickerCreatePostRequest} [digitalThreadStickerCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadStickerCreatePost: async (digitalThreadStickerCreatePostRequest?: DigitalThreadStickerCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/digital-thread/sticker/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(digitalThreadStickerCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 檢視布片的Digital Thread的Sticker的child sticker
         * @param {DigitalThreadStickerStarPostRequest} [digitalThreadStickerStarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadStickerReadChildStickerPost: async (digitalThreadStickerStarPostRequest?: DigitalThreadStickerStarPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/digital-thread/sticker/read-child-sticker`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(digitalThreadStickerStarPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 對布片的 Digital Thread的Sticker 標記Star
         * @param {DigitalThreadStickerStarPostRequest} [digitalThreadStickerStarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadStickerStarPost: async (digitalThreadStickerStarPostRequest?: DigitalThreadStickerStarPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/digital-thread/sticker/star`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(digitalThreadStickerStarPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 對布片的 Digital Thread的Sticker 移除標記Star
         * @param {DigitalThreadStickerStarPostRequest} [digitalThreadStickerStarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadStickerUnstarPost: async (digitalThreadStickerStarPostRequest?: DigitalThreadStickerStarPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/digital-thread/sticker/unstar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(digitalThreadStickerStarPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改布片的 Digital Thread的Sticker的tag
         * @param {DigitalThreadStickerUpdateTagPostRequest} [digitalThreadStickerUpdateTagPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadStickerUpdateTagPost: async (digitalThreadStickerUpdateTagPostRequest?: DigitalThreadStickerUpdateTagPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/digital-thread/sticker/update/tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(digitalThreadStickerUpdateTagPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改布片的 Digital Thread的Name
         * @param {DigitalThreadUpdateDigitalThreadNamePostRequest} [digitalThreadUpdateDigitalThreadNamePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadUpdateDigitalThreadNamePost: async (digitalThreadUpdateDigitalThreadNamePostRequest?: DigitalThreadUpdateDigitalThreadNamePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/digital-thread/update/digital-thread-name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(digitalThreadUpdateDigitalThreadNamePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得該單位(組織或團隊)底下的 Workflow Stage 清單(不含hide)
         * @param {GetDigitalThreadWorkflowStageOptionsRequest} getDigitalThreadWorkflowStageOptionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDigitalThreadWorkflowStageOptions: async (getDigitalThreadWorkflowStageOptionsRequest: GetDigitalThreadWorkflowStageOptionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getDigitalThreadWorkflowStageOptionsRequest' is not null or undefined
            assertParamExists('getDigitalThreadWorkflowStageOptions', 'getDigitalThreadWorkflowStageOptionsRequest', getDigitalThreadWorkflowStageOptionsRequest)
            const localVarPath = `/digital-thread/workflow-stage/get-options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getDigitalThreadWorkflowStageOptionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DigitalThreadApi - functional programming interface
 * @export
 */
export const DigitalThreadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DigitalThreadApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 變更 Digital Thread 的 Workflow Stage
         * @param {ChangeDigitalThreadWorkflowStageRequest} changeDigitalThreadWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeDigitalThreadWorkflowStage(changeDigitalThreadWorkflowStageRequest: ChangeDigitalThreadWorkflowStageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DigitalThreadCreatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeDigitalThreadWorkflowStage(changeDigitalThreadWorkflowStageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 建立布片的 Digital Thread
         * @param {DigitalThreadCreatePostRequest} [digitalThreadCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async digitalThreadCreatePost(digitalThreadCreatePostRequest?: DigitalThreadCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DigitalThreadCreatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.digitalThreadCreatePost(digitalThreadCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得布片的 Digital Thread 清單
         * @param {DigitalThreadGetListPostRequest} [digitalThreadGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async digitalThreadGetListPost(digitalThreadGetListPostRequest?: DigitalThreadGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DigitalThreadGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.digitalThreadGetListPost(digitalThreadGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Digital Thread 中的material明細
         * @param {DigitalThreadGetMaterialPostRequest} [digitalThreadGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async digitalThreadGetMaterialPost(digitalThreadGetMaterialPostRequest?: DigitalThreadGetMaterialPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.digitalThreadGetMaterialPost(digitalThreadGetMaterialPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得布片的 Digital Thread 資訊
         * @param {DigitalThreadGetPostRequest} [digitalThreadGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async digitalThreadGetPost(digitalThreadGetPostRequest?: DigitalThreadGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DigitalThreadCreatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.digitalThreadGetPost(digitalThreadGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 建立布片的 Digital Thread的sticker底下的child Sticker
         * @param {DigitalThreadStickerChildStickerCreatePostRequest} [digitalThreadStickerChildStickerCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async digitalThreadStickerChildStickerCreatePost(digitalThreadStickerChildStickerCreatePostRequest?: DigitalThreadStickerChildStickerCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.digitalThreadStickerChildStickerCreatePost(digitalThreadStickerChildStickerCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 建立布片的 Digital Thread的Sticker
         * @param {DigitalThreadStickerCreatePostRequest} [digitalThreadStickerCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async digitalThreadStickerCreatePost(digitalThreadStickerCreatePostRequest?: DigitalThreadStickerCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.digitalThreadStickerCreatePost(digitalThreadStickerCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 檢視布片的Digital Thread的Sticker的child sticker
         * @param {DigitalThreadStickerStarPostRequest} [digitalThreadStickerStarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async digitalThreadStickerReadChildStickerPost(digitalThreadStickerStarPostRequest?: DigitalThreadStickerStarPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.digitalThreadStickerReadChildStickerPost(digitalThreadStickerStarPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 對布片的 Digital Thread的Sticker 標記Star
         * @param {DigitalThreadStickerStarPostRequest} [digitalThreadStickerStarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async digitalThreadStickerStarPost(digitalThreadStickerStarPostRequest?: DigitalThreadStickerStarPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.digitalThreadStickerStarPost(digitalThreadStickerStarPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 對布片的 Digital Thread的Sticker 移除標記Star
         * @param {DigitalThreadStickerStarPostRequest} [digitalThreadStickerStarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async digitalThreadStickerUnstarPost(digitalThreadStickerStarPostRequest?: DigitalThreadStickerStarPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.digitalThreadStickerUnstarPost(digitalThreadStickerStarPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 修改布片的 Digital Thread的Sticker的tag
         * @param {DigitalThreadStickerUpdateTagPostRequest} [digitalThreadStickerUpdateTagPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async digitalThreadStickerUpdateTagPost(digitalThreadStickerUpdateTagPostRequest?: DigitalThreadStickerUpdateTagPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.digitalThreadStickerUpdateTagPost(digitalThreadStickerUpdateTagPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 修改布片的 Digital Thread的Name
         * @param {DigitalThreadUpdateDigitalThreadNamePostRequest} [digitalThreadUpdateDigitalThreadNamePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async digitalThreadUpdateDigitalThreadNamePost(digitalThreadUpdateDigitalThreadNamePostRequest?: DigitalThreadUpdateDigitalThreadNamePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.digitalThreadUpdateDigitalThreadNamePost(digitalThreadUpdateDigitalThreadNamePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得該單位(組織或團隊)底下的 Workflow Stage 清單(不含hide)
         * @param {GetDigitalThreadWorkflowStageOptionsRequest} getDigitalThreadWorkflowStageOptionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDigitalThreadWorkflowStageOptions(getDigitalThreadWorkflowStageOptionsRequest: GetDigitalThreadWorkflowStageOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDigitalThreadWorkflowStageOptions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDigitalThreadWorkflowStageOptions(getDigitalThreadWorkflowStageOptionsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DigitalThreadApi - factory interface
 * @export
 */
export const DigitalThreadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DigitalThreadApiFp(configuration)
    return {
        /**
         * 
         * @summary 變更 Digital Thread 的 Workflow Stage
         * @param {ChangeDigitalThreadWorkflowStageRequest} changeDigitalThreadWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDigitalThreadWorkflowStage(changeDigitalThreadWorkflowStageRequest: ChangeDigitalThreadWorkflowStageRequest, options?: any): AxiosPromise<DigitalThreadCreatePost200Response> {
            return localVarFp.changeDigitalThreadWorkflowStage(changeDigitalThreadWorkflowStageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 建立布片的 Digital Thread
         * @param {DigitalThreadCreatePostRequest} [digitalThreadCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadCreatePost(digitalThreadCreatePostRequest?: DigitalThreadCreatePostRequest, options?: any): AxiosPromise<DigitalThreadCreatePost200Response> {
            return localVarFp.digitalThreadCreatePost(digitalThreadCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得布片的 Digital Thread 清單
         * @param {DigitalThreadGetListPostRequest} [digitalThreadGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadGetListPost(digitalThreadGetListPostRequest?: DigitalThreadGetListPostRequest, options?: any): AxiosPromise<DigitalThreadGetListPost200Response> {
            return localVarFp.digitalThreadGetListPost(digitalThreadGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Digital Thread 中的material明細
         * @param {DigitalThreadGetMaterialPostRequest} [digitalThreadGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadGetMaterialPost(digitalThreadGetMaterialPostRequest?: DigitalThreadGetMaterialPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.digitalThreadGetMaterialPost(digitalThreadGetMaterialPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得布片的 Digital Thread 資訊
         * @param {DigitalThreadGetPostRequest} [digitalThreadGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadGetPost(digitalThreadGetPostRequest?: DigitalThreadGetPostRequest, options?: any): AxiosPromise<DigitalThreadCreatePost200Response> {
            return localVarFp.digitalThreadGetPost(digitalThreadGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 建立布片的 Digital Thread的sticker底下的child Sticker
         * @param {DigitalThreadStickerChildStickerCreatePostRequest} [digitalThreadStickerChildStickerCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadStickerChildStickerCreatePost(digitalThreadStickerChildStickerCreatePostRequest?: DigitalThreadStickerChildStickerCreatePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.digitalThreadStickerChildStickerCreatePost(digitalThreadStickerChildStickerCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 建立布片的 Digital Thread的Sticker
         * @param {DigitalThreadStickerCreatePostRequest} [digitalThreadStickerCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadStickerCreatePost(digitalThreadStickerCreatePostRequest?: DigitalThreadStickerCreatePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.digitalThreadStickerCreatePost(digitalThreadStickerCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 檢視布片的Digital Thread的Sticker的child sticker
         * @param {DigitalThreadStickerStarPostRequest} [digitalThreadStickerStarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadStickerReadChildStickerPost(digitalThreadStickerStarPostRequest?: DigitalThreadStickerStarPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.digitalThreadStickerReadChildStickerPost(digitalThreadStickerStarPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 對布片的 Digital Thread的Sticker 標記Star
         * @param {DigitalThreadStickerStarPostRequest} [digitalThreadStickerStarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadStickerStarPost(digitalThreadStickerStarPostRequest?: DigitalThreadStickerStarPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.digitalThreadStickerStarPost(digitalThreadStickerStarPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 對布片的 Digital Thread的Sticker 移除標記Star
         * @param {DigitalThreadStickerStarPostRequest} [digitalThreadStickerStarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadStickerUnstarPost(digitalThreadStickerStarPostRequest?: DigitalThreadStickerStarPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.digitalThreadStickerUnstarPost(digitalThreadStickerStarPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改布片的 Digital Thread的Sticker的tag
         * @param {DigitalThreadStickerUpdateTagPostRequest} [digitalThreadStickerUpdateTagPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadStickerUpdateTagPost(digitalThreadStickerUpdateTagPostRequest?: DigitalThreadStickerUpdateTagPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.digitalThreadStickerUpdateTagPost(digitalThreadStickerUpdateTagPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改布片的 Digital Thread的Name
         * @param {DigitalThreadUpdateDigitalThreadNamePostRequest} [digitalThreadUpdateDigitalThreadNamePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        digitalThreadUpdateDigitalThreadNamePost(digitalThreadUpdateDigitalThreadNamePostRequest?: DigitalThreadUpdateDigitalThreadNamePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.digitalThreadUpdateDigitalThreadNamePost(digitalThreadUpdateDigitalThreadNamePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得該單位(組織或團隊)底下的 Workflow Stage 清單(不含hide)
         * @param {GetDigitalThreadWorkflowStageOptionsRequest} getDigitalThreadWorkflowStageOptionsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDigitalThreadWorkflowStageOptions(getDigitalThreadWorkflowStageOptionsRequest: GetDigitalThreadWorkflowStageOptionsRequest, options?: any): AxiosPromise<GetDigitalThreadWorkflowStageOptions200Response> {
            return localVarFp.getDigitalThreadWorkflowStageOptions(getDigitalThreadWorkflowStageOptionsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DigitalThreadApi - object-oriented interface
 * @export
 * @class DigitalThreadApi
 * @extends {BaseAPI}
 */
export class DigitalThreadApi extends BaseAPI {
    /**
     * 
     * @summary 變更 Digital Thread 的 Workflow Stage
     * @param {ChangeDigitalThreadWorkflowStageRequest} changeDigitalThreadWorkflowStageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalThreadApi
     */
    public changeDigitalThreadWorkflowStage(changeDigitalThreadWorkflowStageRequest: ChangeDigitalThreadWorkflowStageRequest, options?: AxiosRequestConfig) {
        return DigitalThreadApiFp(this.configuration).changeDigitalThreadWorkflowStage(changeDigitalThreadWorkflowStageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 建立布片的 Digital Thread
     * @param {DigitalThreadCreatePostRequest} [digitalThreadCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalThreadApi
     */
    public digitalThreadCreatePost(digitalThreadCreatePostRequest?: DigitalThreadCreatePostRequest, options?: AxiosRequestConfig) {
        return DigitalThreadApiFp(this.configuration).digitalThreadCreatePost(digitalThreadCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得布片的 Digital Thread 清單
     * @param {DigitalThreadGetListPostRequest} [digitalThreadGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalThreadApi
     */
    public digitalThreadGetListPost(digitalThreadGetListPostRequest?: DigitalThreadGetListPostRequest, options?: AxiosRequestConfig) {
        return DigitalThreadApiFp(this.configuration).digitalThreadGetListPost(digitalThreadGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Digital Thread 中的material明細
     * @param {DigitalThreadGetMaterialPostRequest} [digitalThreadGetMaterialPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalThreadApi
     */
    public digitalThreadGetMaterialPost(digitalThreadGetMaterialPostRequest?: DigitalThreadGetMaterialPostRequest, options?: AxiosRequestConfig) {
        return DigitalThreadApiFp(this.configuration).digitalThreadGetMaterialPost(digitalThreadGetMaterialPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得布片的 Digital Thread 資訊
     * @param {DigitalThreadGetPostRequest} [digitalThreadGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalThreadApi
     */
    public digitalThreadGetPost(digitalThreadGetPostRequest?: DigitalThreadGetPostRequest, options?: AxiosRequestConfig) {
        return DigitalThreadApiFp(this.configuration).digitalThreadGetPost(digitalThreadGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 建立布片的 Digital Thread的sticker底下的child Sticker
     * @param {DigitalThreadStickerChildStickerCreatePostRequest} [digitalThreadStickerChildStickerCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalThreadApi
     */
    public digitalThreadStickerChildStickerCreatePost(digitalThreadStickerChildStickerCreatePostRequest?: DigitalThreadStickerChildStickerCreatePostRequest, options?: AxiosRequestConfig) {
        return DigitalThreadApiFp(this.configuration).digitalThreadStickerChildStickerCreatePost(digitalThreadStickerChildStickerCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 建立布片的 Digital Thread的Sticker
     * @param {DigitalThreadStickerCreatePostRequest} [digitalThreadStickerCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalThreadApi
     */
    public digitalThreadStickerCreatePost(digitalThreadStickerCreatePostRequest?: DigitalThreadStickerCreatePostRequest, options?: AxiosRequestConfig) {
        return DigitalThreadApiFp(this.configuration).digitalThreadStickerCreatePost(digitalThreadStickerCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 檢視布片的Digital Thread的Sticker的child sticker
     * @param {DigitalThreadStickerStarPostRequest} [digitalThreadStickerStarPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalThreadApi
     */
    public digitalThreadStickerReadChildStickerPost(digitalThreadStickerStarPostRequest?: DigitalThreadStickerStarPostRequest, options?: AxiosRequestConfig) {
        return DigitalThreadApiFp(this.configuration).digitalThreadStickerReadChildStickerPost(digitalThreadStickerStarPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 對布片的 Digital Thread的Sticker 標記Star
     * @param {DigitalThreadStickerStarPostRequest} [digitalThreadStickerStarPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalThreadApi
     */
    public digitalThreadStickerStarPost(digitalThreadStickerStarPostRequest?: DigitalThreadStickerStarPostRequest, options?: AxiosRequestConfig) {
        return DigitalThreadApiFp(this.configuration).digitalThreadStickerStarPost(digitalThreadStickerStarPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 對布片的 Digital Thread的Sticker 移除標記Star
     * @param {DigitalThreadStickerStarPostRequest} [digitalThreadStickerStarPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalThreadApi
     */
    public digitalThreadStickerUnstarPost(digitalThreadStickerStarPostRequest?: DigitalThreadStickerStarPostRequest, options?: AxiosRequestConfig) {
        return DigitalThreadApiFp(this.configuration).digitalThreadStickerUnstarPost(digitalThreadStickerStarPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改布片的 Digital Thread的Sticker的tag
     * @param {DigitalThreadStickerUpdateTagPostRequest} [digitalThreadStickerUpdateTagPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalThreadApi
     */
    public digitalThreadStickerUpdateTagPost(digitalThreadStickerUpdateTagPostRequest?: DigitalThreadStickerUpdateTagPostRequest, options?: AxiosRequestConfig) {
        return DigitalThreadApiFp(this.configuration).digitalThreadStickerUpdateTagPost(digitalThreadStickerUpdateTagPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改布片的 Digital Thread的Name
     * @param {DigitalThreadUpdateDigitalThreadNamePostRequest} [digitalThreadUpdateDigitalThreadNamePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalThreadApi
     */
    public digitalThreadUpdateDigitalThreadNamePost(digitalThreadUpdateDigitalThreadNamePostRequest?: DigitalThreadUpdateDigitalThreadNamePostRequest, options?: AxiosRequestConfig) {
        return DigitalThreadApiFp(this.configuration).digitalThreadUpdateDigitalThreadNamePost(digitalThreadUpdateDigitalThreadNamePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得該單位(組織或團隊)底下的 Workflow Stage 清單(不含hide)
     * @param {GetDigitalThreadWorkflowStageOptionsRequest} getDigitalThreadWorkflowStageOptionsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigitalThreadApi
     */
    public getDigitalThreadWorkflowStageOptions(getDigitalThreadWorkflowStageOptionsRequest: GetDigitalThreadWorkflowStageOptionsRequest, options?: AxiosRequestConfig) {
        return DigitalThreadApiFp(this.configuration).getDigitalThreadWorkflowStageOptions(getDigitalThreadWorkflowStageOptionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GeneralApi - axios parameter creator
 * @export
 */
export const GeneralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 確認 token 狀態。
         * @param {GeneralCheckTokenStatusPostRequest} [generalCheckTokenStatusPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalCheckTokenStatusPost: async (generalCheckTokenStatusPostRequest?: GeneralCheckTokenStatusPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/general/check-token-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generalCheckTokenStatusPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 s3 上傳 url
         * @param {GeneralGetUploadUrlPostRequest} [generalGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalGetUploadUrlPost: async (generalGetUploadUrlPostRequest?: GeneralGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/general/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generalGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 使用RefreshToken更新AccessToken和RefreshToken
         * @param {GeneralRefreshTokenPostRequest} [generalRefreshTokenPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalRefreshTokenPost: async (generalRefreshTokenPostRequest?: GeneralRefreshTokenPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/general/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generalRefreshTokenPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralApi - functional programming interface
 * @export
 */
export const GeneralApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneralApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 確認 token 狀態。
         * @param {GeneralCheckTokenStatusPostRequest} [generalCheckTokenStatusPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generalCheckTokenStatusPost(generalCheckTokenStatusPostRequest?: GeneralCheckTokenStatusPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralCheckTokenStatusPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generalCheckTokenStatusPost(generalCheckTokenStatusPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 s3 上傳 url
         * @param {GeneralGetUploadUrlPostRequest} [generalGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generalGetUploadUrlPost(generalGetUploadUrlPostRequest?: GeneralGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generalGetUploadUrlPost(generalGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 使用RefreshToken更新AccessToken和RefreshToken
         * @param {GeneralRefreshTokenPostRequest} [generalRefreshTokenPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generalRefreshTokenPost(generalRefreshTokenPostRequest?: GeneralRefreshTokenPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralRefreshTokenPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generalRefreshTokenPost(generalRefreshTokenPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GeneralApi - factory interface
 * @export
 */
export const GeneralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneralApiFp(configuration)
    return {
        /**
         * 
         * @summary 確認 token 狀態。
         * @param {GeneralCheckTokenStatusPostRequest} [generalCheckTokenStatusPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalCheckTokenStatusPost(generalCheckTokenStatusPostRequest?: GeneralCheckTokenStatusPostRequest, options?: any): AxiosPromise<GeneralCheckTokenStatusPost200Response> {
            return localVarFp.generalCheckTokenStatusPost(generalCheckTokenStatusPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 s3 上傳 url
         * @param {GeneralGetUploadUrlPostRequest} [generalGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalGetUploadUrlPost(generalGetUploadUrlPostRequest?: GeneralGetUploadUrlPostRequest, options?: any): AxiosPromise<GeneralGetUploadUrlPost200Response> {
            return localVarFp.generalGetUploadUrlPost(generalGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 使用RefreshToken更新AccessToken和RefreshToken
         * @param {GeneralRefreshTokenPostRequest} [generalRefreshTokenPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generalRefreshTokenPost(generalRefreshTokenPostRequest?: GeneralRefreshTokenPostRequest, options?: any): AxiosPromise<GeneralRefreshTokenPost200Response> {
            return localVarFp.generalRefreshTokenPost(generalRefreshTokenPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
export class GeneralApi extends BaseAPI {
    /**
     * 
     * @summary 確認 token 狀態。
     * @param {GeneralCheckTokenStatusPostRequest} [generalCheckTokenStatusPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public generalCheckTokenStatusPost(generalCheckTokenStatusPostRequest?: GeneralCheckTokenStatusPostRequest, options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).generalCheckTokenStatusPost(generalCheckTokenStatusPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 s3 上傳 url
     * @param {GeneralGetUploadUrlPostRequest} [generalGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public generalGetUploadUrlPost(generalGetUploadUrlPostRequest?: GeneralGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).generalGetUploadUrlPost(generalGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 使用RefreshToken更新AccessToken和RefreshToken
     * @param {GeneralRefreshTokenPostRequest} [generalRefreshTokenPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public generalRefreshTokenPost(generalRefreshTokenPostRequest?: GeneralRefreshTokenPostRequest, options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).generalRefreshTokenPost(generalRefreshTokenPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **Access roles:** To be clear define
         * @summary 建立團隊
         * @param {OrgGroupCreatePostRequest} [orgGroupCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupCreatePost: async (orgGroupCreatePostRequest?: OrgGroupCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 刪除團隊
         * @param {OrgGroupDeletePostRequest} [orgGroupDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupDeletePost: async (orgGroupDeletePostRequest?: OrgGroupDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 取得團隊資訊
         * @param {OrgGroupGetPostRequest} [orgGroupGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupGetPost: async (orgGroupGetPostRequest?: OrgGroupGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 更改團隊資訊
         * @param {OrgGroupUpdatePostRequest} [orgGroupUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupUpdatePost: async (orgGroupUpdatePostRequest?: OrgGroupUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupApiAxiosParamCreator(configuration)
    return {
        /**
         * **Access roles:** To be clear define
         * @summary 建立團隊
         * @param {OrgGroupCreatePostRequest} [orgGroupCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupCreatePost(orgGroupCreatePostRequest?: OrgGroupCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGroupCreatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupCreatePost(orgGroupCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 刪除團隊
         * @param {OrgGroupDeletePostRequest} [orgGroupDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupDeletePost(orgGroupDeletePostRequest?: OrgGroupDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupDeletePost(orgGroupDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 取得團隊資訊
         * @param {OrgGroupGetPostRequest} [orgGroupGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupGetPost(orgGroupGetPostRequest?: OrgGroupGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGroupGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupGetPost(orgGroupGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 更改團隊資訊
         * @param {OrgGroupUpdatePostRequest} [orgGroupUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupUpdatePost(orgGroupUpdatePostRequest?: OrgGroupUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGroupUpdatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupUpdatePost(orgGroupUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupApiFp(configuration)
    return {
        /**
         * **Access roles:** To be clear define
         * @summary 建立團隊
         * @param {OrgGroupCreatePostRequest} [orgGroupCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupCreatePost(orgGroupCreatePostRequest?: OrgGroupCreatePostRequest, options?: any): AxiosPromise<OrgGroupCreatePost200Response> {
            return localVarFp.orgGroupCreatePost(orgGroupCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 刪除團隊
         * @param {OrgGroupDeletePostRequest} [orgGroupDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupDeletePost(orgGroupDeletePostRequest?: OrgGroupDeletePostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgGroupDeletePost(orgGroupDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 取得團隊資訊
         * @param {OrgGroupGetPostRequest} [orgGroupGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupGetPost(orgGroupGetPostRequest?: OrgGroupGetPostRequest, options?: any): AxiosPromise<OrgGroupGetPost200Response> {
            return localVarFp.orgGroupGetPost(orgGroupGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 更改團隊資訊
         * @param {OrgGroupUpdatePostRequest} [orgGroupUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupUpdatePost(orgGroupUpdatePostRequest?: OrgGroupUpdatePostRequest, options?: any): AxiosPromise<OrgGroupUpdatePost200Response> {
            return localVarFp.orgGroupUpdatePost(orgGroupUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI {
    /**
     * **Access roles:** To be clear define
     * @summary 建立團隊
     * @param {OrgGroupCreatePostRequest} [orgGroupCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public orgGroupCreatePost(orgGroupCreatePostRequest?: OrgGroupCreatePostRequest, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).orgGroupCreatePost(orgGroupCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 刪除團隊
     * @param {OrgGroupDeletePostRequest} [orgGroupDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public orgGroupDeletePost(orgGroupDeletePostRequest?: OrgGroupDeletePostRequest, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).orgGroupDeletePost(orgGroupDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 取得團隊資訊
     * @param {OrgGroupGetPostRequest} [orgGroupGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public orgGroupGetPost(orgGroupGetPostRequest?: OrgGroupGetPostRequest, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).orgGroupGetPost(orgGroupGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 更改團隊資訊
     * @param {OrgGroupUpdatePostRequest} [orgGroupUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public orgGroupUpdatePost(orgGroupUpdatePostRequest?: OrgGroupUpdatePostRequest, options?: AxiosRequestConfig) {
        return GroupApiFp(this.configuration).orgGroupUpdatePost(orgGroupUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupAssetsApi - axios parameter creator
 * @export
 */
export const GroupAssetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary assets add to workspace
         * @param {OrgGroupAssetsMaterialAddToWorkspacePostRequest} [orgGroupAssetsMaterialAddToWorkspacePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialAddToWorkspacePost: async (orgGroupAssetsMaterialAddToWorkspacePostRequest?: OrgGroupAssetsMaterialAddToWorkspacePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/add-to-workspace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialAddToWorkspacePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量上傳 - 產生S3檔案上傳url
         * @param {OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest} [orgAssetsMaterialBatchUploadGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialBatchUploadGetUploadUrlPost: async (orgAssetsMaterialBatchUploadGetUploadUrlPostRequest?: OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/batch-upload/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialBatchUploadGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 批量上傳
         * @param {OrgGroupAssetsMaterialBatchUploadPostRequest} [orgGroupAssetsMaterialBatchUploadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialBatchUploadPost: async (orgGroupAssetsMaterialBatchUploadPostRequest?: OrgGroupAssetsMaterialBatchUploadPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/batch-upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialBatchUploadPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Carbon copy
         * @param {OrgGroupAssetsMaterialGetPostRequest} [orgGroupAssetsMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialCarbonCopyPost: async (orgGroupAssetsMaterialGetPostRequest?: OrgGroupAssetsMaterialGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/carbon-copy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgGroupAssetsMaterialCloneCheckPostRequest} [orgGroupAssetsMaterialCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialCloneCheckPost: async (orgGroupAssetsMaterialCloneCheckPostRequest?: OrgGroupAssetsMaterialCloneCheckPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/clone-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialCloneCheckPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Clone
         * @param {OrgGroupAssetsMaterialClonePostRequest} [orgGroupAssetsMaterialClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialClonePost: async (orgGroupAssetsMaterialClonePostRequest?: OrgGroupAssetsMaterialClonePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/clone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialClonePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 確定新增布料資訊
         * @param {OrgGroupAssetsMaterialCreatePostRequest} [orgGroupAssetsMaterialCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialCreatePost: async (orgGroupAssetsMaterialCreatePostRequest?: OrgGroupAssetsMaterialCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 建立單一布料時上傳補充資料 - 產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialCreateUploadAttachmentGetUploadUrlPost: async (userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/create/upload-attachment/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userFeedbackUploadAttachmentGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 建立單一布料時上傳補充資料
         * @param {OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest} [orgGroupAssetsMaterialCreateUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialCreateUploadAttachmentPost: async (orgGroupAssetsMaterialCreateUploadAttachmentPostRequest?: OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/create/upload-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialCreateUploadAttachmentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 確認要刪除布料是否可以刪除
         * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialDeleteCheckPost: async (orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/delete-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除布料
         * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialDeletePost: async (orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 匯出 Excel
         * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialExportPost: async (orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得布料清單
         * @param {OrgGroupAssetsMaterialGetListPostRequest} [orgGroupAssetsMaterialGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialGetListPost: async (orgGroupAssetsMaterialGetListPostRequest?: OrgGroupAssetsMaterialGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得單一布料資料
         * @param {OrgGroupAssetsMaterialGetPostRequest} [orgGroupAssetsMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialGetPost: async (orgGroupAssetsMaterialGetPostRequest?: OrgGroupAssetsMaterialGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 大量匯出 Excel
         * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialMassExportPost: async (orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/mass-export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 合併布卡
         * @param {OrgGroupAssetsMaterialMergePostRequest} [orgGroupAssetsMaterialMergePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialMergePost: async (orgGroupAssetsMaterialMergePostRequest?: OrgGroupAssetsMaterialMergePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/merge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialMergePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 取得布料相關選項資訊
         * @param {OrgGroupUserGetPostRequest} [orgGroupUserGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialOptionsPost: async (orgGroupUserGetPostRequest?: OrgGroupUserGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupUserGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Client 端 Smart Upload 產生S3檔案上傳url
         * @param {GeneralGetUploadUrlPostRequest} [generalGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialSmartUploadGetUploadUrlPost: async (generalGetUploadUrlPostRequest?: GeneralGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/smart-upload/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generalGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  **Access roles:** To be clear define
         * @summary Client 端 Smart Upload
         * @param {OrgGroupAssetsMaterialSmartUploadPostRequest} [orgGroupAssetsMaterialSmartUploadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialSmartUploadPost: async (orgGroupAssetsMaterialSmartUploadPostRequest?: OrgGroupAssetsMaterialSmartUploadPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/smart-upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialSmartUploadPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增 pantone 色號
         * @param {OrgGroupAssetsMaterialUpdateAddPantonePostRequest} [orgGroupAssetsMaterialUpdateAddPantonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateAddPantonePost: async (orgGroupAssetsMaterialUpdateAddPantonePostRequest?: OrgGroupAssetsMaterialUpdateAddPantonePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/add-pantone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialUpdateAddPantonePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 設定產品預覽圖-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest} [orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateCoverImgGetUploadUrlPost: async (orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/cover-img/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 設定產品預覽圖
         * @param {OrgGroupAssetsMaterialUpdateCoverImgPostRequest} [orgGroupAssetsMaterialUpdateCoverImgPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateCoverImgPost: async (orgGroupAssetsMaterialUpdateCoverImgPostRequest?: OrgGroupAssetsMaterialUpdateCoverImgPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/cover-img`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialUpdateCoverImgPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 建立 U3M-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateGenerateU3mGetUploadUrlPost: async (orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/generate-u3m/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 建立 U3M
         * @param {OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest} [orgGroupAssetsMaterialUpdateGenerateU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateGenerateU3mPost: async (orgGroupAssetsMaterialUpdateGenerateU3mPostRequest?: OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/generate-u3m`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialUpdateGenerateU3mPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 設定單面布或雙面布
         * @param {OrgGroupAssetsMaterialUpdateIsDoubleSidePostRequest} [orgGroupAssetsMaterialUpdateIsDoubleSidePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateIsDoubleSidePost: async (orgGroupAssetsMaterialUpdateIsDoubleSidePostRequest?: OrgGroupAssetsMaterialUpdateIsDoubleSidePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/is-double-side`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialUpdateIsDoubleSidePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 編輯布料資訊
         * @param {OrgGroupAssetsMaterialUpdatePostRequest} [orgGroupAssetsMaterialUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdatePost: async (orgGroupAssetsMaterialUpdatePostRequest?: OrgGroupAssetsMaterialUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯布料時移除補充資料
         * @param {OrgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest} [orgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateRemoveAttachmentPost: async (orgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest?: OrgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/remove-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除 pantone 色號
         * @param {OrgGroupAssetsMaterialUpdateRemovePantonePostRequest} [orgGroupAssetsMaterialUpdateRemovePantonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateRemovePantonePost: async (orgGroupAssetsMaterialUpdateRemovePantonePostRequest?: OrgGroupAssetsMaterialUpdateRemovePantonePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/remove-pantone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialUpdateRemovePantonePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯正反面-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateScanImageGetUploadUrlPost: async (orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/scan-image/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯正反面
         * @param {OrgGroupAssetsMaterialUpdateScanImagePostRequest} [orgGroupAssetsMaterialUpdateScanImagePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateScanImagePost: async (orgGroupAssetsMaterialUpdateScanImagePostRequest?: OrgGroupAssetsMaterialUpdateScanImagePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/scan-image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialUpdateScanImagePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 inventory
         * @param {OrgGroupAssetsMaterialUpdateSimpleInventoryPostRequest} [orgGroupAssetsMaterialUpdateSimpleInventoryPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateSimpleInventoryPost: async (orgGroupAssetsMaterialUpdateSimpleInventoryPostRequest?: OrgGroupAssetsMaterialUpdateSimpleInventoryPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/simple/inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialUpdateSimpleInventoryPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 public price
         * @param {OrgGroupAssetsMaterialUpdateSimplePublicPricePostRequest} [orgGroupAssetsMaterialUpdateSimplePublicPricePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateSimplePublicPricePost: async (orgGroupAssetsMaterialUpdateSimplePublicPricePostRequest?: OrgGroupAssetsMaterialUpdateSimplePublicPricePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/simple/public-price`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialUpdateSimplePublicPricePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 spec
         * @param {OrgGroupAssetsMaterialUpdateSimpleSpecPostRequest} [orgGroupAssetsMaterialUpdateSimpleSpecPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateSimpleSpecPost: async (orgGroupAssetsMaterialUpdateSimpleSpecPostRequest?: OrgGroupAssetsMaterialUpdateSimpleSpecPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/simple/spec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialUpdateSimpleSpecPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 tag
         * @param {OrgGroupAssetsMaterialUpdateSimpleTagPostRequest} [orgGroupAssetsMaterialUpdateSimpleTagPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateSimpleTagPost: async (orgGroupAssetsMaterialUpdateSimpleTagPostRequest?: OrgGroupAssetsMaterialUpdateSimpleTagPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/simple/tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialUpdateSimpleTagPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯布料時上傳補充資料 - 產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateUploadAttachmentGetUploadUrlPost: async (userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/upload-attachment/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userFeedbackUploadAttachmentGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯布料時上傳補充資料
         * @param {OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest} [orgGroupAssetsMaterialUpdateUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateUploadAttachmentPost: async (orgGroupAssetsMaterialUpdateUploadAttachmentPostRequest?: OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/material/update/upload-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsMaterialUpdateUploadAttachmentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgGroupAssetsUploadProgressExcelDeletePostRequest} [orgGroupAssetsUploadProgressExcelDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsUploadProgressExcelDeletePost: async (orgGroupAssetsUploadProgressExcelDeletePostRequest?: OrgGroupAssetsUploadProgressExcelDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/upload-progress/excel/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsUploadProgressExcelDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgGroupAssetsUploadProgressExcelGetListPostRequest} [orgGroupAssetsUploadProgressExcelGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsUploadProgressExcelGetListPost: async (orgGroupAssetsUploadProgressExcelGetListPostRequest?: OrgGroupAssetsUploadProgressExcelGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/upload-progress/excel/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsUploadProgressExcelGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgGroupAssetsUploadProgressExcelDeletePostRequest} [orgGroupAssetsUploadProgressExcelDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsUploadProgressExcelGetMaterialListPost: async (orgGroupAssetsUploadProgressExcelDeletePostRequest?: OrgGroupAssetsUploadProgressExcelDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/upload-progress/excel/get-material-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsUploadProgressExcelDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Progress - Material
         * @param {OrgGroupAssetsUploadProgressMaterialDeletePostRequest} [orgGroupAssetsUploadProgressMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsUploadProgressMaterialDeletePost: async (orgGroupAssetsUploadProgressMaterialDeletePostRequest?: OrgGroupAssetsUploadProgressMaterialDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/upload-progress/material/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsUploadProgressMaterialDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Progress - Material
         * @param {OrgGroupAssetsUploadProgressMaterialGetListPostRequest} [orgGroupAssetsUploadProgressMaterialGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsUploadProgressMaterialGetListPost: async (orgGroupAssetsUploadProgressMaterialGetListPostRequest?: OrgGroupAssetsUploadProgressMaterialGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/upload-progress/material/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsUploadProgressMaterialGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Progress - u3m
         * @param {OrgGroupAssetsUploadProgressU3mDeletePostRequest} [orgGroupAssetsUploadProgressU3mDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsUploadProgressU3mDeletePost: async (orgGroupAssetsUploadProgressU3mDeletePostRequest?: OrgGroupAssetsUploadProgressU3mDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/upload-progress/u3m/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsUploadProgressU3mDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Progress - u3m
         * @param {OrgGroupAssetsUploadProgressU3mGetListPostRequest} [orgGroupAssetsUploadProgressU3mGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsUploadProgressU3mGetListPost: async (orgGroupAssetsUploadProgressU3mGetListPostRequest?: OrgGroupAssetsUploadProgressU3mGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/assets/upload-progress/u3m/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupAssetsUploadProgressU3mGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupAssetsApi - functional programming interface
 * @export
 */
export const GroupAssetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupAssetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary assets add to workspace
         * @param {OrgGroupAssetsMaterialAddToWorkspacePostRequest} [orgGroupAssetsMaterialAddToWorkspacePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialAddToWorkspacePost(orgGroupAssetsMaterialAddToWorkspacePostRequest?: OrgGroupAssetsMaterialAddToWorkspacePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialAddToWorkspacePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialAddToWorkspacePost(orgGroupAssetsMaterialAddToWorkspacePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 批量上傳 - 產生S3檔案上傳url
         * @param {OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest} [orgAssetsMaterialBatchUploadGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialBatchUploadGetUploadUrlPost(orgAssetsMaterialBatchUploadGetUploadUrlPostRequest?: OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialBatchUploadGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialBatchUploadGetUploadUrlPost(orgAssetsMaterialBatchUploadGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 批量上傳
         * @param {OrgGroupAssetsMaterialBatchUploadPostRequest} [orgGroupAssetsMaterialBatchUploadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialBatchUploadPost(orgGroupAssetsMaterialBatchUploadPostRequest?: OrgGroupAssetsMaterialBatchUploadPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialBatchUploadPost(orgGroupAssetsMaterialBatchUploadPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Carbon copy
         * @param {OrgGroupAssetsMaterialGetPostRequest} [orgGroupAssetsMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialCarbonCopyPost(orgGroupAssetsMaterialGetPostRequest?: OrgGroupAssetsMaterialGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialCarbonCopyPost(orgGroupAssetsMaterialGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgGroupAssetsMaterialCloneCheckPostRequest} [orgGroupAssetsMaterialCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialCloneCheckPost(orgGroupAssetsMaterialCloneCheckPostRequest?: OrgGroupAssetsMaterialCloneCheckPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedCloneCheckPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialCloneCheckPost(orgGroupAssetsMaterialCloneCheckPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Clone
         * @param {OrgGroupAssetsMaterialClonePostRequest} [orgGroupAssetsMaterialClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialClonePost(orgGroupAssetsMaterialClonePostRequest?: OrgGroupAssetsMaterialClonePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialClonePost(orgGroupAssetsMaterialClonePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 確定新增布料資訊
         * @param {OrgGroupAssetsMaterialCreatePostRequest} [orgGroupAssetsMaterialCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialCreatePost(orgGroupAssetsMaterialCreatePostRequest?: OrgGroupAssetsMaterialCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialCreatePost(orgGroupAssetsMaterialCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 建立單一布料時上傳補充資料 - 產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialCreateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFeedbackUploadAttachmentGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialCreateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 建立單一布料時上傳補充資料
         * @param {OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest} [orgGroupAssetsMaterialCreateUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialCreateUploadAttachmentPost(orgGroupAssetsMaterialCreateUploadAttachmentPostRequest?: OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialCreateUploadAttachmentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialCreateUploadAttachmentPost(orgGroupAssetsMaterialCreateUploadAttachmentPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 確認要刪除布料是否可以刪除
         * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialDeleteCheckPost(orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialDeleteCheckPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialDeleteCheckPost(orgGroupAssetsMaterialDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除布料
         * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialDeletePost(orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialDeletePost(orgGroupAssetsMaterialDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 匯出 Excel
         * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialExportPost(orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialExportPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialExportPost(orgGroupAssetsMaterialDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得布料清單
         * @param {OrgGroupAssetsMaterialGetListPostRequest} [orgGroupAssetsMaterialGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialGetListPost(orgGroupAssetsMaterialGetListPostRequest?: OrgGroupAssetsMaterialGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialGetListPost(orgGroupAssetsMaterialGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得單一布料資料
         * @param {OrgGroupAssetsMaterialGetPostRequest} [orgGroupAssetsMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialGetPost(orgGroupAssetsMaterialGetPostRequest?: OrgGroupAssetsMaterialGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialGetPost(orgGroupAssetsMaterialGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 大量匯出 Excel
         * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialMassExportPost(orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialMassExportPost(orgGroupAssetsMaterialDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 合併布卡
         * @param {OrgGroupAssetsMaterialMergePostRequest} [orgGroupAssetsMaterialMergePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialMergePost(orgGroupAssetsMaterialMergePostRequest?: OrgGroupAssetsMaterialMergePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialMergePost(orgGroupAssetsMaterialMergePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 取得布料相關選項資訊
         * @param {OrgGroupUserGetPostRequest} [orgGroupUserGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialOptionsPost(orgGroupUserGetPostRequest?: OrgGroupUserGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialOptionsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialOptionsPost(orgGroupUserGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Client 端 Smart Upload 產生S3檔案上傳url
         * @param {GeneralGetUploadUrlPostRequest} [generalGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialSmartUploadGetUploadUrlPost(generalGetUploadUrlPostRequest?: GeneralGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialSmartUploadGetUploadUrlPost(generalGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  **Access roles:** To be clear define
         * @summary Client 端 Smart Upload
         * @param {OrgGroupAssetsMaterialSmartUploadPostRequest} [orgGroupAssetsMaterialSmartUploadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialSmartUploadPost(orgGroupAssetsMaterialSmartUploadPostRequest?: OrgGroupAssetsMaterialSmartUploadPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialSmartUploadPost(orgGroupAssetsMaterialSmartUploadPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增 pantone 色號
         * @param {OrgGroupAssetsMaterialUpdateAddPantonePostRequest} [orgGroupAssetsMaterialUpdateAddPantonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateAddPantonePost(orgGroupAssetsMaterialUpdateAddPantonePostRequest?: OrgGroupAssetsMaterialUpdateAddPantonePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateAddPantonePost(orgGroupAssetsMaterialUpdateAddPantonePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 設定產品預覽圖-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest} [orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateCoverImgGetUploadUrlPost(orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateCoverImgGetUploadUrlPost(orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 設定產品預覽圖
         * @param {OrgGroupAssetsMaterialUpdateCoverImgPostRequest} [orgGroupAssetsMaterialUpdateCoverImgPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateCoverImgPost(orgGroupAssetsMaterialUpdateCoverImgPostRequest?: OrgGroupAssetsMaterialUpdateCoverImgPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateCoverImgPost(orgGroupAssetsMaterialUpdateCoverImgPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 建立 U3M-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateGenerateU3mGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateGenerateU3mGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 建立 U3M
         * @param {OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest} [orgGroupAssetsMaterialUpdateGenerateU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateGenerateU3mPost(orgGroupAssetsMaterialUpdateGenerateU3mPostRequest?: OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateGenerateU3mPost(orgGroupAssetsMaterialUpdateGenerateU3mPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 設定單面布或雙面布
         * @param {OrgGroupAssetsMaterialUpdateIsDoubleSidePostRequest} [orgGroupAssetsMaterialUpdateIsDoubleSidePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateIsDoubleSidePost(orgGroupAssetsMaterialUpdateIsDoubleSidePostRequest?: OrgGroupAssetsMaterialUpdateIsDoubleSidePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateIsDoubleSidePost(orgGroupAssetsMaterialUpdateIsDoubleSidePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 編輯布料資訊
         * @param {OrgGroupAssetsMaterialUpdatePostRequest} [orgGroupAssetsMaterialUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdatePost(orgGroupAssetsMaterialUpdatePostRequest?: OrgGroupAssetsMaterialUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdatePost(orgGroupAssetsMaterialUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯布料時移除補充資料
         * @param {OrgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest} [orgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateRemoveAttachmentPost(orgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest?: OrgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateRemoveAttachmentPost(orgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除 pantone 色號
         * @param {OrgGroupAssetsMaterialUpdateRemovePantonePostRequest} [orgGroupAssetsMaterialUpdateRemovePantonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateRemovePantonePost(orgGroupAssetsMaterialUpdateRemovePantonePostRequest?: OrgGroupAssetsMaterialUpdateRemovePantonePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateRemovePantonePost(orgGroupAssetsMaterialUpdateRemovePantonePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯正反面-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateScanImageGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateScanImageGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯正反面
         * @param {OrgGroupAssetsMaterialUpdateScanImagePostRequest} [orgGroupAssetsMaterialUpdateScanImagePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateScanImagePost(orgGroupAssetsMaterialUpdateScanImagePostRequest?: OrgGroupAssetsMaterialUpdateScanImagePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateScanImagePost(orgGroupAssetsMaterialUpdateScanImagePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 inventory
         * @param {OrgGroupAssetsMaterialUpdateSimpleInventoryPostRequest} [orgGroupAssetsMaterialUpdateSimpleInventoryPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateSimpleInventoryPost(orgGroupAssetsMaterialUpdateSimpleInventoryPostRequest?: OrgGroupAssetsMaterialUpdateSimpleInventoryPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateSimpleInventoryPost(orgGroupAssetsMaterialUpdateSimpleInventoryPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 public price
         * @param {OrgGroupAssetsMaterialUpdateSimplePublicPricePostRequest} [orgGroupAssetsMaterialUpdateSimplePublicPricePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateSimplePublicPricePost(orgGroupAssetsMaterialUpdateSimplePublicPricePostRequest?: OrgGroupAssetsMaterialUpdateSimplePublicPricePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateSimplePublicPricePost(orgGroupAssetsMaterialUpdateSimplePublicPricePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 spec
         * @param {OrgGroupAssetsMaterialUpdateSimpleSpecPostRequest} [orgGroupAssetsMaterialUpdateSimpleSpecPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateSimpleSpecPost(orgGroupAssetsMaterialUpdateSimpleSpecPostRequest?: OrgGroupAssetsMaterialUpdateSimpleSpecPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateSimpleSpecPost(orgGroupAssetsMaterialUpdateSimpleSpecPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 tag
         * @param {OrgGroupAssetsMaterialUpdateSimpleTagPostRequest} [orgGroupAssetsMaterialUpdateSimpleTagPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateSimpleTagPost(orgGroupAssetsMaterialUpdateSimpleTagPostRequest?: OrgGroupAssetsMaterialUpdateSimpleTagPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateSimpleTagPost(orgGroupAssetsMaterialUpdateSimpleTagPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯布料時上傳補充資料 - 產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFeedbackUploadAttachmentGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯布料時上傳補充資料
         * @param {OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest} [orgGroupAssetsMaterialUpdateUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsMaterialUpdateUploadAttachmentPost(orgGroupAssetsMaterialUpdateUploadAttachmentPostRequest?: OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsMaterialUpdateUploadAttachmentPost(orgGroupAssetsMaterialUpdateUploadAttachmentPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgGroupAssetsUploadProgressExcelDeletePostRequest} [orgGroupAssetsUploadProgressExcelDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsUploadProgressExcelDeletePost(orgGroupAssetsUploadProgressExcelDeletePostRequest?: OrgGroupAssetsUploadProgressExcelDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsUploadProgressExcelDeletePost(orgGroupAssetsUploadProgressExcelDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgGroupAssetsUploadProgressExcelGetListPostRequest} [orgGroupAssetsUploadProgressExcelGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsUploadProgressExcelGetListPost(orgGroupAssetsUploadProgressExcelGetListPostRequest?: OrgGroupAssetsUploadProgressExcelGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGroupAssetsUploadProgressExcelGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsUploadProgressExcelGetListPost(orgGroupAssetsUploadProgressExcelGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgGroupAssetsUploadProgressExcelDeletePostRequest} [orgGroupAssetsUploadProgressExcelDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsUploadProgressExcelGetMaterialListPost(orgGroupAssetsUploadProgressExcelDeletePostRequest?: OrgGroupAssetsUploadProgressExcelDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsUploadProgressExcelGetMaterialListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsUploadProgressExcelGetMaterialListPost(orgGroupAssetsUploadProgressExcelDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Progress - Material
         * @param {OrgGroupAssetsUploadProgressMaterialDeletePostRequest} [orgGroupAssetsUploadProgressMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsUploadProgressMaterialDeletePost(orgGroupAssetsUploadProgressMaterialDeletePostRequest?: OrgGroupAssetsUploadProgressMaterialDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsUploadProgressMaterialDeletePost(orgGroupAssetsUploadProgressMaterialDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Progress - Material
         * @param {OrgGroupAssetsUploadProgressMaterialGetListPostRequest} [orgGroupAssetsUploadProgressMaterialGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsUploadProgressMaterialGetListPost(orgGroupAssetsUploadProgressMaterialGetListPostRequest?: OrgGroupAssetsUploadProgressMaterialGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGroupAssetsUploadProgressMaterialGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsUploadProgressMaterialGetListPost(orgGroupAssetsUploadProgressMaterialGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Progress - u3m
         * @param {OrgGroupAssetsUploadProgressU3mDeletePostRequest} [orgGroupAssetsUploadProgressU3mDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsUploadProgressU3mDeletePost(orgGroupAssetsUploadProgressU3mDeletePostRequest?: OrgGroupAssetsUploadProgressU3mDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsUploadProgressU3mDeletePost(orgGroupAssetsUploadProgressU3mDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Progress - u3m
         * @param {OrgGroupAssetsUploadProgressU3mGetListPostRequest} [orgGroupAssetsUploadProgressU3mGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupAssetsUploadProgressU3mGetListPost(orgGroupAssetsUploadProgressU3mGetListPostRequest?: OrgGroupAssetsUploadProgressU3mGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGroupAssetsUploadProgressU3mGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupAssetsUploadProgressU3mGetListPost(orgGroupAssetsUploadProgressU3mGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupAssetsApi - factory interface
 * @export
 */
export const GroupAssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupAssetsApiFp(configuration)
    return {
        /**
         * 
         * @summary assets add to workspace
         * @param {OrgGroupAssetsMaterialAddToWorkspacePostRequest} [orgGroupAssetsMaterialAddToWorkspacePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialAddToWorkspacePost(orgGroupAssetsMaterialAddToWorkspacePostRequest?: OrgGroupAssetsMaterialAddToWorkspacePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialAddToWorkspacePost200Response> {
            return localVarFp.orgGroupAssetsMaterialAddToWorkspacePost(orgGroupAssetsMaterialAddToWorkspacePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量上傳 - 產生S3檔案上傳url
         * @param {OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest} [orgAssetsMaterialBatchUploadGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialBatchUploadGetUploadUrlPost(orgAssetsMaterialBatchUploadGetUploadUrlPostRequest?: OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialBatchUploadGetUploadUrlPost200Response> {
            return localVarFp.orgGroupAssetsMaterialBatchUploadGetUploadUrlPost(orgAssetsMaterialBatchUploadGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 批量上傳
         * @param {OrgGroupAssetsMaterialBatchUploadPostRequest} [orgGroupAssetsMaterialBatchUploadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialBatchUploadPost(orgGroupAssetsMaterialBatchUploadPostRequest?: OrgGroupAssetsMaterialBatchUploadPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsMaterialBatchUploadPost(orgGroupAssetsMaterialBatchUploadPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Carbon copy
         * @param {OrgGroupAssetsMaterialGetPostRequest} [orgGroupAssetsMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialCarbonCopyPost(orgGroupAssetsMaterialGetPostRequest?: OrgGroupAssetsMaterialGetPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsMaterialCarbonCopyPost(orgGroupAssetsMaterialGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgGroupAssetsMaterialCloneCheckPostRequest} [orgGroupAssetsMaterialCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialCloneCheckPost(orgGroupAssetsMaterialCloneCheckPostRequest?: OrgGroupAssetsMaterialCloneCheckPostRequest, options?: any): AxiosPromise<ShareGetReceivedCloneCheckPost200Response> {
            return localVarFp.orgGroupAssetsMaterialCloneCheckPost(orgGroupAssetsMaterialCloneCheckPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Clone
         * @param {OrgGroupAssetsMaterialClonePostRequest} [orgGroupAssetsMaterialClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialClonePost(orgGroupAssetsMaterialClonePostRequest?: OrgGroupAssetsMaterialClonePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsMaterialClonePost(orgGroupAssetsMaterialClonePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 確定新增布料資訊
         * @param {OrgGroupAssetsMaterialCreatePostRequest} [orgGroupAssetsMaterialCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialCreatePost(orgGroupAssetsMaterialCreatePostRequest?: OrgGroupAssetsMaterialCreatePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgGroupAssetsMaterialCreatePost(orgGroupAssetsMaterialCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 建立單一布料時上傳補充資料 - 產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialCreateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: any): AxiosPromise<UserFeedbackUploadAttachmentGetUploadUrlPost200Response> {
            return localVarFp.orgGroupAssetsMaterialCreateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 建立單一布料時上傳補充資料
         * @param {OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest} [orgGroupAssetsMaterialCreateUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialCreateUploadAttachmentPost(orgGroupAssetsMaterialCreateUploadAttachmentPostRequest?: OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialCreateUploadAttachmentPost200Response> {
            return localVarFp.orgGroupAssetsMaterialCreateUploadAttachmentPost(orgGroupAssetsMaterialCreateUploadAttachmentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 確認要刪除布料是否可以刪除
         * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialDeleteCheckPost(orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialDeleteCheckPost200Response> {
            return localVarFp.orgGroupAssetsMaterialDeleteCheckPost(orgGroupAssetsMaterialDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除布料
         * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialDeletePost(orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsMaterialDeletePost(orgGroupAssetsMaterialDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 匯出 Excel
         * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialExportPost(orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialExportPost200Response> {
            return localVarFp.orgGroupAssetsMaterialExportPost(orgGroupAssetsMaterialDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得布料清單
         * @param {OrgGroupAssetsMaterialGetListPostRequest} [orgGroupAssetsMaterialGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialGetListPost(orgGroupAssetsMaterialGetListPostRequest?: OrgGroupAssetsMaterialGetListPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetListPost200Response> {
            return localVarFp.orgGroupAssetsMaterialGetListPost(orgGroupAssetsMaterialGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得單一布料資料
         * @param {OrgGroupAssetsMaterialGetPostRequest} [orgGroupAssetsMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialGetPost(orgGroupAssetsMaterialGetPostRequest?: OrgGroupAssetsMaterialGetPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgGroupAssetsMaterialGetPost(orgGroupAssetsMaterialGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 大量匯出 Excel
         * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialMassExportPost(orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsMaterialMassExportPost(orgGroupAssetsMaterialDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 合併布卡
         * @param {OrgGroupAssetsMaterialMergePostRequest} [orgGroupAssetsMaterialMergePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialMergePost(orgGroupAssetsMaterialMergePostRequest?: OrgGroupAssetsMaterialMergePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsMaterialMergePost(orgGroupAssetsMaterialMergePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 取得布料相關選項資訊
         * @param {OrgGroupUserGetPostRequest} [orgGroupUserGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialOptionsPost(orgGroupUserGetPostRequest?: OrgGroupUserGetPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialOptionsPost200Response> {
            return localVarFp.orgGroupAssetsMaterialOptionsPost(orgGroupUserGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Client 端 Smart Upload 產生S3檔案上傳url
         * @param {GeneralGetUploadUrlPostRequest} [generalGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialSmartUploadGetUploadUrlPost(generalGetUploadUrlPostRequest?: GeneralGetUploadUrlPostRequest, options?: any): AxiosPromise<GeneralGetUploadUrlPost200Response> {
            return localVarFp.orgGroupAssetsMaterialSmartUploadGetUploadUrlPost(generalGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *  **Access roles:** To be clear define
         * @summary Client 端 Smart Upload
         * @param {OrgGroupAssetsMaterialSmartUploadPostRequest} [orgGroupAssetsMaterialSmartUploadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialSmartUploadPost(orgGroupAssetsMaterialSmartUploadPostRequest?: OrgGroupAssetsMaterialSmartUploadPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsMaterialSmartUploadPost(orgGroupAssetsMaterialSmartUploadPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增 pantone 色號
         * @param {OrgGroupAssetsMaterialUpdateAddPantonePostRequest} [orgGroupAssetsMaterialUpdateAddPantonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateAddPantonePost(orgGroupAssetsMaterialUpdateAddPantonePostRequest?: OrgGroupAssetsMaterialUpdateAddPantonePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateAddPantonePost(orgGroupAssetsMaterialUpdateAddPantonePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 設定產品預覽圖-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest} [orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateCoverImgGetUploadUrlPost(orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateCoverImgGetUploadUrlPost(orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 設定產品預覽圖
         * @param {OrgGroupAssetsMaterialUpdateCoverImgPostRequest} [orgGroupAssetsMaterialUpdateCoverImgPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateCoverImgPost(orgGroupAssetsMaterialUpdateCoverImgPostRequest?: OrgGroupAssetsMaterialUpdateCoverImgPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateCoverImgPost(orgGroupAssetsMaterialUpdateCoverImgPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 建立 U3M-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateGenerateU3mGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateGenerateU3mGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 建立 U3M
         * @param {OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest} [orgGroupAssetsMaterialUpdateGenerateU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateGenerateU3mPost(orgGroupAssetsMaterialUpdateGenerateU3mPostRequest?: OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateGenerateU3mPost(orgGroupAssetsMaterialUpdateGenerateU3mPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 設定單面布或雙面布
         * @param {OrgGroupAssetsMaterialUpdateIsDoubleSidePostRequest} [orgGroupAssetsMaterialUpdateIsDoubleSidePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateIsDoubleSidePost(orgGroupAssetsMaterialUpdateIsDoubleSidePostRequest?: OrgGroupAssetsMaterialUpdateIsDoubleSidePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateIsDoubleSidePost(orgGroupAssetsMaterialUpdateIsDoubleSidePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 編輯布料資訊
         * @param {OrgGroupAssetsMaterialUpdatePostRequest} [orgGroupAssetsMaterialUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdatePost(orgGroupAssetsMaterialUpdatePostRequest?: OrgGroupAssetsMaterialUpdatePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdatePost(orgGroupAssetsMaterialUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯布料時移除補充資料
         * @param {OrgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest} [orgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateRemoveAttachmentPost(orgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest?: OrgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateRemoveAttachmentPost(orgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除 pantone 色號
         * @param {OrgGroupAssetsMaterialUpdateRemovePantonePostRequest} [orgGroupAssetsMaterialUpdateRemovePantonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateRemovePantonePost(orgGroupAssetsMaterialUpdateRemovePantonePostRequest?: OrgGroupAssetsMaterialUpdateRemovePantonePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateRemovePantonePost(orgGroupAssetsMaterialUpdateRemovePantonePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯正反面-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateScanImageGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateScanImageGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯正反面
         * @param {OrgGroupAssetsMaterialUpdateScanImagePostRequest} [orgGroupAssetsMaterialUpdateScanImagePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateScanImagePost(orgGroupAssetsMaterialUpdateScanImagePostRequest?: OrgGroupAssetsMaterialUpdateScanImagePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateScanImagePost(orgGroupAssetsMaterialUpdateScanImagePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 inventory
         * @param {OrgGroupAssetsMaterialUpdateSimpleInventoryPostRequest} [orgGroupAssetsMaterialUpdateSimpleInventoryPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateSimpleInventoryPost(orgGroupAssetsMaterialUpdateSimpleInventoryPostRequest?: OrgGroupAssetsMaterialUpdateSimpleInventoryPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateSimpleInventoryPost(orgGroupAssetsMaterialUpdateSimpleInventoryPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 public price
         * @param {OrgGroupAssetsMaterialUpdateSimplePublicPricePostRequest} [orgGroupAssetsMaterialUpdateSimplePublicPricePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateSimplePublicPricePost(orgGroupAssetsMaterialUpdateSimplePublicPricePostRequest?: OrgGroupAssetsMaterialUpdateSimplePublicPricePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateSimplePublicPricePost(orgGroupAssetsMaterialUpdateSimplePublicPricePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 spec
         * @param {OrgGroupAssetsMaterialUpdateSimpleSpecPostRequest} [orgGroupAssetsMaterialUpdateSimpleSpecPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateSimpleSpecPost(orgGroupAssetsMaterialUpdateSimpleSpecPostRequest?: OrgGroupAssetsMaterialUpdateSimpleSpecPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateSimpleSpecPost(orgGroupAssetsMaterialUpdateSimpleSpecPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 tag
         * @param {OrgGroupAssetsMaterialUpdateSimpleTagPostRequest} [orgGroupAssetsMaterialUpdateSimpleTagPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateSimpleTagPost(orgGroupAssetsMaterialUpdateSimpleTagPostRequest?: OrgGroupAssetsMaterialUpdateSimpleTagPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateSimpleTagPost(orgGroupAssetsMaterialUpdateSimpleTagPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯布料時上傳補充資料 - 產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: any): AxiosPromise<UserFeedbackUploadAttachmentGetUploadUrlPost200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯布料時上傳補充資料
         * @param {OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest} [orgGroupAssetsMaterialUpdateUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsMaterialUpdateUploadAttachmentPost(orgGroupAssetsMaterialUpdateUploadAttachmentPostRequest?: OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgGroupAssetsMaterialUpdateUploadAttachmentPost(orgGroupAssetsMaterialUpdateUploadAttachmentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgGroupAssetsUploadProgressExcelDeletePostRequest} [orgGroupAssetsUploadProgressExcelDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsUploadProgressExcelDeletePost(orgGroupAssetsUploadProgressExcelDeletePostRequest?: OrgGroupAssetsUploadProgressExcelDeletePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsUploadProgressExcelDeletePost(orgGroupAssetsUploadProgressExcelDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgGroupAssetsUploadProgressExcelGetListPostRequest} [orgGroupAssetsUploadProgressExcelGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsUploadProgressExcelGetListPost(orgGroupAssetsUploadProgressExcelGetListPostRequest?: OrgGroupAssetsUploadProgressExcelGetListPostRequest, options?: any): AxiosPromise<OrgGroupAssetsUploadProgressExcelGetListPost200Response> {
            return localVarFp.orgGroupAssetsUploadProgressExcelGetListPost(orgGroupAssetsUploadProgressExcelGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgGroupAssetsUploadProgressExcelDeletePostRequest} [orgGroupAssetsUploadProgressExcelDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsUploadProgressExcelGetMaterialListPost(orgGroupAssetsUploadProgressExcelDeletePostRequest?: OrgGroupAssetsUploadProgressExcelDeletePostRequest, options?: any): AxiosPromise<OrgAssetsUploadProgressExcelGetMaterialListPost200Response> {
            return localVarFp.orgGroupAssetsUploadProgressExcelGetMaterialListPost(orgGroupAssetsUploadProgressExcelDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Progress - Material
         * @param {OrgGroupAssetsUploadProgressMaterialDeletePostRequest} [orgGroupAssetsUploadProgressMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsUploadProgressMaterialDeletePost(orgGroupAssetsUploadProgressMaterialDeletePostRequest?: OrgGroupAssetsUploadProgressMaterialDeletePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsUploadProgressMaterialDeletePost(orgGroupAssetsUploadProgressMaterialDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Progress - Material
         * @param {OrgGroupAssetsUploadProgressMaterialGetListPostRequest} [orgGroupAssetsUploadProgressMaterialGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsUploadProgressMaterialGetListPost(orgGroupAssetsUploadProgressMaterialGetListPostRequest?: OrgGroupAssetsUploadProgressMaterialGetListPostRequest, options?: any): AxiosPromise<OrgGroupAssetsUploadProgressMaterialGetListPost200Response> {
            return localVarFp.orgGroupAssetsUploadProgressMaterialGetListPost(orgGroupAssetsUploadProgressMaterialGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Progress - u3m
         * @param {OrgGroupAssetsUploadProgressU3mDeletePostRequest} [orgGroupAssetsUploadProgressU3mDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsUploadProgressU3mDeletePost(orgGroupAssetsUploadProgressU3mDeletePostRequest?: OrgGroupAssetsUploadProgressU3mDeletePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupAssetsUploadProgressU3mDeletePost(orgGroupAssetsUploadProgressU3mDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Progress - u3m
         * @param {OrgGroupAssetsUploadProgressU3mGetListPostRequest} [orgGroupAssetsUploadProgressU3mGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupAssetsUploadProgressU3mGetListPost(orgGroupAssetsUploadProgressU3mGetListPostRequest?: OrgGroupAssetsUploadProgressU3mGetListPostRequest, options?: any): AxiosPromise<OrgGroupAssetsUploadProgressU3mGetListPost200Response> {
            return localVarFp.orgGroupAssetsUploadProgressU3mGetListPost(orgGroupAssetsUploadProgressU3mGetListPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupAssetsApi - object-oriented interface
 * @export
 * @class GroupAssetsApi
 * @extends {BaseAPI}
 */
export class GroupAssetsApi extends BaseAPI {
    /**
     * 
     * @summary assets add to workspace
     * @param {OrgGroupAssetsMaterialAddToWorkspacePostRequest} [orgGroupAssetsMaterialAddToWorkspacePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialAddToWorkspacePost(orgGroupAssetsMaterialAddToWorkspacePostRequest?: OrgGroupAssetsMaterialAddToWorkspacePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialAddToWorkspacePost(orgGroupAssetsMaterialAddToWorkspacePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量上傳 - 產生S3檔案上傳url
     * @param {OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest} [orgAssetsMaterialBatchUploadGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialBatchUploadGetUploadUrlPost(orgAssetsMaterialBatchUploadGetUploadUrlPostRequest?: OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialBatchUploadGetUploadUrlPost(orgAssetsMaterialBatchUploadGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  **Access roles:** To be clear define
     * @summary 批量上傳
     * @param {OrgGroupAssetsMaterialBatchUploadPostRequest} [orgGroupAssetsMaterialBatchUploadPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialBatchUploadPost(orgGroupAssetsMaterialBatchUploadPostRequest?: OrgGroupAssetsMaterialBatchUploadPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialBatchUploadPost(orgGroupAssetsMaterialBatchUploadPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Carbon copy
     * @param {OrgGroupAssetsMaterialGetPostRequest} [orgGroupAssetsMaterialGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialCarbonCopyPost(orgGroupAssetsMaterialGetPostRequest?: OrgGroupAssetsMaterialGetPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialCarbonCopyPost(orgGroupAssetsMaterialGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得此次 Clone 產生 quota 數量
     * @param {OrgGroupAssetsMaterialCloneCheckPostRequest} [orgGroupAssetsMaterialCloneCheckPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialCloneCheckPost(orgGroupAssetsMaterialCloneCheckPostRequest?: OrgGroupAssetsMaterialCloneCheckPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialCloneCheckPost(orgGroupAssetsMaterialCloneCheckPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Clone
     * @param {OrgGroupAssetsMaterialClonePostRequest} [orgGroupAssetsMaterialClonePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialClonePost(orgGroupAssetsMaterialClonePostRequest?: OrgGroupAssetsMaterialClonePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialClonePost(orgGroupAssetsMaterialClonePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 確定新增布料資訊
     * @param {OrgGroupAssetsMaterialCreatePostRequest} [orgGroupAssetsMaterialCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialCreatePost(orgGroupAssetsMaterialCreatePostRequest?: OrgGroupAssetsMaterialCreatePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialCreatePost(orgGroupAssetsMaterialCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 建立單一布料時上傳補充資料 - 產生S3檔案上傳url
     * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialCreateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialCreateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 建立單一布料時上傳補充資料
     * @param {OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest} [orgGroupAssetsMaterialCreateUploadAttachmentPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialCreateUploadAttachmentPost(orgGroupAssetsMaterialCreateUploadAttachmentPostRequest?: OrgGroupAssetsMaterialCreateUploadAttachmentPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialCreateUploadAttachmentPost(orgGroupAssetsMaterialCreateUploadAttachmentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 確認要刪除布料是否可以刪除
     * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialDeleteCheckPost(orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialDeleteCheckPost(orgGroupAssetsMaterialDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除布料
     * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialDeletePost(orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialDeletePost(orgGroupAssetsMaterialDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 匯出 Excel
     * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialExportPost(orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialExportPost(orgGroupAssetsMaterialDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得布料清單
     * @param {OrgGroupAssetsMaterialGetListPostRequest} [orgGroupAssetsMaterialGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialGetListPost(orgGroupAssetsMaterialGetListPostRequest?: OrgGroupAssetsMaterialGetListPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialGetListPost(orgGroupAssetsMaterialGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得單一布料資料
     * @param {OrgGroupAssetsMaterialGetPostRequest} [orgGroupAssetsMaterialGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialGetPost(orgGroupAssetsMaterialGetPostRequest?: OrgGroupAssetsMaterialGetPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialGetPost(orgGroupAssetsMaterialGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 大量匯出 Excel
     * @param {OrgGroupAssetsMaterialDeletePostRequest} [orgGroupAssetsMaterialDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialMassExportPost(orgGroupAssetsMaterialDeletePostRequest?: OrgGroupAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialMassExportPost(orgGroupAssetsMaterialDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 合併布卡
     * @param {OrgGroupAssetsMaterialMergePostRequest} [orgGroupAssetsMaterialMergePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialMergePost(orgGroupAssetsMaterialMergePostRequest?: OrgGroupAssetsMaterialMergePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialMergePost(orgGroupAssetsMaterialMergePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 取得布料相關選項資訊
     * @param {OrgGroupUserGetPostRequest} [orgGroupUserGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialOptionsPost(orgGroupUserGetPostRequest?: OrgGroupUserGetPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialOptionsPost(orgGroupUserGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Client 端 Smart Upload 產生S3檔案上傳url
     * @param {GeneralGetUploadUrlPostRequest} [generalGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialSmartUploadGetUploadUrlPost(generalGetUploadUrlPostRequest?: GeneralGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialSmartUploadGetUploadUrlPost(generalGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  **Access roles:** To be clear define
     * @summary Client 端 Smart Upload
     * @param {OrgGroupAssetsMaterialSmartUploadPostRequest} [orgGroupAssetsMaterialSmartUploadPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialSmartUploadPost(orgGroupAssetsMaterialSmartUploadPostRequest?: OrgGroupAssetsMaterialSmartUploadPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialSmartUploadPost(orgGroupAssetsMaterialSmartUploadPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增 pantone 色號
     * @param {OrgGroupAssetsMaterialUpdateAddPantonePostRequest} [orgGroupAssetsMaterialUpdateAddPantonePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateAddPantonePost(orgGroupAssetsMaterialUpdateAddPantonePostRequest?: OrgGroupAssetsMaterialUpdateAddPantonePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateAddPantonePost(orgGroupAssetsMaterialUpdateAddPantonePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 設定產品預覽圖-產生S3檔案上傳url
     * @param {OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest} [orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateCoverImgGetUploadUrlPost(orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateCoverImgGetUploadUrlPost(orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 設定產品預覽圖
     * @param {OrgGroupAssetsMaterialUpdateCoverImgPostRequest} [orgGroupAssetsMaterialUpdateCoverImgPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateCoverImgPost(orgGroupAssetsMaterialUpdateCoverImgPostRequest?: OrgGroupAssetsMaterialUpdateCoverImgPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateCoverImgPost(orgGroupAssetsMaterialUpdateCoverImgPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 建立 U3M-產生S3檔案上傳url
     * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateGenerateU3mGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateGenerateU3mGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 建立 U3M
     * @param {OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest} [orgGroupAssetsMaterialUpdateGenerateU3mPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateGenerateU3mPost(orgGroupAssetsMaterialUpdateGenerateU3mPostRequest?: OrgGroupAssetsMaterialUpdateGenerateU3mPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateGenerateU3mPost(orgGroupAssetsMaterialUpdateGenerateU3mPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 設定單面布或雙面布
     * @param {OrgGroupAssetsMaterialUpdateIsDoubleSidePostRequest} [orgGroupAssetsMaterialUpdateIsDoubleSidePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateIsDoubleSidePost(orgGroupAssetsMaterialUpdateIsDoubleSidePostRequest?: OrgGroupAssetsMaterialUpdateIsDoubleSidePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateIsDoubleSidePost(orgGroupAssetsMaterialUpdateIsDoubleSidePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 編輯布料資訊
     * @param {OrgGroupAssetsMaterialUpdatePostRequest} [orgGroupAssetsMaterialUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdatePost(orgGroupAssetsMaterialUpdatePostRequest?: OrgGroupAssetsMaterialUpdatePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdatePost(orgGroupAssetsMaterialUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯布料時移除補充資料
     * @param {OrgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest} [orgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateRemoveAttachmentPost(orgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest?: OrgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateRemoveAttachmentPost(orgGroupAssetsMaterialUpdateRemoveAttachmentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除 pantone 色號
     * @param {OrgGroupAssetsMaterialUpdateRemovePantonePostRequest} [orgGroupAssetsMaterialUpdateRemovePantonePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateRemovePantonePost(orgGroupAssetsMaterialUpdateRemovePantonePostRequest?: OrgGroupAssetsMaterialUpdateRemovePantonePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateRemovePantonePost(orgGroupAssetsMaterialUpdateRemovePantonePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯正反面-產生S3檔案上傳url
     * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateScanImageGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateScanImageGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯正反面
     * @param {OrgGroupAssetsMaterialUpdateScanImagePostRequest} [orgGroupAssetsMaterialUpdateScanImagePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateScanImagePost(orgGroupAssetsMaterialUpdateScanImagePostRequest?: OrgGroupAssetsMaterialUpdateScanImagePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateScanImagePost(orgGroupAssetsMaterialUpdateScanImagePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 簡易編輯布料 inventory
     * @param {OrgGroupAssetsMaterialUpdateSimpleInventoryPostRequest} [orgGroupAssetsMaterialUpdateSimpleInventoryPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateSimpleInventoryPost(orgGroupAssetsMaterialUpdateSimpleInventoryPostRequest?: OrgGroupAssetsMaterialUpdateSimpleInventoryPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateSimpleInventoryPost(orgGroupAssetsMaterialUpdateSimpleInventoryPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 簡易編輯布料 public price
     * @param {OrgGroupAssetsMaterialUpdateSimplePublicPricePostRequest} [orgGroupAssetsMaterialUpdateSimplePublicPricePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateSimplePublicPricePost(orgGroupAssetsMaterialUpdateSimplePublicPricePostRequest?: OrgGroupAssetsMaterialUpdateSimplePublicPricePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateSimplePublicPricePost(orgGroupAssetsMaterialUpdateSimplePublicPricePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 簡易編輯布料 spec
     * @param {OrgGroupAssetsMaterialUpdateSimpleSpecPostRequest} [orgGroupAssetsMaterialUpdateSimpleSpecPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateSimpleSpecPost(orgGroupAssetsMaterialUpdateSimpleSpecPostRequest?: OrgGroupAssetsMaterialUpdateSimpleSpecPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateSimpleSpecPost(orgGroupAssetsMaterialUpdateSimpleSpecPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 簡易編輯布料 tag
     * @param {OrgGroupAssetsMaterialUpdateSimpleTagPostRequest} [orgGroupAssetsMaterialUpdateSimpleTagPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateSimpleTagPost(orgGroupAssetsMaterialUpdateSimpleTagPostRequest?: OrgGroupAssetsMaterialUpdateSimpleTagPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateSimpleTagPost(orgGroupAssetsMaterialUpdateSimpleTagPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯布料時上傳補充資料 - 產生S3檔案上傳url
     * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯布料時上傳補充資料
     * @param {OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest} [orgGroupAssetsMaterialUpdateUploadAttachmentPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsMaterialUpdateUploadAttachmentPost(orgGroupAssetsMaterialUpdateUploadAttachmentPostRequest?: OrgGroupAssetsMaterialUpdateUploadAttachmentPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsMaterialUpdateUploadAttachmentPost(orgGroupAssetsMaterialUpdateUploadAttachmentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Progress - excel
     * @param {OrgGroupAssetsUploadProgressExcelDeletePostRequest} [orgGroupAssetsUploadProgressExcelDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsUploadProgressExcelDeletePost(orgGroupAssetsUploadProgressExcelDeletePostRequest?: OrgGroupAssetsUploadProgressExcelDeletePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsUploadProgressExcelDeletePost(orgGroupAssetsUploadProgressExcelDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Progress - excel
     * @param {OrgGroupAssetsUploadProgressExcelGetListPostRequest} [orgGroupAssetsUploadProgressExcelGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsUploadProgressExcelGetListPost(orgGroupAssetsUploadProgressExcelGetListPostRequest?: OrgGroupAssetsUploadProgressExcelGetListPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsUploadProgressExcelGetListPost(orgGroupAssetsUploadProgressExcelGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Progress - excel
     * @param {OrgGroupAssetsUploadProgressExcelDeletePostRequest} [orgGroupAssetsUploadProgressExcelDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsUploadProgressExcelGetMaterialListPost(orgGroupAssetsUploadProgressExcelDeletePostRequest?: OrgGroupAssetsUploadProgressExcelDeletePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsUploadProgressExcelGetMaterialListPost(orgGroupAssetsUploadProgressExcelDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Progress - Material
     * @param {OrgGroupAssetsUploadProgressMaterialDeletePostRequest} [orgGroupAssetsUploadProgressMaterialDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsUploadProgressMaterialDeletePost(orgGroupAssetsUploadProgressMaterialDeletePostRequest?: OrgGroupAssetsUploadProgressMaterialDeletePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsUploadProgressMaterialDeletePost(orgGroupAssetsUploadProgressMaterialDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Progress - Material
     * @param {OrgGroupAssetsUploadProgressMaterialGetListPostRequest} [orgGroupAssetsUploadProgressMaterialGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsUploadProgressMaterialGetListPost(orgGroupAssetsUploadProgressMaterialGetListPostRequest?: OrgGroupAssetsUploadProgressMaterialGetListPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsUploadProgressMaterialGetListPost(orgGroupAssetsUploadProgressMaterialGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Progress - u3m
     * @param {OrgGroupAssetsUploadProgressU3mDeletePostRequest} [orgGroupAssetsUploadProgressU3mDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsUploadProgressU3mDeletePost(orgGroupAssetsUploadProgressU3mDeletePostRequest?: OrgGroupAssetsUploadProgressU3mDeletePostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsUploadProgressU3mDeletePost(orgGroupAssetsUploadProgressU3mDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Progress - u3m
     * @param {OrgGroupAssetsUploadProgressU3mGetListPostRequest} [orgGroupAssetsUploadProgressU3mGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupAssetsApi
     */
    public orgGroupAssetsUploadProgressU3mGetListPost(orgGroupAssetsUploadProgressU3mGetListPostRequest?: OrgGroupAssetsUploadProgressU3mGetListPostRequest, options?: AxiosRequestConfig) {
        return GroupAssetsApiFp(this.configuration).orgGroupAssetsUploadProgressU3mGetListPost(orgGroupAssetsUploadProgressU3mGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupMemberApi - axios parameter creator
 * @export
 */
export const GroupMemberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **Access roles:** To be clear define
         * @summary 將組織成員加入特定團隊中
         * @param {OrgGroupMemberAddMembersPostRequest} [orgGroupMemberAddMembersPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMemberAddMembersPost: async (orgGroupMemberAddMembersPostRequest?: OrgGroupMemberAddMembersPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/member/add-members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMemberAddMembersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 取消邀請中成員加入團隊
         * @param {OrgGroupMemberCancelInvitationPostRequest} [orgGroupMemberCancelInvitationPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMemberCancelInvitationPost: async (orgGroupMemberCancelInvitationPostRequest?: OrgGroupMemberCancelInvitationPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/member/cancel-invitation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMemberCancelInvitationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 更改團隊成員角色
         * @param {OrgGroupMemberChangeRolePostRequest} [orgGroupMemberChangeRolePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMemberChangeRolePost: async (orgGroupMemberChangeRolePostRequest?: OrgGroupMemberChangeRolePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/member/change-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMemberChangeRolePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 移除團隊中的成員
         * @param {OrgGroupMemberDeleteMemberPostRequest} [orgGroupMemberDeleteMemberPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMemberDeleteMemberPost: async (orgGroupMemberDeleteMemberPostRequest?: OrgGroupMemberDeleteMemberPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/member/delete-member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMemberDeleteMemberPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 透過 email 直接邀請組外人士加入團隊
         * @param {OrgGroupMemberInviteViaEmailPostRequest} [orgGroupMemberInviteViaEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMemberInviteViaEmailPost: async (orgGroupMemberInviteViaEmailPostRequest?: OrgGroupMemberInviteViaEmailPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/member/invite-via-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMemberInviteViaEmailPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 透過 invite link 加入團隊
         * @param {OrgGroupMemberJoinViaEmailPostRequest} [orgGroupMemberJoinViaEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMemberJoinViaEmailPost: async (orgGroupMemberJoinViaEmailPostRequest?: OrgGroupMemberJoinViaEmailPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/member/join-via-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMemberJoinViaEmailPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupMemberApi - functional programming interface
 * @export
 */
export const GroupMemberApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupMemberApiAxiosParamCreator(configuration)
    return {
        /**
         * **Access roles:** To be clear define
         * @summary 將組織成員加入特定團隊中
         * @param {OrgGroupMemberAddMembersPostRequest} [orgGroupMemberAddMembersPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMemberAddMembersPost(orgGroupMemberAddMembersPostRequest?: OrgGroupMemberAddMembersPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGroupGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMemberAddMembersPost(orgGroupMemberAddMembersPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 取消邀請中成員加入團隊
         * @param {OrgGroupMemberCancelInvitationPostRequest} [orgGroupMemberCancelInvitationPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMemberCancelInvitationPost(orgGroupMemberCancelInvitationPostRequest?: OrgGroupMemberCancelInvitationPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGroupGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMemberCancelInvitationPost(orgGroupMemberCancelInvitationPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 更改團隊成員角色
         * @param {OrgGroupMemberChangeRolePostRequest} [orgGroupMemberChangeRolePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMemberChangeRolePost(orgGroupMemberChangeRolePostRequest?: OrgGroupMemberChangeRolePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGroupGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMemberChangeRolePost(orgGroupMemberChangeRolePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 移除團隊中的成員
         * @param {OrgGroupMemberDeleteMemberPostRequest} [orgGroupMemberDeleteMemberPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMemberDeleteMemberPost(orgGroupMemberDeleteMemberPostRequest?: OrgGroupMemberDeleteMemberPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGroupGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMemberDeleteMemberPost(orgGroupMemberDeleteMemberPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 透過 email 直接邀請組外人士加入團隊
         * @param {OrgGroupMemberInviteViaEmailPostRequest} [orgGroupMemberInviteViaEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMemberInviteViaEmailPost(orgGroupMemberInviteViaEmailPostRequest?: OrgGroupMemberInviteViaEmailPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGroupGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMemberInviteViaEmailPost(orgGroupMemberInviteViaEmailPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 透過 invite link 加入團隊
         * @param {OrgGroupMemberJoinViaEmailPostRequest} [orgGroupMemberJoinViaEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMemberJoinViaEmailPost(orgGroupMemberJoinViaEmailPostRequest?: OrgGroupMemberJoinViaEmailPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMemberJoinViaEmailPost(orgGroupMemberJoinViaEmailPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupMemberApi - factory interface
 * @export
 */
export const GroupMemberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupMemberApiFp(configuration)
    return {
        /**
         * **Access roles:** To be clear define
         * @summary 將組織成員加入特定團隊中
         * @param {OrgGroupMemberAddMembersPostRequest} [orgGroupMemberAddMembersPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMemberAddMembersPost(orgGroupMemberAddMembersPostRequest?: OrgGroupMemberAddMembersPostRequest, options?: any): AxiosPromise<OrgGroupGetPost200Response> {
            return localVarFp.orgGroupMemberAddMembersPost(orgGroupMemberAddMembersPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 取消邀請中成員加入團隊
         * @param {OrgGroupMemberCancelInvitationPostRequest} [orgGroupMemberCancelInvitationPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMemberCancelInvitationPost(orgGroupMemberCancelInvitationPostRequest?: OrgGroupMemberCancelInvitationPostRequest, options?: any): AxiosPromise<OrgGroupGetPost200Response> {
            return localVarFp.orgGroupMemberCancelInvitationPost(orgGroupMemberCancelInvitationPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 更改團隊成員角色
         * @param {OrgGroupMemberChangeRolePostRequest} [orgGroupMemberChangeRolePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMemberChangeRolePost(orgGroupMemberChangeRolePostRequest?: OrgGroupMemberChangeRolePostRequest, options?: any): AxiosPromise<OrgGroupGetPost200Response> {
            return localVarFp.orgGroupMemberChangeRolePost(orgGroupMemberChangeRolePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 移除團隊中的成員
         * @param {OrgGroupMemberDeleteMemberPostRequest} [orgGroupMemberDeleteMemberPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMemberDeleteMemberPost(orgGroupMemberDeleteMemberPostRequest?: OrgGroupMemberDeleteMemberPostRequest, options?: any): AxiosPromise<OrgGroupGetPost200Response> {
            return localVarFp.orgGroupMemberDeleteMemberPost(orgGroupMemberDeleteMemberPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 透過 email 直接邀請組外人士加入團隊
         * @param {OrgGroupMemberInviteViaEmailPostRequest} [orgGroupMemberInviteViaEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMemberInviteViaEmailPost(orgGroupMemberInviteViaEmailPostRequest?: OrgGroupMemberInviteViaEmailPostRequest, options?: any): AxiosPromise<OrgGroupGetPost200Response> {
            return localVarFp.orgGroupMemberInviteViaEmailPost(orgGroupMemberInviteViaEmailPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 透過 invite link 加入團隊
         * @param {OrgGroupMemberJoinViaEmailPostRequest} [orgGroupMemberJoinViaEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMemberJoinViaEmailPost(orgGroupMemberJoinViaEmailPostRequest?: OrgGroupMemberJoinViaEmailPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupMemberJoinViaEmailPost(orgGroupMemberJoinViaEmailPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupMemberApi - object-oriented interface
 * @export
 * @class GroupMemberApi
 * @extends {BaseAPI}
 */
export class GroupMemberApi extends BaseAPI {
    /**
     * **Access roles:** To be clear define
     * @summary 將組織成員加入特定團隊中
     * @param {OrgGroupMemberAddMembersPostRequest} [orgGroupMemberAddMembersPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMemberApi
     */
    public orgGroupMemberAddMembersPost(orgGroupMemberAddMembersPostRequest?: OrgGroupMemberAddMembersPostRequest, options?: AxiosRequestConfig) {
        return GroupMemberApiFp(this.configuration).orgGroupMemberAddMembersPost(orgGroupMemberAddMembersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 取消邀請中成員加入團隊
     * @param {OrgGroupMemberCancelInvitationPostRequest} [orgGroupMemberCancelInvitationPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMemberApi
     */
    public orgGroupMemberCancelInvitationPost(orgGroupMemberCancelInvitationPostRequest?: OrgGroupMemberCancelInvitationPostRequest, options?: AxiosRequestConfig) {
        return GroupMemberApiFp(this.configuration).orgGroupMemberCancelInvitationPost(orgGroupMemberCancelInvitationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 更改團隊成員角色
     * @param {OrgGroupMemberChangeRolePostRequest} [orgGroupMemberChangeRolePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMemberApi
     */
    public orgGroupMemberChangeRolePost(orgGroupMemberChangeRolePostRequest?: OrgGroupMemberChangeRolePostRequest, options?: AxiosRequestConfig) {
        return GroupMemberApiFp(this.configuration).orgGroupMemberChangeRolePost(orgGroupMemberChangeRolePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 移除團隊中的成員
     * @param {OrgGroupMemberDeleteMemberPostRequest} [orgGroupMemberDeleteMemberPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMemberApi
     */
    public orgGroupMemberDeleteMemberPost(orgGroupMemberDeleteMemberPostRequest?: OrgGroupMemberDeleteMemberPostRequest, options?: AxiosRequestConfig) {
        return GroupMemberApiFp(this.configuration).orgGroupMemberDeleteMemberPost(orgGroupMemberDeleteMemberPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 透過 email 直接邀請組外人士加入團隊
     * @param {OrgGroupMemberInviteViaEmailPostRequest} [orgGroupMemberInviteViaEmailPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMemberApi
     */
    public orgGroupMemberInviteViaEmailPost(orgGroupMemberInviteViaEmailPostRequest?: OrgGroupMemberInviteViaEmailPostRequest, options?: AxiosRequestConfig) {
        return GroupMemberApiFp(this.configuration).orgGroupMemberInviteViaEmailPost(orgGroupMemberInviteViaEmailPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 透過 invite link 加入團隊
     * @param {OrgGroupMemberJoinViaEmailPostRequest} [orgGroupMemberJoinViaEmailPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMemberApi
     */
    public orgGroupMemberJoinViaEmailPost(orgGroupMemberJoinViaEmailPostRequest?: OrgGroupMemberJoinViaEmailPostRequest, options?: AxiosRequestConfig) {
        return GroupMemberApiFp(this.configuration).orgGroupMemberJoinViaEmailPost(orgGroupMemberJoinViaEmailPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupMoodboardApi - axios parameter creator
 * @export
 */
export const GroupMoodboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 建立 Moodboard
         * @param {OrgGroupMoodboardCreatePostRequest} [orgGroupMoodboardCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardCreatePost: async (orgGroupMoodboardCreatePostRequest?: OrgGroupMoodboardCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除 Moodboard
         * @param {OrgGroupMoodboardGetPostRequest} [orgGroupMoodboardGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardDeletePost: async (orgGroupMoodboardGetPostRequest?: OrgGroupMoodboardGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Moodboard 清單
         * @param {OrgGroupGetPostRequest} [orgGroupGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardGetListPost: async (orgGroupGetPostRequest?: OrgGroupGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Moodboard 資訊
         * @param {OrgGroupMoodboardGetPostRequest} [orgGroupMoodboardGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardGetPost: async (orgGroupMoodboardGetPostRequest?: OrgGroupMoodboardGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增 Moodboard Comment 資訊
         * @param {OrgGroupMoodboardOfferCommentCreatePostRequest} [orgGroupMoodboardOfferCommentCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferCommentCreatePost: async (orgGroupMoodboardOfferCommentCreatePostRequest?: OrgGroupMoodboardOfferCommentCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/comment/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferCommentCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Moodboard Comment 資訊
         * @param {OrgGroupMoodboardOfferCommentGetPostRequest} [orgGroupMoodboardOfferCommentGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferCommentGetPost: async (orgGroupMoodboardOfferCommentGetPostRequest?: OrgGroupMoodboardOfferCommentGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/comment/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferCommentGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgGroupMoodboardOfferNodeDeletePostRequest} [orgGroupMoodboardOfferNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeCloneCheckPost: async (orgGroupMoodboardOfferNodeDeletePostRequest?: OrgGroupMoodboardOfferNodeDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/node/clone-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferNodeDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary clone
         * @param {OrgGroupMoodboardOfferNodeClonePostRequest} [orgGroupMoodboardOfferNodeClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeClonePost: async (orgGroupMoodboardOfferNodeClonePostRequest?: OrgGroupMoodboardOfferNodeClonePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/node/clone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferNodeClonePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增 Moodboard node collection
         * @param {OrgGroupMoodboardOfferNodeCollectionCreatePostRequest} [orgGroupMoodboardOfferNodeCollectionCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeCollectionCreatePost: async (orgGroupMoodboardOfferNodeCollectionCreatePostRequest?: OrgGroupMoodboardOfferNodeCollectionCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/node/collection/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferNodeCollectionCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Moodboard Offer Node - colection
         * @param {OrgGroupMoodboardOfferNodeCollectionGetPostRequest} [orgGroupMoodboardOfferNodeCollectionGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeCollectionGetPost: async (orgGroupMoodboardOfferNodeCollectionGetPostRequest?: OrgGroupMoodboardOfferNodeCollectionGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/node/collection/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferNodeCollectionGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新 Moodboard node collection
         * @param {OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest} [orgGroupMoodboardOfferNodeCollectionUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeCollectionUpdatePost: async (orgGroupMoodboardOfferNodeCollectionUpdatePostRequest?: OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/node/collection/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferNodeCollectionUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除 Moodboard Offer Node
         * @param {OrgGroupMoodboardOfferNodeDeletePostRequest} [orgGroupMoodboardOfferNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeDeletePost: async (orgGroupMoodboardOfferNodeDeletePostRequest?: OrgGroupMoodboardOfferNodeDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/node/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferNodeDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增 Moodboard node material
         * @param {OrgGroupMoodboardOfferNodeMaterialCreatePostRequest} [orgGroupMoodboardOfferNodeMaterialCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeMaterialCreatePost: async (orgGroupMoodboardOfferNodeMaterialCreatePostRequest?: OrgGroupMoodboardOfferNodeMaterialCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/node/material/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferNodeMaterialCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 node material
         * @param {OrgGroupMoodboardOfferNodeMaterialGetPostRequest} [orgGroupMoodboardOfferNodeMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeMaterialGetPost: async (orgGroupMoodboardOfferNodeMaterialGetPostRequest?: OrgGroupMoodboardOfferNodeMaterialGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/node/material/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferNodeMaterialGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pick Moodboard Offer Node
         * @param {OrgGroupMoodboardOfferNodePickPostRequest} [orgGroupMoodboardOfferNodePickPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodePickPost: async (orgGroupMoodboardOfferNodePickPostRequest?: OrgGroupMoodboardOfferNodePickPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/node/pick`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferNodePickPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unpick Moodboard Offer Node
         * @param {OrgGroupMoodboardOfferNodePickPostRequest} [orgGroupMoodboardOfferNodePickPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeUnpickPost: async (orgGroupMoodboardOfferNodePickPostRequest?: OrgGroupMoodboardOfferNodePickPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/node/unpick`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferNodePickPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 匯出 Moodboard Offer Picked 資訊
         * @param {OrgGroupMoodboardOfferPickedExportPostRequest} [orgGroupMoodboardOfferPickedExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferPickedExportPost: async (orgGroupMoodboardOfferPickedExportPostRequest?: OrgGroupMoodboardOfferPickedExportPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/picked/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferPickedExportPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Moodboard Offer Picked 資訊
         * @param {OrgGroupMoodboardOfferPickedGetPostRequest} [orgGroupMoodboardOfferPickedGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferPickedGetPost: async (orgGroupMoodboardOfferPickedGetPostRequest?: OrgGroupMoodboardOfferPickedGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/picked/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferPickedGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 大量匯出 Moodboard Offer Picked 資訊
         * @param {OrgGroupMoodboardOfferPickedExportPostRequest} [orgGroupMoodboardOfferPickedExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferPickedMassExportPost: async (orgGroupMoodboardOfferPickedExportPostRequest?: OrgGroupMoodboardOfferPickedExportPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/offer/picked/mass-export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardOfferPickedExportPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分享 Moodboard 取得分享對象
         * @param {OrgGroupMoodboardShareGetTargetPostRequest} [orgGroupMoodboardShareGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardShareGetTargetPost: async (orgGroupMoodboardShareGetTargetPostRequest?: OrgGroupMoodboardShareGetTargetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/share/get-target`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardShareGetTargetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分享 Moodboard
         * @param {OrgGroupMoodboardSharePostRequest} [orgGroupMoodboardSharePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardSharePost: async (orgGroupMoodboardSharePostRequest?: OrgGroupMoodboardSharePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/share`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardSharePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移除分享 Moodboard
         * @param {OrgGroupMoodboardShareRemovePostRequest} [orgGroupMoodboardShareRemovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardShareRemovePost: async (orgGroupMoodboardShareRemovePostRequest?: OrgGroupMoodboardShareRemovePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/share/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardShareRemovePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯 Moodboard
         * @param {OrgGroupMoodboardUpdatePostRequest} [orgGroupMoodboardUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardUpdatePost: async (orgGroupMoodboardUpdatePostRequest?: OrgGroupMoodboardUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/moodboard/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupMoodboardUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupMoodboardApi - functional programming interface
 * @export
 */
export const GroupMoodboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupMoodboardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 建立 Moodboard
         * @param {OrgGroupMoodboardCreatePostRequest} [orgGroupMoodboardCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardCreatePost(orgGroupMoodboardCreatePostRequest?: OrgGroupMoodboardCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardCreatePost(orgGroupMoodboardCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除 Moodboard
         * @param {OrgGroupMoodboardGetPostRequest} [orgGroupMoodboardGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardDeletePost(orgGroupMoodboardGetPostRequest?: OrgGroupMoodboardGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardDeletePost(orgGroupMoodboardGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Moodboard 清單
         * @param {OrgGroupGetPostRequest} [orgGroupGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardGetListPost(orgGroupGetPostRequest?: OrgGroupGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardGetListPost(orgGroupGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Moodboard 資訊
         * @param {OrgGroupMoodboardGetPostRequest} [orgGroupMoodboardGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardGetPost(orgGroupMoodboardGetPostRequest?: OrgGroupMoodboardGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardGetPost(orgGroupMoodboardGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增 Moodboard Comment 資訊
         * @param {OrgGroupMoodboardOfferCommentCreatePostRequest} [orgGroupMoodboardOfferCommentCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferCommentCreatePost(orgGroupMoodboardOfferCommentCreatePostRequest?: OrgGroupMoodboardOfferCommentCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferCommentGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferCommentCreatePost(orgGroupMoodboardOfferCommentCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Moodboard Comment 資訊
         * @param {OrgGroupMoodboardOfferCommentGetPostRequest} [orgGroupMoodboardOfferCommentGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferCommentGetPost(orgGroupMoodboardOfferCommentGetPostRequest?: OrgGroupMoodboardOfferCommentGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferCommentGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferCommentGetPost(orgGroupMoodboardOfferCommentGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgGroupMoodboardOfferNodeDeletePostRequest} [orgGroupMoodboardOfferNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferNodeCloneCheckPost(orgGroupMoodboardOfferNodeDeletePostRequest?: OrgGroupMoodboardOfferNodeDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedCloneCheckPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferNodeCloneCheckPost(orgGroupMoodboardOfferNodeDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary clone
         * @param {OrgGroupMoodboardOfferNodeClonePostRequest} [orgGroupMoodboardOfferNodeClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferNodeClonePost(orgGroupMoodboardOfferNodeClonePostRequest?: OrgGroupMoodboardOfferNodeClonePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferNodeClonePost(orgGroupMoodboardOfferNodeClonePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增 Moodboard node collection
         * @param {OrgGroupMoodboardOfferNodeCollectionCreatePostRequest} [orgGroupMoodboardOfferNodeCollectionCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferNodeCollectionCreatePost(orgGroupMoodboardOfferNodeCollectionCreatePostRequest?: OrgGroupMoodboardOfferNodeCollectionCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferPickedGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferNodeCollectionCreatePost(orgGroupMoodboardOfferNodeCollectionCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Moodboard Offer Node - colection
         * @param {OrgGroupMoodboardOfferNodeCollectionGetPostRequest} [orgGroupMoodboardOfferNodeCollectionGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferNodeCollectionGetPost(orgGroupMoodboardOfferNodeCollectionGetPostRequest?: OrgGroupMoodboardOfferNodeCollectionGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferPickedGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferNodeCollectionGetPost(orgGroupMoodboardOfferNodeCollectionGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新 Moodboard node collection
         * @param {OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest} [orgGroupMoodboardOfferNodeCollectionUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferNodeCollectionUpdatePost(orgGroupMoodboardOfferNodeCollectionUpdatePostRequest?: OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferPickedGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferNodeCollectionUpdatePost(orgGroupMoodboardOfferNodeCollectionUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除 Moodboard Offer Node
         * @param {OrgGroupMoodboardOfferNodeDeletePostRequest} [orgGroupMoodboardOfferNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferNodeDeletePost(orgGroupMoodboardOfferNodeDeletePostRequest?: OrgGroupMoodboardOfferNodeDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferNodeDeletePost(orgGroupMoodboardOfferNodeDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增 Moodboard node material
         * @param {OrgGroupMoodboardOfferNodeMaterialCreatePostRequest} [orgGroupMoodboardOfferNodeMaterialCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferNodeMaterialCreatePost(orgGroupMoodboardOfferNodeMaterialCreatePostRequest?: OrgGroupMoodboardOfferNodeMaterialCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferPickedGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferNodeMaterialCreatePost(orgGroupMoodboardOfferNodeMaterialCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 node material
         * @param {OrgGroupMoodboardOfferNodeMaterialGetPostRequest} [orgGroupMoodboardOfferNodeMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferNodeMaterialGetPost(orgGroupMoodboardOfferNodeMaterialGetPostRequest?: OrgGroupMoodboardOfferNodeMaterialGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferNodeMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferNodeMaterialGetPost(orgGroupMoodboardOfferNodeMaterialGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pick Moodboard Offer Node
         * @param {OrgGroupMoodboardOfferNodePickPostRequest} [orgGroupMoodboardOfferNodePickPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferNodePickPost(orgGroupMoodboardOfferNodePickPostRequest?: OrgGroupMoodboardOfferNodePickPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferNodePickPost(orgGroupMoodboardOfferNodePickPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Unpick Moodboard Offer Node
         * @param {OrgGroupMoodboardOfferNodePickPostRequest} [orgGroupMoodboardOfferNodePickPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferNodeUnpickPost(orgGroupMoodboardOfferNodePickPostRequest?: OrgGroupMoodboardOfferNodePickPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferNodeUnpickPost(orgGroupMoodboardOfferNodePickPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 匯出 Moodboard Offer Picked 資訊
         * @param {OrgGroupMoodboardOfferPickedExportPostRequest} [orgGroupMoodboardOfferPickedExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferPickedExportPost(orgGroupMoodboardOfferPickedExportPostRequest?: OrgGroupMoodboardOfferPickedExportPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialExportPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferPickedExportPost(orgGroupMoodboardOfferPickedExportPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Moodboard Offer Picked 資訊
         * @param {OrgGroupMoodboardOfferPickedGetPostRequest} [orgGroupMoodboardOfferPickedGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferPickedGetPost(orgGroupMoodboardOfferPickedGetPostRequest?: OrgGroupMoodboardOfferPickedGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferPickedGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferPickedGetPost(orgGroupMoodboardOfferPickedGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 大量匯出 Moodboard Offer Picked 資訊
         * @param {OrgGroupMoodboardOfferPickedExportPostRequest} [orgGroupMoodboardOfferPickedExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardOfferPickedMassExportPost(orgGroupMoodboardOfferPickedExportPostRequest?: OrgGroupMoodboardOfferPickedExportPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardOfferPickedMassExportPost(orgGroupMoodboardOfferPickedExportPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 分享 Moodboard 取得分享對象
         * @param {OrgGroupMoodboardShareGetTargetPostRequest} [orgGroupMoodboardShareGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardShareGetTargetPost(orgGroupMoodboardShareGetTargetPostRequest?: OrgGroupMoodboardShareGetTargetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardShareGetTargetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardShareGetTargetPost(orgGroupMoodboardShareGetTargetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 分享 Moodboard
         * @param {OrgGroupMoodboardSharePostRequest} [orgGroupMoodboardSharePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardSharePost(orgGroupMoodboardSharePostRequest?: OrgGroupMoodboardSharePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardSharePost(orgGroupMoodboardSharePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 移除分享 Moodboard
         * @param {OrgGroupMoodboardShareRemovePostRequest} [orgGroupMoodboardShareRemovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardShareRemovePost(orgGroupMoodboardShareRemovePostRequest?: OrgGroupMoodboardShareRemovePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardShareRemovePost(orgGroupMoodboardShareRemovePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯 Moodboard
         * @param {OrgGroupMoodboardUpdatePostRequest} [orgGroupMoodboardUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupMoodboardUpdatePost(orgGroupMoodboardUpdatePostRequest?: OrgGroupMoodboardUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupMoodboardUpdatePost(orgGroupMoodboardUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupMoodboardApi - factory interface
 * @export
 */
export const GroupMoodboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupMoodboardApiFp(configuration)
    return {
        /**
         * 
         * @summary 建立 Moodboard
         * @param {OrgGroupMoodboardCreatePostRequest} [orgGroupMoodboardCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardCreatePost(orgGroupMoodboardCreatePostRequest?: OrgGroupMoodboardCreatePostRequest, options?: any): AxiosPromise<OrgMoodboardGetPost200Response> {
            return localVarFp.orgGroupMoodboardCreatePost(orgGroupMoodboardCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除 Moodboard
         * @param {OrgGroupMoodboardGetPostRequest} [orgGroupMoodboardGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardDeletePost(orgGroupMoodboardGetPostRequest?: OrgGroupMoodboardGetPostRequest, options?: any): AxiosPromise<OrgMoodboardGetListPost200Response> {
            return localVarFp.orgGroupMoodboardDeletePost(orgGroupMoodboardGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Moodboard 清單
         * @param {OrgGroupGetPostRequest} [orgGroupGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardGetListPost(orgGroupGetPostRequest?: OrgGroupGetPostRequest, options?: any): AxiosPromise<OrgMoodboardGetListPost200Response> {
            return localVarFp.orgGroupMoodboardGetListPost(orgGroupGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Moodboard 資訊
         * @param {OrgGroupMoodboardGetPostRequest} [orgGroupMoodboardGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardGetPost(orgGroupMoodboardGetPostRequest?: OrgGroupMoodboardGetPostRequest, options?: any): AxiosPromise<OrgMoodboardGetPost200Response> {
            return localVarFp.orgGroupMoodboardGetPost(orgGroupMoodboardGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增 Moodboard Comment 資訊
         * @param {OrgGroupMoodboardOfferCommentCreatePostRequest} [orgGroupMoodboardOfferCommentCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferCommentCreatePost(orgGroupMoodboardOfferCommentCreatePostRequest?: OrgGroupMoodboardOfferCommentCreatePostRequest, options?: any): AxiosPromise<OrgMoodboardOfferCommentGetPost200Response> {
            return localVarFp.orgGroupMoodboardOfferCommentCreatePost(orgGroupMoodboardOfferCommentCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Moodboard Comment 資訊
         * @param {OrgGroupMoodboardOfferCommentGetPostRequest} [orgGroupMoodboardOfferCommentGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferCommentGetPost(orgGroupMoodboardOfferCommentGetPostRequest?: OrgGroupMoodboardOfferCommentGetPostRequest, options?: any): AxiosPromise<OrgMoodboardOfferCommentGetPost200Response> {
            return localVarFp.orgGroupMoodboardOfferCommentGetPost(orgGroupMoodboardOfferCommentGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgGroupMoodboardOfferNodeDeletePostRequest} [orgGroupMoodboardOfferNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeCloneCheckPost(orgGroupMoodboardOfferNodeDeletePostRequest?: OrgGroupMoodboardOfferNodeDeletePostRequest, options?: any): AxiosPromise<ShareGetReceivedCloneCheckPost200Response> {
            return localVarFp.orgGroupMoodboardOfferNodeCloneCheckPost(orgGroupMoodboardOfferNodeDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary clone
         * @param {OrgGroupMoodboardOfferNodeClonePostRequest} [orgGroupMoodboardOfferNodeClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeClonePost(orgGroupMoodboardOfferNodeClonePostRequest?: OrgGroupMoodboardOfferNodeClonePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupMoodboardOfferNodeClonePost(orgGroupMoodboardOfferNodeClonePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增 Moodboard node collection
         * @param {OrgGroupMoodboardOfferNodeCollectionCreatePostRequest} [orgGroupMoodboardOfferNodeCollectionCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeCollectionCreatePost(orgGroupMoodboardOfferNodeCollectionCreatePostRequest?: OrgGroupMoodboardOfferNodeCollectionCreatePostRequest, options?: any): AxiosPromise<OrgMoodboardOfferPickedGetPost200Response> {
            return localVarFp.orgGroupMoodboardOfferNodeCollectionCreatePost(orgGroupMoodboardOfferNodeCollectionCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Moodboard Offer Node - colection
         * @param {OrgGroupMoodboardOfferNodeCollectionGetPostRequest} [orgGroupMoodboardOfferNodeCollectionGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeCollectionGetPost(orgGroupMoodboardOfferNodeCollectionGetPostRequest?: OrgGroupMoodboardOfferNodeCollectionGetPostRequest, options?: any): AxiosPromise<OrgMoodboardOfferPickedGetPost200Response> {
            return localVarFp.orgGroupMoodboardOfferNodeCollectionGetPost(orgGroupMoodboardOfferNodeCollectionGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新 Moodboard node collection
         * @param {OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest} [orgGroupMoodboardOfferNodeCollectionUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeCollectionUpdatePost(orgGroupMoodboardOfferNodeCollectionUpdatePostRequest?: OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest, options?: any): AxiosPromise<OrgMoodboardOfferPickedGetPost200Response> {
            return localVarFp.orgGroupMoodboardOfferNodeCollectionUpdatePost(orgGroupMoodboardOfferNodeCollectionUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除 Moodboard Offer Node
         * @param {OrgGroupMoodboardOfferNodeDeletePostRequest} [orgGroupMoodboardOfferNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeDeletePost(orgGroupMoodboardOfferNodeDeletePostRequest?: OrgGroupMoodboardOfferNodeDeletePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupMoodboardOfferNodeDeletePost(orgGroupMoodboardOfferNodeDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增 Moodboard node material
         * @param {OrgGroupMoodboardOfferNodeMaterialCreatePostRequest} [orgGroupMoodboardOfferNodeMaterialCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeMaterialCreatePost(orgGroupMoodboardOfferNodeMaterialCreatePostRequest?: OrgGroupMoodboardOfferNodeMaterialCreatePostRequest, options?: any): AxiosPromise<OrgMoodboardOfferPickedGetPost200Response> {
            return localVarFp.orgGroupMoodboardOfferNodeMaterialCreatePost(orgGroupMoodboardOfferNodeMaterialCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 node material
         * @param {OrgGroupMoodboardOfferNodeMaterialGetPostRequest} [orgGroupMoodboardOfferNodeMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeMaterialGetPost(orgGroupMoodboardOfferNodeMaterialGetPostRequest?: OrgGroupMoodboardOfferNodeMaterialGetPostRequest, options?: any): AxiosPromise<OrgMoodboardOfferNodeMaterialGetPost200Response> {
            return localVarFp.orgGroupMoodboardOfferNodeMaterialGetPost(orgGroupMoodboardOfferNodeMaterialGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pick Moodboard Offer Node
         * @param {OrgGroupMoodboardOfferNodePickPostRequest} [orgGroupMoodboardOfferNodePickPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodePickPost(orgGroupMoodboardOfferNodePickPostRequest?: OrgGroupMoodboardOfferNodePickPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupMoodboardOfferNodePickPost(orgGroupMoodboardOfferNodePickPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unpick Moodboard Offer Node
         * @param {OrgGroupMoodboardOfferNodePickPostRequest} [orgGroupMoodboardOfferNodePickPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferNodeUnpickPost(orgGroupMoodboardOfferNodePickPostRequest?: OrgGroupMoodboardOfferNodePickPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupMoodboardOfferNodeUnpickPost(orgGroupMoodboardOfferNodePickPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 匯出 Moodboard Offer Picked 資訊
         * @param {OrgGroupMoodboardOfferPickedExportPostRequest} [orgGroupMoodboardOfferPickedExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferPickedExportPost(orgGroupMoodboardOfferPickedExportPostRequest?: OrgGroupMoodboardOfferPickedExportPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialExportPost200Response> {
            return localVarFp.orgGroupMoodboardOfferPickedExportPost(orgGroupMoodboardOfferPickedExportPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Moodboard Offer Picked 資訊
         * @param {OrgGroupMoodboardOfferPickedGetPostRequest} [orgGroupMoodboardOfferPickedGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferPickedGetPost(orgGroupMoodboardOfferPickedGetPostRequest?: OrgGroupMoodboardOfferPickedGetPostRequest, options?: any): AxiosPromise<OrgMoodboardOfferPickedGetPost200Response> {
            return localVarFp.orgGroupMoodboardOfferPickedGetPost(orgGroupMoodboardOfferPickedGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 大量匯出 Moodboard Offer Picked 資訊
         * @param {OrgGroupMoodboardOfferPickedExportPostRequest} [orgGroupMoodboardOfferPickedExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardOfferPickedMassExportPost(orgGroupMoodboardOfferPickedExportPostRequest?: OrgGroupMoodboardOfferPickedExportPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupMoodboardOfferPickedMassExportPost(orgGroupMoodboardOfferPickedExportPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分享 Moodboard 取得分享對象
         * @param {OrgGroupMoodboardShareGetTargetPostRequest} [orgGroupMoodboardShareGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardShareGetTargetPost(orgGroupMoodboardShareGetTargetPostRequest?: OrgGroupMoodboardShareGetTargetPostRequest, options?: any): AxiosPromise<OrgMoodboardShareGetTargetPost200Response> {
            return localVarFp.orgGroupMoodboardShareGetTargetPost(orgGroupMoodboardShareGetTargetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分享 Moodboard
         * @param {OrgGroupMoodboardSharePostRequest} [orgGroupMoodboardSharePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardSharePost(orgGroupMoodboardSharePostRequest?: OrgGroupMoodboardSharePostRequest, options?: any): AxiosPromise<OrgMoodboardGetPost200Response> {
            return localVarFp.orgGroupMoodboardSharePost(orgGroupMoodboardSharePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 移除分享 Moodboard
         * @param {OrgGroupMoodboardShareRemovePostRequest} [orgGroupMoodboardShareRemovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardShareRemovePost(orgGroupMoodboardShareRemovePostRequest?: OrgGroupMoodboardShareRemovePostRequest, options?: any): AxiosPromise<OrgMoodboardGetPost200Response> {
            return localVarFp.orgGroupMoodboardShareRemovePost(orgGroupMoodboardShareRemovePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯 Moodboard
         * @param {OrgGroupMoodboardUpdatePostRequest} [orgGroupMoodboardUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupMoodboardUpdatePost(orgGroupMoodboardUpdatePostRequest?: OrgGroupMoodboardUpdatePostRequest, options?: any): AxiosPromise<OrgMoodboardGetPost200Response> {
            return localVarFp.orgGroupMoodboardUpdatePost(orgGroupMoodboardUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupMoodboardApi - object-oriented interface
 * @export
 * @class GroupMoodboardApi
 * @extends {BaseAPI}
 */
export class GroupMoodboardApi extends BaseAPI {
    /**
     * 
     * @summary 建立 Moodboard
     * @param {OrgGroupMoodboardCreatePostRequest} [orgGroupMoodboardCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardCreatePost(orgGroupMoodboardCreatePostRequest?: OrgGroupMoodboardCreatePostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardCreatePost(orgGroupMoodboardCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除 Moodboard
     * @param {OrgGroupMoodboardGetPostRequest} [orgGroupMoodboardGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardDeletePost(orgGroupMoodboardGetPostRequest?: OrgGroupMoodboardGetPostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardDeletePost(orgGroupMoodboardGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Moodboard 清單
     * @param {OrgGroupGetPostRequest} [orgGroupGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardGetListPost(orgGroupGetPostRequest?: OrgGroupGetPostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardGetListPost(orgGroupGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Moodboard 資訊
     * @param {OrgGroupMoodboardGetPostRequest} [orgGroupMoodboardGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardGetPost(orgGroupMoodboardGetPostRequest?: OrgGroupMoodboardGetPostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardGetPost(orgGroupMoodboardGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增 Moodboard Comment 資訊
     * @param {OrgGroupMoodboardOfferCommentCreatePostRequest} [orgGroupMoodboardOfferCommentCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferCommentCreatePost(orgGroupMoodboardOfferCommentCreatePostRequest?: OrgGroupMoodboardOfferCommentCreatePostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferCommentCreatePost(orgGroupMoodboardOfferCommentCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Moodboard Comment 資訊
     * @param {OrgGroupMoodboardOfferCommentGetPostRequest} [orgGroupMoodboardOfferCommentGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferCommentGetPost(orgGroupMoodboardOfferCommentGetPostRequest?: OrgGroupMoodboardOfferCommentGetPostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferCommentGetPost(orgGroupMoodboardOfferCommentGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得此次 Clone 產生 quota 數量
     * @param {OrgGroupMoodboardOfferNodeDeletePostRequest} [orgGroupMoodboardOfferNodeDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferNodeCloneCheckPost(orgGroupMoodboardOfferNodeDeletePostRequest?: OrgGroupMoodboardOfferNodeDeletePostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferNodeCloneCheckPost(orgGroupMoodboardOfferNodeDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary clone
     * @param {OrgGroupMoodboardOfferNodeClonePostRequest} [orgGroupMoodboardOfferNodeClonePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferNodeClonePost(orgGroupMoodboardOfferNodeClonePostRequest?: OrgGroupMoodboardOfferNodeClonePostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferNodeClonePost(orgGroupMoodboardOfferNodeClonePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增 Moodboard node collection
     * @param {OrgGroupMoodboardOfferNodeCollectionCreatePostRequest} [orgGroupMoodboardOfferNodeCollectionCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferNodeCollectionCreatePost(orgGroupMoodboardOfferNodeCollectionCreatePostRequest?: OrgGroupMoodboardOfferNodeCollectionCreatePostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferNodeCollectionCreatePost(orgGroupMoodboardOfferNodeCollectionCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Moodboard Offer Node - colection
     * @param {OrgGroupMoodboardOfferNodeCollectionGetPostRequest} [orgGroupMoodboardOfferNodeCollectionGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferNodeCollectionGetPost(orgGroupMoodboardOfferNodeCollectionGetPostRequest?: OrgGroupMoodboardOfferNodeCollectionGetPostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferNodeCollectionGetPost(orgGroupMoodboardOfferNodeCollectionGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新 Moodboard node collection
     * @param {OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest} [orgGroupMoodboardOfferNodeCollectionUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferNodeCollectionUpdatePost(orgGroupMoodboardOfferNodeCollectionUpdatePostRequest?: OrgGroupMoodboardOfferNodeCollectionUpdatePostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferNodeCollectionUpdatePost(orgGroupMoodboardOfferNodeCollectionUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除 Moodboard Offer Node
     * @param {OrgGroupMoodboardOfferNodeDeletePostRequest} [orgGroupMoodboardOfferNodeDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferNodeDeletePost(orgGroupMoodboardOfferNodeDeletePostRequest?: OrgGroupMoodboardOfferNodeDeletePostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferNodeDeletePost(orgGroupMoodboardOfferNodeDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增 Moodboard node material
     * @param {OrgGroupMoodboardOfferNodeMaterialCreatePostRequest} [orgGroupMoodboardOfferNodeMaterialCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferNodeMaterialCreatePost(orgGroupMoodboardOfferNodeMaterialCreatePostRequest?: OrgGroupMoodboardOfferNodeMaterialCreatePostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferNodeMaterialCreatePost(orgGroupMoodboardOfferNodeMaterialCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 node material
     * @param {OrgGroupMoodboardOfferNodeMaterialGetPostRequest} [orgGroupMoodboardOfferNodeMaterialGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferNodeMaterialGetPost(orgGroupMoodboardOfferNodeMaterialGetPostRequest?: OrgGroupMoodboardOfferNodeMaterialGetPostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferNodeMaterialGetPost(orgGroupMoodboardOfferNodeMaterialGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pick Moodboard Offer Node
     * @param {OrgGroupMoodboardOfferNodePickPostRequest} [orgGroupMoodboardOfferNodePickPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferNodePickPost(orgGroupMoodboardOfferNodePickPostRequest?: OrgGroupMoodboardOfferNodePickPostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferNodePickPost(orgGroupMoodboardOfferNodePickPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unpick Moodboard Offer Node
     * @param {OrgGroupMoodboardOfferNodePickPostRequest} [orgGroupMoodboardOfferNodePickPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferNodeUnpickPost(orgGroupMoodboardOfferNodePickPostRequest?: OrgGroupMoodboardOfferNodePickPostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferNodeUnpickPost(orgGroupMoodboardOfferNodePickPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 匯出 Moodboard Offer Picked 資訊
     * @param {OrgGroupMoodboardOfferPickedExportPostRequest} [orgGroupMoodboardOfferPickedExportPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferPickedExportPost(orgGroupMoodboardOfferPickedExportPostRequest?: OrgGroupMoodboardOfferPickedExportPostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferPickedExportPost(orgGroupMoodboardOfferPickedExportPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Moodboard Offer Picked 資訊
     * @param {OrgGroupMoodboardOfferPickedGetPostRequest} [orgGroupMoodboardOfferPickedGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferPickedGetPost(orgGroupMoodboardOfferPickedGetPostRequest?: OrgGroupMoodboardOfferPickedGetPostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferPickedGetPost(orgGroupMoodboardOfferPickedGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 大量匯出 Moodboard Offer Picked 資訊
     * @param {OrgGroupMoodboardOfferPickedExportPostRequest} [orgGroupMoodboardOfferPickedExportPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardOfferPickedMassExportPost(orgGroupMoodboardOfferPickedExportPostRequest?: OrgGroupMoodboardOfferPickedExportPostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardOfferPickedMassExportPost(orgGroupMoodboardOfferPickedExportPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分享 Moodboard 取得分享對象
     * @param {OrgGroupMoodboardShareGetTargetPostRequest} [orgGroupMoodboardShareGetTargetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardShareGetTargetPost(orgGroupMoodboardShareGetTargetPostRequest?: OrgGroupMoodboardShareGetTargetPostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardShareGetTargetPost(orgGroupMoodboardShareGetTargetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分享 Moodboard
     * @param {OrgGroupMoodboardSharePostRequest} [orgGroupMoodboardSharePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardSharePost(orgGroupMoodboardSharePostRequest?: OrgGroupMoodboardSharePostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardSharePost(orgGroupMoodboardSharePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 移除分享 Moodboard
     * @param {OrgGroupMoodboardShareRemovePostRequest} [orgGroupMoodboardShareRemovePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardShareRemovePost(orgGroupMoodboardShareRemovePostRequest?: OrgGroupMoodboardShareRemovePostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardShareRemovePost(orgGroupMoodboardShareRemovePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯 Moodboard
     * @param {OrgGroupMoodboardUpdatePostRequest} [orgGroupMoodboardUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupMoodboardApi
     */
    public orgGroupMoodboardUpdatePost(orgGroupMoodboardUpdatePostRequest?: OrgGroupMoodboardUpdatePostRequest, options?: AxiosRequestConfig) {
        return GroupMoodboardApiFp(this.configuration).orgGroupMoodboardUpdatePost(orgGroupMoodboardUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupShareToMeApi - axios parameter creator
 * @export
 */
export const GroupShareToMeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgGroupShareToMeCloneCheckPostRequest} [orgGroupShareToMeCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupShareToMeCloneCheckPost: async (orgGroupShareToMeCloneCheckPostRequest?: OrgGroupShareToMeCloneCheckPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/share-to-me/clone-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupShareToMeCloneCheckPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Clone
         * @param {OrgGroupShareToMeClonePostRequest} [orgGroupShareToMeClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupShareToMeClonePost: async (orgGroupShareToMeClonePostRequest?: OrgGroupShareToMeClonePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/share-to-me/clone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupShareToMeClonePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除 share to me
         * @param {OrgGroupShareToMeDeletePostRequest} [orgGroupShareToMeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupShareToMeDeletePost: async (orgGroupShareToMeDeletePostRequest?: OrgGroupShareToMeDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/share-to-me/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupShareToMeDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Share to me 清單
         * @param {OrgGroupShareToMeGetListPostRequest} [orgGroupShareToMeGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupShareToMeGetListPost: async (orgGroupShareToMeGetListPostRequest?: OrgGroupShareToMeGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/share-to-me/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupShareToMeGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Share to me 布片詳細資料
         * @param {OrgGroupShareToMeGetMaterialPostRequest} [orgGroupShareToMeGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupShareToMeGetMaterialPost: async (orgGroupShareToMeGetMaterialPostRequest?: OrgGroupShareToMeGetMaterialPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/share-to-me/get-material`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupShareToMeGetMaterialPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupShareToMeApi - functional programming interface
 * @export
 */
export const GroupShareToMeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupShareToMeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgGroupShareToMeCloneCheckPostRequest} [orgGroupShareToMeCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupShareToMeCloneCheckPost(orgGroupShareToMeCloneCheckPostRequest?: OrgGroupShareToMeCloneCheckPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedCloneCheckPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupShareToMeCloneCheckPost(orgGroupShareToMeCloneCheckPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Clone
         * @param {OrgGroupShareToMeClonePostRequest} [orgGroupShareToMeClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupShareToMeClonePost(orgGroupShareToMeClonePostRequest?: OrgGroupShareToMeClonePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupShareToMeClonePost(orgGroupShareToMeClonePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除 share to me
         * @param {OrgGroupShareToMeDeletePostRequest} [orgGroupShareToMeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupShareToMeDeletePost(orgGroupShareToMeDeletePostRequest?: OrgGroupShareToMeDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupShareToMeDeletePost(orgGroupShareToMeDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Share to me 清單
         * @param {OrgGroupShareToMeGetListPostRequest} [orgGroupShareToMeGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupShareToMeGetListPost(orgGroupShareToMeGetListPostRequest?: OrgGroupShareToMeGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgShareToMeGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupShareToMeGetListPost(orgGroupShareToMeGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Share to me 布片詳細資料
         * @param {OrgGroupShareToMeGetMaterialPostRequest} [orgGroupShareToMeGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupShareToMeGetMaterialPost(orgGroupShareToMeGetMaterialPostRequest?: OrgGroupShareToMeGetMaterialPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedGetMaterialPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupShareToMeGetMaterialPost(orgGroupShareToMeGetMaterialPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupShareToMeApi - factory interface
 * @export
 */
export const GroupShareToMeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupShareToMeApiFp(configuration)
    return {
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgGroupShareToMeCloneCheckPostRequest} [orgGroupShareToMeCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupShareToMeCloneCheckPost(orgGroupShareToMeCloneCheckPostRequest?: OrgGroupShareToMeCloneCheckPostRequest, options?: any): AxiosPromise<ShareGetReceivedCloneCheckPost200Response> {
            return localVarFp.orgGroupShareToMeCloneCheckPost(orgGroupShareToMeCloneCheckPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Clone
         * @param {OrgGroupShareToMeClonePostRequest} [orgGroupShareToMeClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupShareToMeClonePost(orgGroupShareToMeClonePostRequest?: OrgGroupShareToMeClonePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupShareToMeClonePost(orgGroupShareToMeClonePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除 share to me
         * @param {OrgGroupShareToMeDeletePostRequest} [orgGroupShareToMeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupShareToMeDeletePost(orgGroupShareToMeDeletePostRequest?: OrgGroupShareToMeDeletePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupShareToMeDeletePost(orgGroupShareToMeDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Share to me 清單
         * @param {OrgGroupShareToMeGetListPostRequest} [orgGroupShareToMeGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupShareToMeGetListPost(orgGroupShareToMeGetListPostRequest?: OrgGroupShareToMeGetListPostRequest, options?: any): AxiosPromise<OrgShareToMeGetListPost200Response> {
            return localVarFp.orgGroupShareToMeGetListPost(orgGroupShareToMeGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Share to me 布片詳細資料
         * @param {OrgGroupShareToMeGetMaterialPostRequest} [orgGroupShareToMeGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupShareToMeGetMaterialPost(orgGroupShareToMeGetMaterialPostRequest?: OrgGroupShareToMeGetMaterialPostRequest, options?: any): AxiosPromise<ShareGetReceivedGetMaterialPost200Response> {
            return localVarFp.orgGroupShareToMeGetMaterialPost(orgGroupShareToMeGetMaterialPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupShareToMeApi - object-oriented interface
 * @export
 * @class GroupShareToMeApi
 * @extends {BaseAPI}
 */
export class GroupShareToMeApi extends BaseAPI {
    /**
     * 
     * @summary 取得此次 Clone 產生 quota 數量
     * @param {OrgGroupShareToMeCloneCheckPostRequest} [orgGroupShareToMeCloneCheckPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupShareToMeApi
     */
    public orgGroupShareToMeCloneCheckPost(orgGroupShareToMeCloneCheckPostRequest?: OrgGroupShareToMeCloneCheckPostRequest, options?: AxiosRequestConfig) {
        return GroupShareToMeApiFp(this.configuration).orgGroupShareToMeCloneCheckPost(orgGroupShareToMeCloneCheckPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Clone
     * @param {OrgGroupShareToMeClonePostRequest} [orgGroupShareToMeClonePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupShareToMeApi
     */
    public orgGroupShareToMeClonePost(orgGroupShareToMeClonePostRequest?: OrgGroupShareToMeClonePostRequest, options?: AxiosRequestConfig) {
        return GroupShareToMeApiFp(this.configuration).orgGroupShareToMeClonePost(orgGroupShareToMeClonePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除 share to me
     * @param {OrgGroupShareToMeDeletePostRequest} [orgGroupShareToMeDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupShareToMeApi
     */
    public orgGroupShareToMeDeletePost(orgGroupShareToMeDeletePostRequest?: OrgGroupShareToMeDeletePostRequest, options?: AxiosRequestConfig) {
        return GroupShareToMeApiFp(this.configuration).orgGroupShareToMeDeletePost(orgGroupShareToMeDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Share to me 清單
     * @param {OrgGroupShareToMeGetListPostRequest} [orgGroupShareToMeGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupShareToMeApi
     */
    public orgGroupShareToMeGetListPost(orgGroupShareToMeGetListPostRequest?: OrgGroupShareToMeGetListPostRequest, options?: AxiosRequestConfig) {
        return GroupShareToMeApiFp(this.configuration).orgGroupShareToMeGetListPost(orgGroupShareToMeGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Share to me 布片詳細資料
     * @param {OrgGroupShareToMeGetMaterialPostRequest} [orgGroupShareToMeGetMaterialPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupShareToMeApi
     */
    public orgGroupShareToMeGetMaterialPost(orgGroupShareToMeGetMaterialPostRequest?: OrgGroupShareToMeGetMaterialPostRequest, options?: AxiosRequestConfig) {
        return GroupShareToMeApiFp(this.configuration).orgGroupShareToMeGetMaterialPost(orgGroupShareToMeGetMaterialPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupUserApi - axios parameter creator
 * @export
 */
export const GroupUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取得使用者在團隊下的資料
         * @param {OrgGroupUserGetPostRequest} [orgGroupUserGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupUserGetPost: async (orgGroupUserGetPostRequest?: OrgGroupUserGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/user/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupUserGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupUserApi - functional programming interface
 * @export
 */
export const GroupUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 取得使用者在團隊下的資料
         * @param {OrgGroupUserGetPostRequest} [orgGroupUserGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupUserGetPost(orgGroupUserGetPostRequest?: OrgGroupUserGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGroupUserGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupUserGetPost(orgGroupUserGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupUserApi - factory interface
 * @export
 */
export const GroupUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupUserApiFp(configuration)
    return {
        /**
         * 
         * @summary 取得使用者在團隊下的資料
         * @param {OrgGroupUserGetPostRequest} [orgGroupUserGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupUserGetPost(orgGroupUserGetPostRequest?: OrgGroupUserGetPostRequest, options?: any): AxiosPromise<OrgGroupUserGetPost200Response> {
            return localVarFp.orgGroupUserGetPost(orgGroupUserGetPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupUserApi - object-oriented interface
 * @export
 * @class GroupUserApi
 * @extends {BaseAPI}
 */
export class GroupUserApi extends BaseAPI {
    /**
     * 
     * @summary 取得使用者在團隊下的資料
     * @param {OrgGroupUserGetPostRequest} [orgGroupUserGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupUserApi
     */
    public orgGroupUserGetPost(orgGroupUserGetPostRequest?: OrgGroupUserGetPostRequest, options?: AxiosRequestConfig) {
        return GroupUserApiFp(this.configuration).orgGroupUserGetPost(orgGroupUserGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupWorkspaceApi - axios parameter creator
 * @export
 */
export const GroupWorkspaceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新增 Collection - 產生S3檔案上傳url
         * @param {OrgWorkspaceCollectionCreateGetUploadUrlPostRequest} [orgWorkspaceCollectionCreateGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceCollectionCreateGetUploadUrlPost: async (orgWorkspaceCollectionCreateGetUploadUrlPostRequest?: OrgWorkspaceCollectionCreateGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/collection/create/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceCollectionCreateGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增 Collection
         * @param {OrgGroupWorkspaceCollectionCreatePostRequest} [orgGroupWorkspaceCollectionCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceCollectionCreatePost: async (orgGroupWorkspaceCollectionCreatePostRequest?: OrgGroupWorkspaceCollectionCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/collection/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceCollectionCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移除 Collection 的 Trend Board
         * @param {OrgGroupWorkspaceCollectionRemoveTrendBoardPostRequest} [orgGroupWorkspaceCollectionRemoveTrendBoardPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceCollectionRemoveTrendBoardPost: async (orgGroupWorkspaceCollectionRemoveTrendBoardPostRequest?: OrgGroupWorkspaceCollectionRemoveTrendBoardPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/collection/remove-trend-board`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceCollectionRemoveTrendBoardPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯 Collection
         * @param {number} groupId 
         * @param {number} collectionId 
         * @param {string} collectionName 
         * @param {File} [trendBoard] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceCollectionUpdateGetUploadUrlPost: async (groupId: number, collectionId: number, collectionName: string, trendBoard?: File, description?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('orgGroupWorkspaceCollectionUpdateGetUploadUrlPost', 'groupId', groupId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('orgGroupWorkspaceCollectionUpdateGetUploadUrlPost', 'collectionId', collectionId)
            // verify required parameter 'collectionName' is not null or undefined
            assertParamExists('orgGroupWorkspaceCollectionUpdateGetUploadUrlPost', 'collectionName', collectionName)
            const localVarPath = `/org/group/workspace/collection/update/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (groupId !== undefined) { 
                localVarFormParams.append('groupId', groupId as any);
            }
    
            if (collectionId !== undefined) { 
                localVarFormParams.append('collectionId', collectionId as any);
            }
    
            if (collectionName !== undefined) { 
                localVarFormParams.append('collectionName', collectionName as any);
            }
    
            if (trendBoard !== undefined) { 
                localVarFormParams.append('trendBoard', trendBoard as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯 Collection
         * @param {OrgGroupWorkspaceCollectionUpdatePostRequest} [orgGroupWorkspaceCollectionUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceCollectionUpdatePost: async (orgGroupWorkspaceCollectionUpdatePostRequest?: OrgGroupWorkspaceCollectionUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/collection/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceCollectionUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得布料清單
         * @param {OrgGroupWorkspaceGetForModalPostRequest} [orgGroupWorkspaceGetForModalPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceGetForModalPost: async (orgGroupWorkspaceGetForModalPostRequest?: OrgGroupWorkspaceGetForModalPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/get-for-modal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceGetForModalPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Group Workspace 布片詳細資料
         * @param {OrgGroupWorkspaceGetMaterialPostRequest} [orgGroupWorkspaceGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceGetMaterialPost: async (orgGroupWorkspaceGetMaterialPostRequest?: OrgGroupWorkspaceGetMaterialPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/get-material`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceGetMaterialPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得Workspace資料夾及布片清單
         * @param {OrgGroupWorkspaceGetPostRequest} [orgGroupWorkspaceGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceGetPost: async (orgGroupWorkspaceGetPostRequest?: OrgGroupWorkspaceGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除 workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodeDeletePostRequest} [orgGroupWorkspaceNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeDeletePost: async (orgGroupWorkspaceNodeDeletePostRequest?: OrgGroupWorkspaceNodeDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/node/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceNodeDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary dupliacte workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodeDuplicatePostRequest} [orgGroupWorkspaceNodeDuplicatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeDuplicatePost: async (orgGroupWorkspaceNodeDuplicatePostRequest?: OrgGroupWorkspaceNodeDuplicatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/node/duplicate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceNodeDuplicatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 搬移 workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodeMovePostRequest} [orgGroupWorkspaceNodeMovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeMovePost: async (orgGroupWorkspaceNodeMovePostRequest?: OrgGroupWorkspaceNodeMovePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/node/move`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceNodeMovePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary publish workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodePublishPostRequest} [orgGroupWorkspaceNodePublishPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodePublishPost: async (orgGroupWorkspaceNodePublishPostRequest?: OrgGroupWorkspaceNodePublishPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/node/publish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceNodePublishPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {OrgGroupWorkspaceNodeShareAssignedGetTargetPostRequest} [orgGroupWorkspaceNodeShareAssignedGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareAssignedGetTargetPost: async (orgGroupWorkspaceNodeShareAssignedGetTargetPostRequest?: OrgGroupWorkspaceNodeShareAssignedGetTargetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/node/share/assigned/get-target`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceNodeShareAssignedGetTargetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary share workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodeShareAssignedPostRequest} [orgGroupWorkspaceNodeShareAssignedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareAssignedPost: async (orgGroupWorkspaceNodeShareAssignedPostRequest?: OrgGroupWorkspaceNodeShareAssignedPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/node/share/assigned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceNodeShareAssignedPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移除 share 對象
         * @param {OrgGroupWorkspaceNodeShareAssignedRemovePostRequest} [orgGroupWorkspaceNodeShareAssignedRemovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareAssignedRemovePost: async (orgGroupWorkspaceNodeShareAssignedRemovePostRequest?: OrgGroupWorkspaceNodeShareAssignedRemovePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/node/share/assigned/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceNodeShareAssignedRemovePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 變更 share 權限
         * @param {OrgGroupWorkspaceNodeShareAssignedUpdatePostRequest} [orgGroupWorkspaceNodeShareAssignedUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareAssignedUpdatePost: async (orgGroupWorkspaceNodeShareAssignedUpdatePostRequest?: OrgGroupWorkspaceNodeShareAssignedUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/node/share/assigned/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceNodeShareAssignedUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 產生 copy link
         * @param {OrgGroupWorkspaceNodeShareGetPostRequest} [orgGroupWorkspaceNodeShareGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareCopyLinkGeneratePost: async (orgGroupWorkspaceNodeShareGetPostRequest?: OrgGroupWorkspaceNodeShareGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/node/share/copy-link/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceNodeShareGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 開關 copy link
         * @param {OrgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest} [orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPost: async (orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest?: OrgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/node/share/copy-link/update-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 設定 embed code 是否可以下載 U3M
         * @param {OrgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest} [orgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareEmbedUpdateSettingPost: async (orgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest?: OrgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/node/share/embed/update-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 workspace node 的 share 資訊
         * @param {OrgGroupWorkspaceNodeShareGetPostRequest} [orgGroupWorkspaceNodeShareGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareGetPost: async (orgGroupWorkspaceNodeShareGetPostRequest?: OrgGroupWorkspaceNodeShareGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/node/share/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceNodeShareGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 產生 social media key
         * @param {OrgGroupWorkspaceNodeShareSocialGeneratePostRequest} [orgGroupWorkspaceNodeShareSocialGeneratePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareSocialGeneratePost: async (orgGroupWorkspaceNodeShareSocialGeneratePostRequest?: OrgGroupWorkspaceNodeShareSocialGeneratePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/group/workspace/node/share/social/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGroupWorkspaceNodeShareSocialGeneratePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupWorkspaceApi - functional programming interface
 * @export
 */
export const GroupWorkspaceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupWorkspaceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 新增 Collection - 產生S3檔案上傳url
         * @param {OrgWorkspaceCollectionCreateGetUploadUrlPostRequest} [orgWorkspaceCollectionCreateGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceCollectionCreateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest?: OrgWorkspaceCollectionCreateGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgWorkspaceCollectionCreateGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceCollectionCreateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增 Collection
         * @param {OrgGroupWorkspaceCollectionCreatePostRequest} [orgGroupWorkspaceCollectionCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceCollectionCreatePost(orgGroupWorkspaceCollectionCreatePostRequest?: OrgGroupWorkspaceCollectionCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceCollectionCreatePost(orgGroupWorkspaceCollectionCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 移除 Collection 的 Trend Board
         * @param {OrgGroupWorkspaceCollectionRemoveTrendBoardPostRequest} [orgGroupWorkspaceCollectionRemoveTrendBoardPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceCollectionRemoveTrendBoardPost(orgGroupWorkspaceCollectionRemoveTrendBoardPostRequest?: OrgGroupWorkspaceCollectionRemoveTrendBoardPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceCollectionRemoveTrendBoardPost(orgGroupWorkspaceCollectionRemoveTrendBoardPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯 Collection
         * @param {number} groupId 
         * @param {number} collectionId 
         * @param {string} collectionName 
         * @param {File} [trendBoard] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceCollectionUpdateGetUploadUrlPost(groupId: number, collectionId: number, collectionName: string, trendBoard?: File, description?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceCollectionUpdateGetUploadUrlPost(groupId, collectionId, collectionName, trendBoard, description, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯 Collection
         * @param {OrgGroupWorkspaceCollectionUpdatePostRequest} [orgGroupWorkspaceCollectionUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceCollectionUpdatePost(orgGroupWorkspaceCollectionUpdatePostRequest?: OrgGroupWorkspaceCollectionUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceCollectionUpdatePost(orgGroupWorkspaceCollectionUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得布料清單
         * @param {OrgGroupWorkspaceGetForModalPostRequest} [orgGroupWorkspaceGetForModalPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceGetForModalPost(orgGroupWorkspaceGetForModalPostRequest?: OrgGroupWorkspaceGetForModalPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgWorkspaceGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceGetForModalPost(orgGroupWorkspaceGetForModalPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Group Workspace 布片詳細資料
         * @param {OrgGroupWorkspaceGetMaterialPostRequest} [orgGroupWorkspaceGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceGetMaterialPost(orgGroupWorkspaceGetMaterialPostRequest?: OrgGroupWorkspaceGetMaterialPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgWorkspaceGetMaterialPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceGetMaterialPost(orgGroupWorkspaceGetMaterialPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得Workspace資料夾及布片清單
         * @param {OrgGroupWorkspaceGetPostRequest} [orgGroupWorkspaceGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceGetPost(orgGroupWorkspaceGetPostRequest?: OrgGroupWorkspaceGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgWorkspaceGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceGetPost(orgGroupWorkspaceGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除 workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodeDeletePostRequest} [orgGroupWorkspaceNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceNodeDeletePost(orgGroupWorkspaceNodeDeletePostRequest?: OrgGroupWorkspaceNodeDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceNodeDeletePost(orgGroupWorkspaceNodeDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary dupliacte workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodeDuplicatePostRequest} [orgGroupWorkspaceNodeDuplicatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceNodeDuplicatePost(orgGroupWorkspaceNodeDuplicatePostRequest?: OrgGroupWorkspaceNodeDuplicatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceNodeDuplicatePost(orgGroupWorkspaceNodeDuplicatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 搬移 workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodeMovePostRequest} [orgGroupWorkspaceNodeMovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceNodeMovePost(orgGroupWorkspaceNodeMovePostRequest?: OrgGroupWorkspaceNodeMovePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceNodeMovePost(orgGroupWorkspaceNodeMovePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary publish workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodePublishPostRequest} [orgGroupWorkspaceNodePublishPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceNodePublishPost(orgGroupWorkspaceNodePublishPostRequest?: OrgGroupWorkspaceNodePublishPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceNodePublishPost(orgGroupWorkspaceNodePublishPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {OrgGroupWorkspaceNodeShareAssignedGetTargetPostRequest} [orgGroupWorkspaceNodeShareAssignedGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceNodeShareAssignedGetTargetPost(orgGroupWorkspaceNodeShareAssignedGetTargetPostRequest?: OrgGroupWorkspaceNodeShareAssignedGetTargetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicShareAssignedGetTargetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceNodeShareAssignedGetTargetPost(orgGroupWorkspaceNodeShareAssignedGetTargetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary share workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodeShareAssignedPostRequest} [orgGroupWorkspaceNodeShareAssignedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceNodeShareAssignedPost(orgGroupWorkspaceNodeShareAssignedPostRequest?: OrgGroupWorkspaceNodeShareAssignedPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGroupWorkspaceNodeShareAssignedPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceNodeShareAssignedPost(orgGroupWorkspaceNodeShareAssignedPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 移除 share 對象
         * @param {OrgGroupWorkspaceNodeShareAssignedRemovePostRequest} [orgGroupWorkspaceNodeShareAssignedRemovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceNodeShareAssignedRemovePost(orgGroupWorkspaceNodeShareAssignedRemovePostRequest?: OrgGroupWorkspaceNodeShareAssignedRemovePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceNodeShareAssignedRemovePost(orgGroupWorkspaceNodeShareAssignedRemovePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 變更 share 權限
         * @param {OrgGroupWorkspaceNodeShareAssignedUpdatePostRequest} [orgGroupWorkspaceNodeShareAssignedUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceNodeShareAssignedUpdatePost(orgGroupWorkspaceNodeShareAssignedUpdatePostRequest?: OrgGroupWorkspaceNodeShareAssignedUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceNodeShareAssignedUpdatePost(orgGroupWorkspaceNodeShareAssignedUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 產生 copy link
         * @param {OrgGroupWorkspaceNodeShareGetPostRequest} [orgGroupWorkspaceNodeShareGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceNodeShareCopyLinkGeneratePost(orgGroupWorkspaceNodeShareGetPostRequest?: OrgGroupWorkspaceNodeShareGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicShareCopyLinkGeneratePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceNodeShareCopyLinkGeneratePost(orgGroupWorkspaceNodeShareGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 開關 copy link
         * @param {OrgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest} [orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPost(orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest?: OrgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPost(orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 設定 embed code 是否可以下載 U3M
         * @param {OrgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest} [orgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceNodeShareEmbedUpdateSettingPost(orgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest?: OrgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceNodeShareEmbedUpdateSettingPost(orgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 workspace node 的 share 資訊
         * @param {OrgGroupWorkspaceNodeShareGetPostRequest} [orgGroupWorkspaceNodeShareGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceNodeShareGetPost(orgGroupWorkspaceNodeShareGetPostRequest?: OrgGroupWorkspaceNodeShareGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGroupWorkspaceNodeShareGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceNodeShareGetPost(orgGroupWorkspaceNodeShareGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 產生 social media key
         * @param {OrgGroupWorkspaceNodeShareSocialGeneratePostRequest} [orgGroupWorkspaceNodeShareSocialGeneratePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGroupWorkspaceNodeShareSocialGeneratePost(orgGroupWorkspaceNodeShareSocialGeneratePostRequest?: OrgGroupWorkspaceNodeShareSocialGeneratePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicShareCopyLinkGeneratePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGroupWorkspaceNodeShareSocialGeneratePost(orgGroupWorkspaceNodeShareSocialGeneratePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupWorkspaceApi - factory interface
 * @export
 */
export const GroupWorkspaceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupWorkspaceApiFp(configuration)
    return {
        /**
         * 
         * @summary 新增 Collection - 產生S3檔案上傳url
         * @param {OrgWorkspaceCollectionCreateGetUploadUrlPostRequest} [orgWorkspaceCollectionCreateGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceCollectionCreateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest?: OrgWorkspaceCollectionCreateGetUploadUrlPostRequest, options?: any): AxiosPromise<OrgWorkspaceCollectionCreateGetUploadUrlPost200Response> {
            return localVarFp.orgGroupWorkspaceCollectionCreateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增 Collection
         * @param {OrgGroupWorkspaceCollectionCreatePostRequest} [orgGroupWorkspaceCollectionCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceCollectionCreatePost(orgGroupWorkspaceCollectionCreatePostRequest?: OrgGroupWorkspaceCollectionCreatePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupWorkspaceCollectionCreatePost(orgGroupWorkspaceCollectionCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 移除 Collection 的 Trend Board
         * @param {OrgGroupWorkspaceCollectionRemoveTrendBoardPostRequest} [orgGroupWorkspaceCollectionRemoveTrendBoardPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceCollectionRemoveTrendBoardPost(orgGroupWorkspaceCollectionRemoveTrendBoardPostRequest?: OrgGroupWorkspaceCollectionRemoveTrendBoardPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupWorkspaceCollectionRemoveTrendBoardPost(orgGroupWorkspaceCollectionRemoveTrendBoardPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯 Collection
         * @param {number} groupId 
         * @param {number} collectionId 
         * @param {string} collectionName 
         * @param {File} [trendBoard] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceCollectionUpdateGetUploadUrlPost(groupId: number, collectionId: number, collectionName: string, trendBoard?: File, description?: string, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupWorkspaceCollectionUpdateGetUploadUrlPost(groupId, collectionId, collectionName, trendBoard, description, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯 Collection
         * @param {OrgGroupWorkspaceCollectionUpdatePostRequest} [orgGroupWorkspaceCollectionUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceCollectionUpdatePost(orgGroupWorkspaceCollectionUpdatePostRequest?: OrgGroupWorkspaceCollectionUpdatePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupWorkspaceCollectionUpdatePost(orgGroupWorkspaceCollectionUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得布料清單
         * @param {OrgGroupWorkspaceGetForModalPostRequest} [orgGroupWorkspaceGetForModalPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceGetForModalPost(orgGroupWorkspaceGetForModalPostRequest?: OrgGroupWorkspaceGetForModalPostRequest, options?: any): AxiosPromise<OrgWorkspaceGetPost200Response> {
            return localVarFp.orgGroupWorkspaceGetForModalPost(orgGroupWorkspaceGetForModalPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Group Workspace 布片詳細資料
         * @param {OrgGroupWorkspaceGetMaterialPostRequest} [orgGroupWorkspaceGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceGetMaterialPost(orgGroupWorkspaceGetMaterialPostRequest?: OrgGroupWorkspaceGetMaterialPostRequest, options?: any): AxiosPromise<OrgWorkspaceGetMaterialPost200Response> {
            return localVarFp.orgGroupWorkspaceGetMaterialPost(orgGroupWorkspaceGetMaterialPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得Workspace資料夾及布片清單
         * @param {OrgGroupWorkspaceGetPostRequest} [orgGroupWorkspaceGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceGetPost(orgGroupWorkspaceGetPostRequest?: OrgGroupWorkspaceGetPostRequest, options?: any): AxiosPromise<OrgWorkspaceGetPost200Response> {
            return localVarFp.orgGroupWorkspaceGetPost(orgGroupWorkspaceGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除 workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodeDeletePostRequest} [orgGroupWorkspaceNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeDeletePost(orgGroupWorkspaceNodeDeletePostRequest?: OrgGroupWorkspaceNodeDeletePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupWorkspaceNodeDeletePost(orgGroupWorkspaceNodeDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary dupliacte workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodeDuplicatePostRequest} [orgGroupWorkspaceNodeDuplicatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeDuplicatePost(orgGroupWorkspaceNodeDuplicatePostRequest?: OrgGroupWorkspaceNodeDuplicatePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupWorkspaceNodeDuplicatePost(orgGroupWorkspaceNodeDuplicatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 搬移 workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodeMovePostRequest} [orgGroupWorkspaceNodeMovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeMovePost(orgGroupWorkspaceNodeMovePostRequest?: OrgGroupWorkspaceNodeMovePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupWorkspaceNodeMovePost(orgGroupWorkspaceNodeMovePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary publish workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodePublishPostRequest} [orgGroupWorkspaceNodePublishPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodePublishPost(orgGroupWorkspaceNodePublishPostRequest?: OrgGroupWorkspaceNodePublishPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupWorkspaceNodePublishPost(orgGroupWorkspaceNodePublishPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {OrgGroupWorkspaceNodeShareAssignedGetTargetPostRequest} [orgGroupWorkspaceNodeShareAssignedGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareAssignedGetTargetPost(orgGroupWorkspaceNodeShareAssignedGetTargetPostRequest?: OrgGroupWorkspaceNodeShareAssignedGetTargetPostRequest, options?: any): AxiosPromise<PublicShareAssignedGetTargetPost200Response> {
            return localVarFp.orgGroupWorkspaceNodeShareAssignedGetTargetPost(orgGroupWorkspaceNodeShareAssignedGetTargetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary share workspace node (material or collection)
         * @param {OrgGroupWorkspaceNodeShareAssignedPostRequest} [orgGroupWorkspaceNodeShareAssignedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareAssignedPost(orgGroupWorkspaceNodeShareAssignedPostRequest?: OrgGroupWorkspaceNodeShareAssignedPostRequest, options?: any): AxiosPromise<OrgGroupWorkspaceNodeShareAssignedPost200Response> {
            return localVarFp.orgGroupWorkspaceNodeShareAssignedPost(orgGroupWorkspaceNodeShareAssignedPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 移除 share 對象
         * @param {OrgGroupWorkspaceNodeShareAssignedRemovePostRequest} [orgGroupWorkspaceNodeShareAssignedRemovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareAssignedRemovePost(orgGroupWorkspaceNodeShareAssignedRemovePostRequest?: OrgGroupWorkspaceNodeShareAssignedRemovePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupWorkspaceNodeShareAssignedRemovePost(orgGroupWorkspaceNodeShareAssignedRemovePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 變更 share 權限
         * @param {OrgGroupWorkspaceNodeShareAssignedUpdatePostRequest} [orgGroupWorkspaceNodeShareAssignedUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareAssignedUpdatePost(orgGroupWorkspaceNodeShareAssignedUpdatePostRequest?: OrgGroupWorkspaceNodeShareAssignedUpdatePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupWorkspaceNodeShareAssignedUpdatePost(orgGroupWorkspaceNodeShareAssignedUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 產生 copy link
         * @param {OrgGroupWorkspaceNodeShareGetPostRequest} [orgGroupWorkspaceNodeShareGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareCopyLinkGeneratePost(orgGroupWorkspaceNodeShareGetPostRequest?: OrgGroupWorkspaceNodeShareGetPostRequest, options?: any): AxiosPromise<PublicShareCopyLinkGeneratePost200Response> {
            return localVarFp.orgGroupWorkspaceNodeShareCopyLinkGeneratePost(orgGroupWorkspaceNodeShareGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 開關 copy link
         * @param {OrgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest} [orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPost(orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest?: OrgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPost(orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 設定 embed code 是否可以下載 U3M
         * @param {OrgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest} [orgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareEmbedUpdateSettingPost(orgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest?: OrgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgGroupWorkspaceNodeShareEmbedUpdateSettingPost(orgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 workspace node 的 share 資訊
         * @param {OrgGroupWorkspaceNodeShareGetPostRequest} [orgGroupWorkspaceNodeShareGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareGetPost(orgGroupWorkspaceNodeShareGetPostRequest?: OrgGroupWorkspaceNodeShareGetPostRequest, options?: any): AxiosPromise<OrgGroupWorkspaceNodeShareGetPost200Response> {
            return localVarFp.orgGroupWorkspaceNodeShareGetPost(orgGroupWorkspaceNodeShareGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 產生 social media key
         * @param {OrgGroupWorkspaceNodeShareSocialGeneratePostRequest} [orgGroupWorkspaceNodeShareSocialGeneratePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGroupWorkspaceNodeShareSocialGeneratePost(orgGroupWorkspaceNodeShareSocialGeneratePostRequest?: OrgGroupWorkspaceNodeShareSocialGeneratePostRequest, options?: any): AxiosPromise<PublicShareCopyLinkGeneratePost200Response> {
            return localVarFp.orgGroupWorkspaceNodeShareSocialGeneratePost(orgGroupWorkspaceNodeShareSocialGeneratePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupWorkspaceApi - object-oriented interface
 * @export
 * @class GroupWorkspaceApi
 * @extends {BaseAPI}
 */
export class GroupWorkspaceApi extends BaseAPI {
    /**
     * 
     * @summary 新增 Collection - 產生S3檔案上傳url
     * @param {OrgWorkspaceCollectionCreateGetUploadUrlPostRequest} [orgWorkspaceCollectionCreateGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceCollectionCreateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest?: OrgWorkspaceCollectionCreateGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceCollectionCreateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增 Collection
     * @param {OrgGroupWorkspaceCollectionCreatePostRequest} [orgGroupWorkspaceCollectionCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceCollectionCreatePost(orgGroupWorkspaceCollectionCreatePostRequest?: OrgGroupWorkspaceCollectionCreatePostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceCollectionCreatePost(orgGroupWorkspaceCollectionCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 移除 Collection 的 Trend Board
     * @param {OrgGroupWorkspaceCollectionRemoveTrendBoardPostRequest} [orgGroupWorkspaceCollectionRemoveTrendBoardPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceCollectionRemoveTrendBoardPost(orgGroupWorkspaceCollectionRemoveTrendBoardPostRequest?: OrgGroupWorkspaceCollectionRemoveTrendBoardPostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceCollectionRemoveTrendBoardPost(orgGroupWorkspaceCollectionRemoveTrendBoardPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯 Collection
     * @param {number} groupId 
     * @param {number} collectionId 
     * @param {string} collectionName 
     * @param {File} [trendBoard] 
     * @param {string} [description] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceCollectionUpdateGetUploadUrlPost(groupId: number, collectionId: number, collectionName: string, trendBoard?: File, description?: string, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceCollectionUpdateGetUploadUrlPost(groupId, collectionId, collectionName, trendBoard, description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯 Collection
     * @param {OrgGroupWorkspaceCollectionUpdatePostRequest} [orgGroupWorkspaceCollectionUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceCollectionUpdatePost(orgGroupWorkspaceCollectionUpdatePostRequest?: OrgGroupWorkspaceCollectionUpdatePostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceCollectionUpdatePost(orgGroupWorkspaceCollectionUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得布料清單
     * @param {OrgGroupWorkspaceGetForModalPostRequest} [orgGroupWorkspaceGetForModalPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceGetForModalPost(orgGroupWorkspaceGetForModalPostRequest?: OrgGroupWorkspaceGetForModalPostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceGetForModalPost(orgGroupWorkspaceGetForModalPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Group Workspace 布片詳細資料
     * @param {OrgGroupWorkspaceGetMaterialPostRequest} [orgGroupWorkspaceGetMaterialPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceGetMaterialPost(orgGroupWorkspaceGetMaterialPostRequest?: OrgGroupWorkspaceGetMaterialPostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceGetMaterialPost(orgGroupWorkspaceGetMaterialPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得Workspace資料夾及布片清單
     * @param {OrgGroupWorkspaceGetPostRequest} [orgGroupWorkspaceGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceGetPost(orgGroupWorkspaceGetPostRequest?: OrgGroupWorkspaceGetPostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceGetPost(orgGroupWorkspaceGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除 workspace node (material or collection)
     * @param {OrgGroupWorkspaceNodeDeletePostRequest} [orgGroupWorkspaceNodeDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceNodeDeletePost(orgGroupWorkspaceNodeDeletePostRequest?: OrgGroupWorkspaceNodeDeletePostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceNodeDeletePost(orgGroupWorkspaceNodeDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary dupliacte workspace node (material or collection)
     * @param {OrgGroupWorkspaceNodeDuplicatePostRequest} [orgGroupWorkspaceNodeDuplicatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceNodeDuplicatePost(orgGroupWorkspaceNodeDuplicatePostRequest?: OrgGroupWorkspaceNodeDuplicatePostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceNodeDuplicatePost(orgGroupWorkspaceNodeDuplicatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 搬移 workspace node (material or collection)
     * @param {OrgGroupWorkspaceNodeMovePostRequest} [orgGroupWorkspaceNodeMovePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceNodeMovePost(orgGroupWorkspaceNodeMovePostRequest?: OrgGroupWorkspaceNodeMovePostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceNodeMovePost(orgGroupWorkspaceNodeMovePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary publish workspace node (material or collection)
     * @param {OrgGroupWorkspaceNodePublishPostRequest} [orgGroupWorkspaceNodePublishPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceNodePublishPost(orgGroupWorkspaceNodePublishPostRequest?: OrgGroupWorkspaceNodePublishPostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceNodePublishPost(orgGroupWorkspaceNodePublishPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {OrgGroupWorkspaceNodeShareAssignedGetTargetPostRequest} [orgGroupWorkspaceNodeShareAssignedGetTargetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceNodeShareAssignedGetTargetPost(orgGroupWorkspaceNodeShareAssignedGetTargetPostRequest?: OrgGroupWorkspaceNodeShareAssignedGetTargetPostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceNodeShareAssignedGetTargetPost(orgGroupWorkspaceNodeShareAssignedGetTargetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary share workspace node (material or collection)
     * @param {OrgGroupWorkspaceNodeShareAssignedPostRequest} [orgGroupWorkspaceNodeShareAssignedPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceNodeShareAssignedPost(orgGroupWorkspaceNodeShareAssignedPostRequest?: OrgGroupWorkspaceNodeShareAssignedPostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceNodeShareAssignedPost(orgGroupWorkspaceNodeShareAssignedPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 移除 share 對象
     * @param {OrgGroupWorkspaceNodeShareAssignedRemovePostRequest} [orgGroupWorkspaceNodeShareAssignedRemovePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceNodeShareAssignedRemovePost(orgGroupWorkspaceNodeShareAssignedRemovePostRequest?: OrgGroupWorkspaceNodeShareAssignedRemovePostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceNodeShareAssignedRemovePost(orgGroupWorkspaceNodeShareAssignedRemovePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 變更 share 權限
     * @param {OrgGroupWorkspaceNodeShareAssignedUpdatePostRequest} [orgGroupWorkspaceNodeShareAssignedUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceNodeShareAssignedUpdatePost(orgGroupWorkspaceNodeShareAssignedUpdatePostRequest?: OrgGroupWorkspaceNodeShareAssignedUpdatePostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceNodeShareAssignedUpdatePost(orgGroupWorkspaceNodeShareAssignedUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 產生 copy link
     * @param {OrgGroupWorkspaceNodeShareGetPostRequest} [orgGroupWorkspaceNodeShareGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceNodeShareCopyLinkGeneratePost(orgGroupWorkspaceNodeShareGetPostRequest?: OrgGroupWorkspaceNodeShareGetPostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceNodeShareCopyLinkGeneratePost(orgGroupWorkspaceNodeShareGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 開關 copy link
     * @param {OrgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest} [orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPost(orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest?: OrgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPost(orgGroupWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 設定 embed code 是否可以下載 U3M
     * @param {OrgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest} [orgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceNodeShareEmbedUpdateSettingPost(orgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest?: OrgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceNodeShareEmbedUpdateSettingPost(orgGroupWorkspaceNodeShareEmbedUpdateSettingPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 workspace node 的 share 資訊
     * @param {OrgGroupWorkspaceNodeShareGetPostRequest} [orgGroupWorkspaceNodeShareGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceNodeShareGetPost(orgGroupWorkspaceNodeShareGetPostRequest?: OrgGroupWorkspaceNodeShareGetPostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceNodeShareGetPost(orgGroupWorkspaceNodeShareGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 產生 social media key
     * @param {OrgGroupWorkspaceNodeShareSocialGeneratePostRequest} [orgGroupWorkspaceNodeShareSocialGeneratePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupWorkspaceApi
     */
    public orgGroupWorkspaceNodeShareSocialGeneratePost(orgGroupWorkspaceNodeShareSocialGeneratePostRequest?: OrgGroupWorkspaceNodeShareSocialGeneratePostRequest, options?: AxiosRequestConfig) {
        return GroupWorkspaceApiFp(this.configuration).orgGroupWorkspaceNodeShareSocialGeneratePost(orgGroupWorkspaceNodeShareSocialGeneratePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrgApi - axios parameter creator
 * @export
 */
export const OrgApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 檢查組織名稱是否重複
         * @param {OrgCheckNameExistPostRequest} [orgCheckNameExistPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgCheckNameExistPost: async (orgCheckNameExistPostRequest?: OrgCheckNameExistPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/check-name-exist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgCheckNameExistPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 建立組織
         * @param {OrgCreatePostRequest} [orgCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgCreatePost: async (orgCreatePostRequest?: OrgCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 設定組織上傳 email
         * @param {OrgCreateUploadMaterialEmailPostRequest} [orgCreateUploadMaterialEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgCreateUploadMaterialEmailPost: async (orgCreateUploadMaterialEmailPostRequest?: OrgCreateUploadMaterialEmailPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/create-upload-material-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgCreateUploadMaterialEmailPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 刪除組織
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgDeletePost: async (orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgRemoveLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得組織資訊
         * @param {OrgGetPostRequest} [orgGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGetPost: async (orgGetPostRequest?: OrgGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 移除組織 Logo
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgRemoveLogoPost: async (orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/remove-logo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgRemoveLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 更新組織 Logo-產生S3檔案上傳url
         * @param {OrgUpdateLogoGetUploadUrlPostRequest} [orgUpdateLogoGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUpdateLogoGetUploadUrlPost: async (orgUpdateLogoGetUploadUrlPostRequest?: OrgUpdateLogoGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/update-logo/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgUpdateLogoGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 更新組織 Logo
         * @param {OrgUpdateLogoPostRequest} [orgUpdateLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUpdateLogoPost: async (orgUpdateLogoPostRequest?: OrgUpdateLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/update-logo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgUpdateLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 編輯組織資訊
         * @param {OrgUpdatePostRequest} [orgUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUpdatePost: async (orgUpdatePostRequest?: OrgUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgApi - functional programming interface
 * @export
 */
export const OrgApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 檢查組織名稱是否重複
         * @param {OrgCheckNameExistPostRequest} [orgCheckNameExistPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgCheckNameExistPost(orgCheckNameExistPostRequest?: OrgCheckNameExistPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgCheckNameExistPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgCheckNameExistPost(orgCheckNameExistPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 建立組織
         * @param {OrgCreatePostRequest} [orgCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgCreatePost(orgCreatePostRequest?: OrgCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgCreatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgCreatePost(orgCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 設定組織上傳 email
         * @param {OrgCreateUploadMaterialEmailPostRequest} [orgCreateUploadMaterialEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgCreateUploadMaterialEmailPost(orgCreateUploadMaterialEmailPostRequest?: OrgCreateUploadMaterialEmailPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgCreatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgCreateUploadMaterialEmailPost(orgCreateUploadMaterialEmailPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 刪除組織
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgDeletePost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResSuccessTrue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgDeletePost(orgRemoveLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得組織資訊
         * @param {OrgGetPostRequest} [orgGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgGetPost(orgGetPostRequest?: OrgGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgGetPost(orgGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 移除組織 Logo
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgRemoveLogoPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgRemoveLogoPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgRemoveLogoPost(orgRemoveLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 更新組織 Logo-產生S3檔案上傳url
         * @param {OrgUpdateLogoGetUploadUrlPostRequest} [orgUpdateLogoGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgUpdateLogoGetUploadUrlPost(orgUpdateLogoGetUploadUrlPostRequest?: OrgUpdateLogoGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgUpdateLogoGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgUpdateLogoGetUploadUrlPost(orgUpdateLogoGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 更新組織 Logo
         * @param {OrgUpdateLogoPostRequest} [orgUpdateLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgUpdateLogoPost(orgUpdateLogoPostRequest?: OrgUpdateLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgUpdateLogoPost(orgUpdateLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 編輯組織資訊
         * @param {OrgUpdatePostRequest} [orgUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgUpdatePost(orgUpdatePostRequest?: OrgUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgUpdatePost(orgUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgApi - factory interface
 * @export
 */
export const OrgApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgApiFp(configuration)
    return {
        /**
         * 
         * @summary 檢查組織名稱是否重複
         * @param {OrgCheckNameExistPostRequest} [orgCheckNameExistPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgCheckNameExistPost(orgCheckNameExistPostRequest?: OrgCheckNameExistPostRequest, options?: any): AxiosPromise<OrgCheckNameExistPost200Response> {
            return localVarFp.orgCheckNameExistPost(orgCheckNameExistPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 建立組織
         * @param {OrgCreatePostRequest} [orgCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgCreatePost(orgCreatePostRequest?: OrgCreatePostRequest, options?: any): AxiosPromise<OrgCreatePost200Response> {
            return localVarFp.orgCreatePost(orgCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 設定組織上傳 email
         * @param {OrgCreateUploadMaterialEmailPostRequest} [orgCreateUploadMaterialEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgCreateUploadMaterialEmailPost(orgCreateUploadMaterialEmailPostRequest?: OrgCreateUploadMaterialEmailPostRequest, options?: any): AxiosPromise<OrgCreatePost200Response> {
            return localVarFp.orgCreateUploadMaterialEmailPost(orgCreateUploadMaterialEmailPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 刪除組織
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgDeletePost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: any): AxiosPromise<ResSuccessTrue> {
            return localVarFp.orgDeletePost(orgRemoveLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得組織資訊
         * @param {OrgGetPostRequest} [orgGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgGetPost(orgGetPostRequest?: OrgGetPostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgGetPost(orgGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 移除組織 Logo
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgRemoveLogoPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: any): AxiosPromise<OrgRemoveLogoPost200Response> {
            return localVarFp.orgRemoveLogoPost(orgRemoveLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 更新組織 Logo-產生S3檔案上傳url
         * @param {OrgUpdateLogoGetUploadUrlPostRequest} [orgUpdateLogoGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUpdateLogoGetUploadUrlPost(orgUpdateLogoGetUploadUrlPostRequest?: OrgUpdateLogoGetUploadUrlPostRequest, options?: any): AxiosPromise<OrgUpdateLogoGetUploadUrlPost200Response> {
            return localVarFp.orgUpdateLogoGetUploadUrlPost(orgUpdateLogoGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 更新組織 Logo
         * @param {OrgUpdateLogoPostRequest} [orgUpdateLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUpdateLogoPost(orgUpdateLogoPostRequest?: OrgUpdateLogoPostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgUpdateLogoPost(orgUpdateLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 編輯組織資訊
         * @param {OrgUpdatePostRequest} [orgUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUpdatePost(orgUpdatePostRequest?: OrgUpdatePostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgUpdatePost(orgUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrgApi - object-oriented interface
 * @export
 * @class OrgApi
 * @extends {BaseAPI}
 */
export class OrgApi extends BaseAPI {
    /**
     * 
     * @summary 檢查組織名稱是否重複
     * @param {OrgCheckNameExistPostRequest} [orgCheckNameExistPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApi
     */
    public orgCheckNameExistPost(orgCheckNameExistPostRequest?: OrgCheckNameExistPostRequest, options?: AxiosRequestConfig) {
        return OrgApiFp(this.configuration).orgCheckNameExistPost(orgCheckNameExistPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 建立組織
     * @param {OrgCreatePostRequest} [orgCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApi
     */
    public orgCreatePost(orgCreatePostRequest?: OrgCreatePostRequest, options?: AxiosRequestConfig) {
        return OrgApiFp(this.configuration).orgCreatePost(orgCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 設定組織上傳 email
     * @param {OrgCreateUploadMaterialEmailPostRequest} [orgCreateUploadMaterialEmailPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApi
     */
    public orgCreateUploadMaterialEmailPost(orgCreateUploadMaterialEmailPostRequest?: OrgCreateUploadMaterialEmailPostRequest, options?: AxiosRequestConfig) {
        return OrgApiFp(this.configuration).orgCreateUploadMaterialEmailPost(orgCreateUploadMaterialEmailPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 刪除組織
     * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApi
     */
    public orgDeletePost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgApiFp(this.configuration).orgDeletePost(orgRemoveLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得組織資訊
     * @param {OrgGetPostRequest} [orgGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApi
     */
    public orgGetPost(orgGetPostRequest?: OrgGetPostRequest, options?: AxiosRequestConfig) {
        return OrgApiFp(this.configuration).orgGetPost(orgGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  **Access roles:** To be clear define
     * @summary 移除組織 Logo
     * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApi
     */
    public orgRemoveLogoPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgApiFp(this.configuration).orgRemoveLogoPost(orgRemoveLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  **Access roles:** To be clear define
     * @summary 更新組織 Logo-產生S3檔案上傳url
     * @param {OrgUpdateLogoGetUploadUrlPostRequest} [orgUpdateLogoGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApi
     */
    public orgUpdateLogoGetUploadUrlPost(orgUpdateLogoGetUploadUrlPostRequest?: OrgUpdateLogoGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return OrgApiFp(this.configuration).orgUpdateLogoGetUploadUrlPost(orgUpdateLogoGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  **Access roles:** To be clear define
     * @summary 更新組織 Logo
     * @param {OrgUpdateLogoPostRequest} [orgUpdateLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApi
     */
    public orgUpdateLogoPost(orgUpdateLogoPostRequest?: OrgUpdateLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgApiFp(this.configuration).orgUpdateLogoPost(orgUpdateLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 編輯組織資訊
     * @param {OrgUpdatePostRequest} [orgUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgApi
     */
    public orgUpdatePost(orgUpdatePostRequest?: OrgUpdatePostRequest, options?: AxiosRequestConfig) {
        return OrgApiFp(this.configuration).orgUpdatePost(orgUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrgAssetsApi - axios parameter creator
 * @export
 */
export const OrgAssetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary assets add to workspace
         * @param {OrgAssetsMaterialAddToWorkspacePostRequest} [orgAssetsMaterialAddToWorkspacePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialAddToWorkspacePost: async (orgAssetsMaterialAddToWorkspacePostRequest?: OrgAssetsMaterialAddToWorkspacePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/add-to-workspace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialAddToWorkspacePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 批量上傳 - 產生S3檔案上傳url
         * @param {OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest} [orgAssetsMaterialBatchUploadGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialBatchUploadGetUploadUrlPost: async (orgAssetsMaterialBatchUploadGetUploadUrlPostRequest?: OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/batch-upload/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialBatchUploadGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 批量上傳
         * @param {OrgAssetsMaterialBatchUploadPostRequest} [orgAssetsMaterialBatchUploadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialBatchUploadPost: async (orgAssetsMaterialBatchUploadPostRequest?: OrgAssetsMaterialBatchUploadPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/batch-upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialBatchUploadPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Carbon copy
         * @param {OrgAssetsMaterialCarbonCopyPostRequest} [orgAssetsMaterialCarbonCopyPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialCarbonCopyPost: async (orgAssetsMaterialCarbonCopyPostRequest?: OrgAssetsMaterialCarbonCopyPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/carbon-copy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialCarbonCopyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgAssetsMaterialCloneCheckPostRequest} [orgAssetsMaterialCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialCloneCheckPost: async (orgAssetsMaterialCloneCheckPostRequest?: OrgAssetsMaterialCloneCheckPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/clone-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialCloneCheckPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Clone
         * @param {OrgAssetsMaterialClonePostRequest} [orgAssetsMaterialClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialClonePost: async (orgAssetsMaterialClonePostRequest?: OrgAssetsMaterialClonePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/clone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialClonePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 確定新增布料資訊
         * @param {OrgAssetsMaterialCreatePostRequest} [orgAssetsMaterialCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialCreatePost: async (orgAssetsMaterialCreatePostRequest?: OrgAssetsMaterialCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 建立單一布料時移除補充資料
         * @param {OrgAssetsMaterialCreateRemoveAttachmentPostRequest} [orgAssetsMaterialCreateRemoveAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialCreateRemoveAttachmentPost: async (orgAssetsMaterialCreateRemoveAttachmentPostRequest?: OrgAssetsMaterialCreateRemoveAttachmentPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/create/remove-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialCreateRemoveAttachmentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 建立單一布料時上傳補充資料 - 產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialCreateUploadAttachmentGetUploadUrlPost: async (userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/create/upload-attachment/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userFeedbackUploadAttachmentGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 建立單一布料時上傳補充資料
         * @param {OrgAssetsMaterialCreateUploadAttachmentPostRequest} [orgAssetsMaterialCreateUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialCreateUploadAttachmentPost: async (orgAssetsMaterialCreateUploadAttachmentPostRequest?: OrgAssetsMaterialCreateUploadAttachmentPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/create/upload-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialCreateUploadAttachmentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 確認要刪除布料是否可以刪除
         * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialDeleteCheckPost: async (orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/delete-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除布料
         * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialDeletePost: async (orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 匯出 Excel
         * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialExportPost: async (orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得布料清單
         * @param {OrgAssetsMaterialGetListPostRequest} [orgAssetsMaterialGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialGetListPost: async (orgAssetsMaterialGetListPostRequest?: OrgAssetsMaterialGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得單一布料資料
         * @param {OrgAssetsMaterialGetPostRequest} [orgAssetsMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialGetPost: async (orgAssetsMaterialGetPostRequest?: OrgAssetsMaterialGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 大量匯出 Excel
         * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialMassExportPost: async (orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/mass-export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 合併布卡
         * @param {OrgAssetsMaterialMergePostRequest} [orgAssetsMaterialMergePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialMergePost: async (orgAssetsMaterialMergePostRequest?: OrgAssetsMaterialMergePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/merge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialMergePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 取得布料相關選項資訊
         * @param {OrgGetPostRequest} [orgGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialOptionsPost: async (orgGetPostRequest?: OrgGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Client 端 Smart Upload 產生S3檔案上傳url
         * @param {GeneralGetUploadUrlPostRequest} [generalGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialSmartUploadGetUploadUrlPost: async (generalGetUploadUrlPostRequest?: GeneralGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/smart-upload/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generalGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  **Access roles:** To be clear define
         * @summary Client 端 Smart Upload
         * @param {OrgAssetsMaterialSmartUploadPostRequest} [orgAssetsMaterialSmartUploadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialSmartUploadPost: async (orgAssetsMaterialSmartUploadPostRequest?: OrgAssetsMaterialSmartUploadPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/smart-upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialSmartUploadPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增 pantone 色號
         * @param {OrgAssetsMaterialUpdateAddPantonePostRequest} [orgAssetsMaterialUpdateAddPantonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateAddPantonePost: async (orgAssetsMaterialUpdateAddPantonePostRequest?: OrgAssetsMaterialUpdateAddPantonePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/add-pantone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateAddPantonePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 設定產品預覽圖-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest} [orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateCoverImgGetUploadUrlPost: async (orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/cover-img/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 設定產品預覽圖
         * @param {OrgAssetsMaterialUpdateCoverImgPostRequest} [orgAssetsMaterialUpdateCoverImgPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateCoverImgPost: async (orgAssetsMaterialUpdateCoverImgPostRequest?: OrgAssetsMaterialUpdateCoverImgPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/cover-img`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateCoverImgPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 建立 U3M-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateGenerateU3mGetUploadUrlPost: async (orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/generate-u3m/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 建立 U3M
         * @param {OrgAssetsMaterialUpdateGenerateU3mPostRequest} [orgAssetsMaterialUpdateGenerateU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateGenerateU3mPost: async (orgAssetsMaterialUpdateGenerateU3mPostRequest?: OrgAssetsMaterialUpdateGenerateU3mPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/generate-u3m`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateGenerateU3mPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 設定單面布或雙面布
         * @param {OrgAssetsMaterialUpdateIsDoubleSidePostRequest} [orgAssetsMaterialUpdateIsDoubleSidePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateIsDoubleSidePost: async (orgAssetsMaterialUpdateIsDoubleSidePostRequest?: OrgAssetsMaterialUpdateIsDoubleSidePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/is-double-side`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateIsDoubleSidePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 編輯布料資訊
         * @param {OrgAssetsMaterialUpdatePostRequest} [orgAssetsMaterialUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdatePost: async (orgAssetsMaterialUpdatePostRequest?: OrgAssetsMaterialUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯布料時移除補充資料
         * @param {OrgAssetsMaterialUpdateRemoveAttachmentPostRequest} [orgAssetsMaterialUpdateRemoveAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateRemoveAttachmentPost: async (orgAssetsMaterialUpdateRemoveAttachmentPostRequest?: OrgAssetsMaterialUpdateRemoveAttachmentPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/remove-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateRemoveAttachmentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除 pantone 色號
         * @param {OrgAssetsMaterialUpdateRemovePantonePostRequest} [orgAssetsMaterialUpdateRemovePantonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateRemovePantonePost: async (orgAssetsMaterialUpdateRemovePantonePostRequest?: OrgAssetsMaterialUpdateRemovePantonePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/remove-pantone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateRemovePantonePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯正反面-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateScanImageGetUploadUrlPost: async (orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/scan-image/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯正反面
         * @param {OrgAssetsMaterialUpdateScanImagePostRequest} [orgAssetsMaterialUpdateScanImagePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateScanImagePost: async (orgAssetsMaterialUpdateScanImagePostRequest?: OrgAssetsMaterialUpdateScanImagePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/scan-image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateScanImagePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 inventory
         * @param {OrgAssetsMaterialUpdateSimpleInventoryPostRequest} [orgAssetsMaterialUpdateSimpleInventoryPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateSimpleInventoryPost: async (orgAssetsMaterialUpdateSimpleInventoryPostRequest?: OrgAssetsMaterialUpdateSimpleInventoryPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/simple/inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateSimpleInventoryPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 public price
         * @param {OrgAssetsMaterialUpdateSimplePublicPricePostRequest} [orgAssetsMaterialUpdateSimplePublicPricePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateSimplePublicPricePost: async (orgAssetsMaterialUpdateSimplePublicPricePostRequest?: OrgAssetsMaterialUpdateSimplePublicPricePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/simple/public-price`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateSimplePublicPricePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 spec
         * @param {OrgAssetsMaterialUpdateSimpleSpecPostRequest} [orgAssetsMaterialUpdateSimpleSpecPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateSimpleSpecPost: async (orgAssetsMaterialUpdateSimpleSpecPostRequest?: OrgAssetsMaterialUpdateSimpleSpecPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/simple/spec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateSimpleSpecPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 tag
         * @param {OrgAssetsMaterialUpdateSimpleTagPostRequest} [orgAssetsMaterialUpdateSimpleTagPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateSimpleTagPost: async (orgAssetsMaterialUpdateSimpleTagPostRequest?: OrgAssetsMaterialUpdateSimpleTagPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/simple/tag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateSimpleTagPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯布料時上傳補充資料 - 產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateUploadAttachmentGetUploadUrlPost: async (userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/upload-attachment/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userFeedbackUploadAttachmentGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯布料時上傳補充資料
         * @param {OrgAssetsMaterialUpdateUploadAttachmentPostRequest} [orgAssetsMaterialUpdateUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateUploadAttachmentPost: async (orgAssetsMaterialUpdateUploadAttachmentPostRequest?: OrgAssetsMaterialUpdateUploadAttachmentPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/material/update/upload-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsMaterialUpdateUploadAttachmentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgAssetsUploadProgressExcelCancelPostRequest} [orgAssetsUploadProgressExcelCancelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsUploadProgressExcelCancelPost: async (orgAssetsUploadProgressExcelCancelPostRequest?: OrgAssetsUploadProgressExcelCancelPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/upload-progress/excel/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsUploadProgressExcelCancelPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgAssetsUploadProgressExcelGetListPostRequest} [orgAssetsUploadProgressExcelGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsUploadProgressExcelGetListPost: async (orgAssetsUploadProgressExcelGetListPostRequest?: OrgAssetsUploadProgressExcelGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/upload-progress/excel/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsUploadProgressExcelGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgAssetsUploadProgressExcelCancelPostRequest} [orgAssetsUploadProgressExcelCancelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsUploadProgressExcelGetMaterialListPost: async (orgAssetsUploadProgressExcelCancelPostRequest?: OrgAssetsUploadProgressExcelCancelPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/upload-progress/excel/get-material-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsUploadProgressExcelCancelPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Progress - Material
         * @param {OrgAssetsUploadProgressMaterialCancelPostRequest} [orgAssetsUploadProgressMaterialCancelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsUploadProgressMaterialCancelPost: async (orgAssetsUploadProgressMaterialCancelPostRequest?: OrgAssetsUploadProgressMaterialCancelPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/upload-progress/material/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsUploadProgressMaterialCancelPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Progress - Material
         * @param {OrgAssetsUploadProgressMaterialGetListPostRequest} [orgAssetsUploadProgressMaterialGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsUploadProgressMaterialGetListPost: async (orgAssetsUploadProgressMaterialGetListPostRequest?: OrgAssetsUploadProgressMaterialGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/upload-progress/material/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsUploadProgressMaterialGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Progress - u3m
         * @param {OrgAssetsUploadProgressU3mCancelPostRequest} [orgAssetsUploadProgressU3mCancelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsUploadProgressU3mCancelPost: async (orgAssetsUploadProgressU3mCancelPostRequest?: OrgAssetsUploadProgressU3mCancelPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/upload-progress/u3m/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsUploadProgressU3mCancelPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Progress - u3m
         * @param {OrgAssetsUploadProgressU3mGetListPostRequest} [orgAssetsUploadProgressU3mGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsUploadProgressU3mGetListPost: async (orgAssetsUploadProgressU3mGetListPostRequest?: OrgAssetsUploadProgressU3mGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/assets/upload-progress/u3m/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgAssetsUploadProgressU3mGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgAssetsApi - functional programming interface
 * @export
 */
export const OrgAssetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgAssetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary assets add to workspace
         * @param {OrgAssetsMaterialAddToWorkspacePostRequest} [orgAssetsMaterialAddToWorkspacePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialAddToWorkspacePost(orgAssetsMaterialAddToWorkspacePostRequest?: OrgAssetsMaterialAddToWorkspacePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialAddToWorkspacePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialAddToWorkspacePost(orgAssetsMaterialAddToWorkspacePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 批量上傳 - 產生S3檔案上傳url
         * @param {OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest} [orgAssetsMaterialBatchUploadGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialBatchUploadGetUploadUrlPost(orgAssetsMaterialBatchUploadGetUploadUrlPostRequest?: OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialBatchUploadGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialBatchUploadGetUploadUrlPost(orgAssetsMaterialBatchUploadGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 批量上傳
         * @param {OrgAssetsMaterialBatchUploadPostRequest} [orgAssetsMaterialBatchUploadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialBatchUploadPost(orgAssetsMaterialBatchUploadPostRequest?: OrgAssetsMaterialBatchUploadPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialBatchUploadPost(orgAssetsMaterialBatchUploadPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Carbon copy
         * @param {OrgAssetsMaterialCarbonCopyPostRequest} [orgAssetsMaterialCarbonCopyPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialCarbonCopyPost(orgAssetsMaterialCarbonCopyPostRequest?: OrgAssetsMaterialCarbonCopyPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialCarbonCopyPost(orgAssetsMaterialCarbonCopyPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgAssetsMaterialCloneCheckPostRequest} [orgAssetsMaterialCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialCloneCheckPost(orgAssetsMaterialCloneCheckPostRequest?: OrgAssetsMaterialCloneCheckPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedCloneCheckPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialCloneCheckPost(orgAssetsMaterialCloneCheckPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Clone
         * @param {OrgAssetsMaterialClonePostRequest} [orgAssetsMaterialClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialClonePost(orgAssetsMaterialClonePostRequest?: OrgAssetsMaterialClonePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialClonePost(orgAssetsMaterialClonePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 確定新增布料資訊
         * @param {OrgAssetsMaterialCreatePostRequest} [orgAssetsMaterialCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialCreatePost(orgAssetsMaterialCreatePostRequest?: OrgAssetsMaterialCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialCreatePost(orgAssetsMaterialCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 建立單一布料時移除補充資料
         * @param {OrgAssetsMaterialCreateRemoveAttachmentPostRequest} [orgAssetsMaterialCreateRemoveAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialCreateRemoveAttachmentPost(orgAssetsMaterialCreateRemoveAttachmentPostRequest?: OrgAssetsMaterialCreateRemoveAttachmentPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialCreateUploadAttachmentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialCreateRemoveAttachmentPost(orgAssetsMaterialCreateRemoveAttachmentPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 建立單一布料時上傳補充資料 - 產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialCreateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFeedbackUploadAttachmentGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialCreateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 建立單一布料時上傳補充資料
         * @param {OrgAssetsMaterialCreateUploadAttachmentPostRequest} [orgAssetsMaterialCreateUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialCreateUploadAttachmentPost(orgAssetsMaterialCreateUploadAttachmentPostRequest?: OrgAssetsMaterialCreateUploadAttachmentPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialCreateUploadAttachmentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialCreateUploadAttachmentPost(orgAssetsMaterialCreateUploadAttachmentPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 確認要刪除布料是否可以刪除
         * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialDeleteCheckPost(orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialDeleteCheckPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialDeleteCheckPost(orgAssetsMaterialDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除布料
         * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialDeletePost(orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialDeletePost(orgAssetsMaterialDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 匯出 Excel
         * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialExportPost(orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialExportPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialExportPost(orgAssetsMaterialDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得布料清單
         * @param {OrgAssetsMaterialGetListPostRequest} [orgAssetsMaterialGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialGetListPost(orgAssetsMaterialGetListPostRequest?: OrgAssetsMaterialGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialGetListPost(orgAssetsMaterialGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得單一布料資料
         * @param {OrgAssetsMaterialGetPostRequest} [orgAssetsMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialGetPost(orgAssetsMaterialGetPostRequest?: OrgAssetsMaterialGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialGetPost(orgAssetsMaterialGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 大量匯出 Excel
         * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialMassExportPost(orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialMassExportPost(orgAssetsMaterialDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 合併布卡
         * @param {OrgAssetsMaterialMergePostRequest} [orgAssetsMaterialMergePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialMergePost(orgAssetsMaterialMergePostRequest?: OrgAssetsMaterialMergePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialMergePost(orgAssetsMaterialMergePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 取得布料相關選項資訊
         * @param {OrgGetPostRequest} [orgGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialOptionsPost(orgGetPostRequest?: OrgGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialOptionsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialOptionsPost(orgGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Client 端 Smart Upload 產生S3檔案上傳url
         * @param {GeneralGetUploadUrlPostRequest} [generalGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialSmartUploadGetUploadUrlPost(generalGetUploadUrlPostRequest?: GeneralGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialSmartUploadGetUploadUrlPost(generalGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  **Access roles:** To be clear define
         * @summary Client 端 Smart Upload
         * @param {OrgAssetsMaterialSmartUploadPostRequest} [orgAssetsMaterialSmartUploadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialSmartUploadPost(orgAssetsMaterialSmartUploadPostRequest?: OrgAssetsMaterialSmartUploadPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialSmartUploadPost(orgAssetsMaterialSmartUploadPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增 pantone 色號
         * @param {OrgAssetsMaterialUpdateAddPantonePostRequest} [orgAssetsMaterialUpdateAddPantonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateAddPantonePost(orgAssetsMaterialUpdateAddPantonePostRequest?: OrgAssetsMaterialUpdateAddPantonePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateAddPantonePost(orgAssetsMaterialUpdateAddPantonePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 設定產品預覽圖-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest} [orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateCoverImgGetUploadUrlPost(orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateCoverImgGetUploadUrlPost(orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 設定產品預覽圖
         * @param {OrgAssetsMaterialUpdateCoverImgPostRequest} [orgAssetsMaterialUpdateCoverImgPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateCoverImgPost(orgAssetsMaterialUpdateCoverImgPostRequest?: OrgAssetsMaterialUpdateCoverImgPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateCoverImgPost(orgAssetsMaterialUpdateCoverImgPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 建立 U3M-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateGenerateU3mGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateGenerateU3mGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 建立 U3M
         * @param {OrgAssetsMaterialUpdateGenerateU3mPostRequest} [orgAssetsMaterialUpdateGenerateU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateGenerateU3mPost(orgAssetsMaterialUpdateGenerateU3mPostRequest?: OrgAssetsMaterialUpdateGenerateU3mPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateGenerateU3mPost(orgAssetsMaterialUpdateGenerateU3mPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 設定單面布或雙面布
         * @param {OrgAssetsMaterialUpdateIsDoubleSidePostRequest} [orgAssetsMaterialUpdateIsDoubleSidePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateIsDoubleSidePost(orgAssetsMaterialUpdateIsDoubleSidePostRequest?: OrgAssetsMaterialUpdateIsDoubleSidePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateIsDoubleSidePost(orgAssetsMaterialUpdateIsDoubleSidePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 編輯布料資訊
         * @param {OrgAssetsMaterialUpdatePostRequest} [orgAssetsMaterialUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdatePost(orgAssetsMaterialUpdatePostRequest?: OrgAssetsMaterialUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdatePost(orgAssetsMaterialUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯布料時移除補充資料
         * @param {OrgAssetsMaterialUpdateRemoveAttachmentPostRequest} [orgAssetsMaterialUpdateRemoveAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateRemoveAttachmentPost(orgAssetsMaterialUpdateRemoveAttachmentPostRequest?: OrgAssetsMaterialUpdateRemoveAttachmentPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateRemoveAttachmentPost(orgAssetsMaterialUpdateRemoveAttachmentPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除 pantone 色號
         * @param {OrgAssetsMaterialUpdateRemovePantonePostRequest} [orgAssetsMaterialUpdateRemovePantonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateRemovePantonePost(orgAssetsMaterialUpdateRemovePantonePostRequest?: OrgAssetsMaterialUpdateRemovePantonePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateRemovePantonePost(orgAssetsMaterialUpdateRemovePantonePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯正反面-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateScanImageGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateScanImageGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯正反面
         * @param {OrgAssetsMaterialUpdateScanImagePostRequest} [orgAssetsMaterialUpdateScanImagePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateScanImagePost(orgAssetsMaterialUpdateScanImagePostRequest?: OrgAssetsMaterialUpdateScanImagePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateScanImagePost(orgAssetsMaterialUpdateScanImagePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 inventory
         * @param {OrgAssetsMaterialUpdateSimpleInventoryPostRequest} [orgAssetsMaterialUpdateSimpleInventoryPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateSimpleInventoryPost(orgAssetsMaterialUpdateSimpleInventoryPostRequest?: OrgAssetsMaterialUpdateSimpleInventoryPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateSimpleInventoryPost(orgAssetsMaterialUpdateSimpleInventoryPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 public price
         * @param {OrgAssetsMaterialUpdateSimplePublicPricePostRequest} [orgAssetsMaterialUpdateSimplePublicPricePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateSimplePublicPricePost(orgAssetsMaterialUpdateSimplePublicPricePostRequest?: OrgAssetsMaterialUpdateSimplePublicPricePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateSimplePublicPricePost(orgAssetsMaterialUpdateSimplePublicPricePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 spec
         * @param {OrgAssetsMaterialUpdateSimpleSpecPostRequest} [orgAssetsMaterialUpdateSimpleSpecPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateSimpleSpecPost(orgAssetsMaterialUpdateSimpleSpecPostRequest?: OrgAssetsMaterialUpdateSimpleSpecPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateSimpleSpecPost(orgAssetsMaterialUpdateSimpleSpecPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 tag
         * @param {OrgAssetsMaterialUpdateSimpleTagPostRequest} [orgAssetsMaterialUpdateSimpleTagPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateSimpleTagPost(orgAssetsMaterialUpdateSimpleTagPostRequest?: OrgAssetsMaterialUpdateSimpleTagPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateSimpleTagPost(orgAssetsMaterialUpdateSimpleTagPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯布料時上傳補充資料 - 產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFeedbackUploadAttachmentGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯布料時上傳補充資料
         * @param {OrgAssetsMaterialUpdateUploadAttachmentPostRequest} [orgAssetsMaterialUpdateUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsMaterialUpdateUploadAttachmentPost(orgAssetsMaterialUpdateUploadAttachmentPostRequest?: OrgAssetsMaterialUpdateUploadAttachmentPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsMaterialUpdateUploadAttachmentPost(orgAssetsMaterialUpdateUploadAttachmentPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgAssetsUploadProgressExcelCancelPostRequest} [orgAssetsUploadProgressExcelCancelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsUploadProgressExcelCancelPost(orgAssetsUploadProgressExcelCancelPostRequest?: OrgAssetsUploadProgressExcelCancelPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsUploadProgressExcelCancelPost(orgAssetsUploadProgressExcelCancelPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgAssetsUploadProgressExcelGetListPostRequest} [orgAssetsUploadProgressExcelGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsUploadProgressExcelGetListPost(orgAssetsUploadProgressExcelGetListPostRequest?: OrgAssetsUploadProgressExcelGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsUploadProgressExcelGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsUploadProgressExcelGetListPost(orgAssetsUploadProgressExcelGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgAssetsUploadProgressExcelCancelPostRequest} [orgAssetsUploadProgressExcelCancelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsUploadProgressExcelGetMaterialListPost(orgAssetsUploadProgressExcelCancelPostRequest?: OrgAssetsUploadProgressExcelCancelPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsUploadProgressExcelGetMaterialListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsUploadProgressExcelGetMaterialListPost(orgAssetsUploadProgressExcelCancelPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Progress - Material
         * @param {OrgAssetsUploadProgressMaterialCancelPostRequest} [orgAssetsUploadProgressMaterialCancelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsUploadProgressMaterialCancelPost(orgAssetsUploadProgressMaterialCancelPostRequest?: OrgAssetsUploadProgressMaterialCancelPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsUploadProgressMaterialCancelPost(orgAssetsUploadProgressMaterialCancelPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Progress - Material
         * @param {OrgAssetsUploadProgressMaterialGetListPostRequest} [orgAssetsUploadProgressMaterialGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsUploadProgressMaterialGetListPost(orgAssetsUploadProgressMaterialGetListPostRequest?: OrgAssetsUploadProgressMaterialGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsUploadProgressMaterialGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsUploadProgressMaterialGetListPost(orgAssetsUploadProgressMaterialGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Progress - u3m
         * @param {OrgAssetsUploadProgressU3mCancelPostRequest} [orgAssetsUploadProgressU3mCancelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsUploadProgressU3mCancelPost(orgAssetsUploadProgressU3mCancelPostRequest?: OrgAssetsUploadProgressU3mCancelPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsUploadProgressU3mCancelPost(orgAssetsUploadProgressU3mCancelPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload Progress - u3m
         * @param {OrgAssetsUploadProgressU3mGetListPostRequest} [orgAssetsUploadProgressU3mGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgAssetsUploadProgressU3mGetListPost(orgAssetsUploadProgressU3mGetListPostRequest?: OrgAssetsUploadProgressU3mGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsUploadProgressU3mGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgAssetsUploadProgressU3mGetListPost(orgAssetsUploadProgressU3mGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgAssetsApi - factory interface
 * @export
 */
export const OrgAssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgAssetsApiFp(configuration)
    return {
        /**
         * 
         * @summary assets add to workspace
         * @param {OrgAssetsMaterialAddToWorkspacePostRequest} [orgAssetsMaterialAddToWorkspacePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialAddToWorkspacePost(orgAssetsMaterialAddToWorkspacePostRequest?: OrgAssetsMaterialAddToWorkspacePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialAddToWorkspacePost200Response> {
            return localVarFp.orgAssetsMaterialAddToWorkspacePost(orgAssetsMaterialAddToWorkspacePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 批量上傳 - 產生S3檔案上傳url
         * @param {OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest} [orgAssetsMaterialBatchUploadGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialBatchUploadGetUploadUrlPost(orgAssetsMaterialBatchUploadGetUploadUrlPostRequest?: OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialBatchUploadGetUploadUrlPost200Response> {
            return localVarFp.orgAssetsMaterialBatchUploadGetUploadUrlPost(orgAssetsMaterialBatchUploadGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *  **Access roles:** To be clear define
         * @summary 批量上傳
         * @param {OrgAssetsMaterialBatchUploadPostRequest} [orgAssetsMaterialBatchUploadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialBatchUploadPost(orgAssetsMaterialBatchUploadPostRequest?: OrgAssetsMaterialBatchUploadPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsMaterialBatchUploadPost(orgAssetsMaterialBatchUploadPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Carbon copy
         * @param {OrgAssetsMaterialCarbonCopyPostRequest} [orgAssetsMaterialCarbonCopyPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialCarbonCopyPost(orgAssetsMaterialCarbonCopyPostRequest?: OrgAssetsMaterialCarbonCopyPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsMaterialCarbonCopyPost(orgAssetsMaterialCarbonCopyPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgAssetsMaterialCloneCheckPostRequest} [orgAssetsMaterialCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialCloneCheckPost(orgAssetsMaterialCloneCheckPostRequest?: OrgAssetsMaterialCloneCheckPostRequest, options?: any): AxiosPromise<ShareGetReceivedCloneCheckPost200Response> {
            return localVarFp.orgAssetsMaterialCloneCheckPost(orgAssetsMaterialCloneCheckPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Clone
         * @param {OrgAssetsMaterialClonePostRequest} [orgAssetsMaterialClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialClonePost(orgAssetsMaterialClonePostRequest?: OrgAssetsMaterialClonePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsMaterialClonePost(orgAssetsMaterialClonePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 確定新增布料資訊
         * @param {OrgAssetsMaterialCreatePostRequest} [orgAssetsMaterialCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialCreatePost(orgAssetsMaterialCreatePostRequest?: OrgAssetsMaterialCreatePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgAssetsMaterialCreatePost(orgAssetsMaterialCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 建立單一布料時移除補充資料
         * @param {OrgAssetsMaterialCreateRemoveAttachmentPostRequest} [orgAssetsMaterialCreateRemoveAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialCreateRemoveAttachmentPost(orgAssetsMaterialCreateRemoveAttachmentPostRequest?: OrgAssetsMaterialCreateRemoveAttachmentPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialCreateUploadAttachmentPost200Response> {
            return localVarFp.orgAssetsMaterialCreateRemoveAttachmentPost(orgAssetsMaterialCreateRemoveAttachmentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 建立單一布料時上傳補充資料 - 產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialCreateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: any): AxiosPromise<UserFeedbackUploadAttachmentGetUploadUrlPost200Response> {
            return localVarFp.orgAssetsMaterialCreateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 建立單一布料時上傳補充資料
         * @param {OrgAssetsMaterialCreateUploadAttachmentPostRequest} [orgAssetsMaterialCreateUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialCreateUploadAttachmentPost(orgAssetsMaterialCreateUploadAttachmentPostRequest?: OrgAssetsMaterialCreateUploadAttachmentPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialCreateUploadAttachmentPost200Response> {
            return localVarFp.orgAssetsMaterialCreateUploadAttachmentPost(orgAssetsMaterialCreateUploadAttachmentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 確認要刪除布料是否可以刪除
         * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialDeleteCheckPost(orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialDeleteCheckPost200Response> {
            return localVarFp.orgAssetsMaterialDeleteCheckPost(orgAssetsMaterialDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除布料
         * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialDeletePost(orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsMaterialDeletePost(orgAssetsMaterialDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 匯出 Excel
         * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialExportPost(orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialExportPost200Response> {
            return localVarFp.orgAssetsMaterialExportPost(orgAssetsMaterialDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得布料清單
         * @param {OrgAssetsMaterialGetListPostRequest} [orgAssetsMaterialGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialGetListPost(orgAssetsMaterialGetListPostRequest?: OrgAssetsMaterialGetListPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetListPost200Response> {
            return localVarFp.orgAssetsMaterialGetListPost(orgAssetsMaterialGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得單一布料資料
         * @param {OrgAssetsMaterialGetPostRequest} [orgAssetsMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialGetPost(orgAssetsMaterialGetPostRequest?: OrgAssetsMaterialGetPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgAssetsMaterialGetPost(orgAssetsMaterialGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 大量匯出 Excel
         * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialMassExportPost(orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsMaterialMassExportPost(orgAssetsMaterialDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 合併布卡
         * @param {OrgAssetsMaterialMergePostRequest} [orgAssetsMaterialMergePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialMergePost(orgAssetsMaterialMergePostRequest?: OrgAssetsMaterialMergePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsMaterialMergePost(orgAssetsMaterialMergePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 取得布料相關選項資訊
         * @param {OrgGetPostRequest} [orgGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialOptionsPost(orgGetPostRequest?: OrgGetPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialOptionsPost200Response> {
            return localVarFp.orgAssetsMaterialOptionsPost(orgGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Client 端 Smart Upload 產生S3檔案上傳url
         * @param {GeneralGetUploadUrlPostRequest} [generalGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialSmartUploadGetUploadUrlPost(generalGetUploadUrlPostRequest?: GeneralGetUploadUrlPostRequest, options?: any): AxiosPromise<GeneralGetUploadUrlPost200Response> {
            return localVarFp.orgAssetsMaterialSmartUploadGetUploadUrlPost(generalGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *  **Access roles:** To be clear define
         * @summary Client 端 Smart Upload
         * @param {OrgAssetsMaterialSmartUploadPostRequest} [orgAssetsMaterialSmartUploadPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialSmartUploadPost(orgAssetsMaterialSmartUploadPostRequest?: OrgAssetsMaterialSmartUploadPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsMaterialSmartUploadPost(orgAssetsMaterialSmartUploadPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增 pantone 色號
         * @param {OrgAssetsMaterialUpdateAddPantonePostRequest} [orgAssetsMaterialUpdateAddPantonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateAddPantonePost(orgAssetsMaterialUpdateAddPantonePostRequest?: OrgAssetsMaterialUpdateAddPantonePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgAssetsMaterialUpdateAddPantonePost(orgAssetsMaterialUpdateAddPantonePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 設定產品預覽圖-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest} [orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateCoverImgGetUploadUrlPost(orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialUpdateCoverImgGetUploadUrlPost200Response> {
            return localVarFp.orgAssetsMaterialUpdateCoverImgGetUploadUrlPost(orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 設定產品預覽圖
         * @param {OrgAssetsMaterialUpdateCoverImgPostRequest} [orgAssetsMaterialUpdateCoverImgPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateCoverImgPost(orgAssetsMaterialUpdateCoverImgPostRequest?: OrgAssetsMaterialUpdateCoverImgPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgAssetsMaterialUpdateCoverImgPost(orgAssetsMaterialUpdateCoverImgPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 建立 U3M-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateGenerateU3mGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200Response> {
            return localVarFp.orgAssetsMaterialUpdateGenerateU3mGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 建立 U3M
         * @param {OrgAssetsMaterialUpdateGenerateU3mPostRequest} [orgAssetsMaterialUpdateGenerateU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateGenerateU3mPost(orgAssetsMaterialUpdateGenerateU3mPostRequest?: OrgAssetsMaterialUpdateGenerateU3mPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgAssetsMaterialUpdateGenerateU3mPost(orgAssetsMaterialUpdateGenerateU3mPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 設定單面布或雙面布
         * @param {OrgAssetsMaterialUpdateIsDoubleSidePostRequest} [orgAssetsMaterialUpdateIsDoubleSidePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateIsDoubleSidePost(orgAssetsMaterialUpdateIsDoubleSidePostRequest?: OrgAssetsMaterialUpdateIsDoubleSidePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgAssetsMaterialUpdateIsDoubleSidePost(orgAssetsMaterialUpdateIsDoubleSidePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 編輯布料資訊
         * @param {OrgAssetsMaterialUpdatePostRequest} [orgAssetsMaterialUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdatePost(orgAssetsMaterialUpdatePostRequest?: OrgAssetsMaterialUpdatePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsMaterialUpdatePost(orgAssetsMaterialUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯布料時移除補充資料
         * @param {OrgAssetsMaterialUpdateRemoveAttachmentPostRequest} [orgAssetsMaterialUpdateRemoveAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateRemoveAttachmentPost(orgAssetsMaterialUpdateRemoveAttachmentPostRequest?: OrgAssetsMaterialUpdateRemoveAttachmentPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgAssetsMaterialUpdateRemoveAttachmentPost(orgAssetsMaterialUpdateRemoveAttachmentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除 pantone 色號
         * @param {OrgAssetsMaterialUpdateRemovePantonePostRequest} [orgAssetsMaterialUpdateRemovePantonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateRemovePantonePost(orgAssetsMaterialUpdateRemovePantonePostRequest?: OrgAssetsMaterialUpdateRemovePantonePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgAssetsMaterialUpdateRemovePantonePost(orgAssetsMaterialUpdateRemovePantonePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯正反面-產生S3檔案上傳url
         * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateScanImageGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialUpdateScanImageGetUploadUrlPost200Response> {
            return localVarFp.orgAssetsMaterialUpdateScanImageGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯正反面
         * @param {OrgAssetsMaterialUpdateScanImagePostRequest} [orgAssetsMaterialUpdateScanImagePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateScanImagePost(orgAssetsMaterialUpdateScanImagePostRequest?: OrgAssetsMaterialUpdateScanImagePostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgAssetsMaterialUpdateScanImagePost(orgAssetsMaterialUpdateScanImagePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 inventory
         * @param {OrgAssetsMaterialUpdateSimpleInventoryPostRequest} [orgAssetsMaterialUpdateSimpleInventoryPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateSimpleInventoryPost(orgAssetsMaterialUpdateSimpleInventoryPostRequest?: OrgAssetsMaterialUpdateSimpleInventoryPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsMaterialUpdateSimpleInventoryPost(orgAssetsMaterialUpdateSimpleInventoryPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 public price
         * @param {OrgAssetsMaterialUpdateSimplePublicPricePostRequest} [orgAssetsMaterialUpdateSimplePublicPricePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateSimplePublicPricePost(orgAssetsMaterialUpdateSimplePublicPricePostRequest?: OrgAssetsMaterialUpdateSimplePublicPricePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsMaterialUpdateSimplePublicPricePost(orgAssetsMaterialUpdateSimplePublicPricePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 spec
         * @param {OrgAssetsMaterialUpdateSimpleSpecPostRequest} [orgAssetsMaterialUpdateSimpleSpecPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateSimpleSpecPost(orgAssetsMaterialUpdateSimpleSpecPostRequest?: OrgAssetsMaterialUpdateSimpleSpecPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsMaterialUpdateSimpleSpecPost(orgAssetsMaterialUpdateSimpleSpecPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 簡易編輯布料 tag
         * @param {OrgAssetsMaterialUpdateSimpleTagPostRequest} [orgAssetsMaterialUpdateSimpleTagPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateSimpleTagPost(orgAssetsMaterialUpdateSimpleTagPostRequest?: OrgAssetsMaterialUpdateSimpleTagPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsMaterialUpdateSimpleTagPost(orgAssetsMaterialUpdateSimpleTagPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯布料時上傳補充資料 - 產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: any): AxiosPromise<UserFeedbackUploadAttachmentGetUploadUrlPost200Response> {
            return localVarFp.orgAssetsMaterialUpdateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯布料時上傳補充資料
         * @param {OrgAssetsMaterialUpdateUploadAttachmentPostRequest} [orgAssetsMaterialUpdateUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsMaterialUpdateUploadAttachmentPost(orgAssetsMaterialUpdateUploadAttachmentPostRequest?: OrgAssetsMaterialUpdateUploadAttachmentPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialGetPost200Response> {
            return localVarFp.orgAssetsMaterialUpdateUploadAttachmentPost(orgAssetsMaterialUpdateUploadAttachmentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgAssetsUploadProgressExcelCancelPostRequest} [orgAssetsUploadProgressExcelCancelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsUploadProgressExcelCancelPost(orgAssetsUploadProgressExcelCancelPostRequest?: OrgAssetsUploadProgressExcelCancelPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsUploadProgressExcelCancelPost(orgAssetsUploadProgressExcelCancelPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgAssetsUploadProgressExcelGetListPostRequest} [orgAssetsUploadProgressExcelGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsUploadProgressExcelGetListPost(orgAssetsUploadProgressExcelGetListPostRequest?: OrgAssetsUploadProgressExcelGetListPostRequest, options?: any): AxiosPromise<OrgAssetsUploadProgressExcelGetListPost200Response> {
            return localVarFp.orgAssetsUploadProgressExcelGetListPost(orgAssetsUploadProgressExcelGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Progress - excel
         * @param {OrgAssetsUploadProgressExcelCancelPostRequest} [orgAssetsUploadProgressExcelCancelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsUploadProgressExcelGetMaterialListPost(orgAssetsUploadProgressExcelCancelPostRequest?: OrgAssetsUploadProgressExcelCancelPostRequest, options?: any): AxiosPromise<OrgAssetsUploadProgressExcelGetMaterialListPost200Response> {
            return localVarFp.orgAssetsUploadProgressExcelGetMaterialListPost(orgAssetsUploadProgressExcelCancelPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Progress - Material
         * @param {OrgAssetsUploadProgressMaterialCancelPostRequest} [orgAssetsUploadProgressMaterialCancelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsUploadProgressMaterialCancelPost(orgAssetsUploadProgressMaterialCancelPostRequest?: OrgAssetsUploadProgressMaterialCancelPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsUploadProgressMaterialCancelPost(orgAssetsUploadProgressMaterialCancelPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Progress - Material
         * @param {OrgAssetsUploadProgressMaterialGetListPostRequest} [orgAssetsUploadProgressMaterialGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsUploadProgressMaterialGetListPost(orgAssetsUploadProgressMaterialGetListPostRequest?: OrgAssetsUploadProgressMaterialGetListPostRequest, options?: any): AxiosPromise<OrgAssetsUploadProgressMaterialGetListPost200Response> {
            return localVarFp.orgAssetsUploadProgressMaterialGetListPost(orgAssetsUploadProgressMaterialGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Progress - u3m
         * @param {OrgAssetsUploadProgressU3mCancelPostRequest} [orgAssetsUploadProgressU3mCancelPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsUploadProgressU3mCancelPost(orgAssetsUploadProgressU3mCancelPostRequest?: OrgAssetsUploadProgressU3mCancelPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgAssetsUploadProgressU3mCancelPost(orgAssetsUploadProgressU3mCancelPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Progress - u3m
         * @param {OrgAssetsUploadProgressU3mGetListPostRequest} [orgAssetsUploadProgressU3mGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgAssetsUploadProgressU3mGetListPost(orgAssetsUploadProgressU3mGetListPostRequest?: OrgAssetsUploadProgressU3mGetListPostRequest, options?: any): AxiosPromise<OrgAssetsUploadProgressU3mGetListPost200Response> {
            return localVarFp.orgAssetsUploadProgressU3mGetListPost(orgAssetsUploadProgressU3mGetListPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrgAssetsApi - object-oriented interface
 * @export
 * @class OrgAssetsApi
 * @extends {BaseAPI}
 */
export class OrgAssetsApi extends BaseAPI {
    /**
     * 
     * @summary assets add to workspace
     * @param {OrgAssetsMaterialAddToWorkspacePostRequest} [orgAssetsMaterialAddToWorkspacePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialAddToWorkspacePost(orgAssetsMaterialAddToWorkspacePostRequest?: OrgAssetsMaterialAddToWorkspacePostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialAddToWorkspacePost(orgAssetsMaterialAddToWorkspacePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 批量上傳 - 產生S3檔案上傳url
     * @param {OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest} [orgAssetsMaterialBatchUploadGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialBatchUploadGetUploadUrlPost(orgAssetsMaterialBatchUploadGetUploadUrlPostRequest?: OrgAssetsMaterialBatchUploadGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialBatchUploadGetUploadUrlPost(orgAssetsMaterialBatchUploadGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  **Access roles:** To be clear define
     * @summary 批量上傳
     * @param {OrgAssetsMaterialBatchUploadPostRequest} [orgAssetsMaterialBatchUploadPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialBatchUploadPost(orgAssetsMaterialBatchUploadPostRequest?: OrgAssetsMaterialBatchUploadPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialBatchUploadPost(orgAssetsMaterialBatchUploadPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Carbon copy
     * @param {OrgAssetsMaterialCarbonCopyPostRequest} [orgAssetsMaterialCarbonCopyPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialCarbonCopyPost(orgAssetsMaterialCarbonCopyPostRequest?: OrgAssetsMaterialCarbonCopyPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialCarbonCopyPost(orgAssetsMaterialCarbonCopyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得此次 Clone 產生 quota 數量
     * @param {OrgAssetsMaterialCloneCheckPostRequest} [orgAssetsMaterialCloneCheckPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialCloneCheckPost(orgAssetsMaterialCloneCheckPostRequest?: OrgAssetsMaterialCloneCheckPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialCloneCheckPost(orgAssetsMaterialCloneCheckPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Clone
     * @param {OrgAssetsMaterialClonePostRequest} [orgAssetsMaterialClonePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialClonePost(orgAssetsMaterialClonePostRequest?: OrgAssetsMaterialClonePostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialClonePost(orgAssetsMaterialClonePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 確定新增布料資訊
     * @param {OrgAssetsMaterialCreatePostRequest} [orgAssetsMaterialCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialCreatePost(orgAssetsMaterialCreatePostRequest?: OrgAssetsMaterialCreatePostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialCreatePost(orgAssetsMaterialCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 建立單一布料時移除補充資料
     * @param {OrgAssetsMaterialCreateRemoveAttachmentPostRequest} [orgAssetsMaterialCreateRemoveAttachmentPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialCreateRemoveAttachmentPost(orgAssetsMaterialCreateRemoveAttachmentPostRequest?: OrgAssetsMaterialCreateRemoveAttachmentPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialCreateRemoveAttachmentPost(orgAssetsMaterialCreateRemoveAttachmentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 建立單一布料時上傳補充資料 - 產生S3檔案上傳url
     * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialCreateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialCreateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 建立單一布料時上傳補充資料
     * @param {OrgAssetsMaterialCreateUploadAttachmentPostRequest} [orgAssetsMaterialCreateUploadAttachmentPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialCreateUploadAttachmentPost(orgAssetsMaterialCreateUploadAttachmentPostRequest?: OrgAssetsMaterialCreateUploadAttachmentPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialCreateUploadAttachmentPost(orgAssetsMaterialCreateUploadAttachmentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 確認要刪除布料是否可以刪除
     * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialDeleteCheckPost(orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialDeleteCheckPost(orgAssetsMaterialDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除布料
     * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialDeletePost(orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialDeletePost(orgAssetsMaterialDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 匯出 Excel
     * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialExportPost(orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialExportPost(orgAssetsMaterialDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得布料清單
     * @param {OrgAssetsMaterialGetListPostRequest} [orgAssetsMaterialGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialGetListPost(orgAssetsMaterialGetListPostRequest?: OrgAssetsMaterialGetListPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialGetListPost(orgAssetsMaterialGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得單一布料資料
     * @param {OrgAssetsMaterialGetPostRequest} [orgAssetsMaterialGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialGetPost(orgAssetsMaterialGetPostRequest?: OrgAssetsMaterialGetPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialGetPost(orgAssetsMaterialGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 大量匯出 Excel
     * @param {OrgAssetsMaterialDeletePostRequest} [orgAssetsMaterialDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialMassExportPost(orgAssetsMaterialDeletePostRequest?: OrgAssetsMaterialDeletePostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialMassExportPost(orgAssetsMaterialDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 合併布卡
     * @param {OrgAssetsMaterialMergePostRequest} [orgAssetsMaterialMergePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialMergePost(orgAssetsMaterialMergePostRequest?: OrgAssetsMaterialMergePostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialMergePost(orgAssetsMaterialMergePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 取得布料相關選項資訊
     * @param {OrgGetPostRequest} [orgGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialOptionsPost(orgGetPostRequest?: OrgGetPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialOptionsPost(orgGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Client 端 Smart Upload 產生S3檔案上傳url
     * @param {GeneralGetUploadUrlPostRequest} [generalGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialSmartUploadGetUploadUrlPost(generalGetUploadUrlPostRequest?: GeneralGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialSmartUploadGetUploadUrlPost(generalGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  **Access roles:** To be clear define
     * @summary Client 端 Smart Upload
     * @param {OrgAssetsMaterialSmartUploadPostRequest} [orgAssetsMaterialSmartUploadPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialSmartUploadPost(orgAssetsMaterialSmartUploadPostRequest?: OrgAssetsMaterialSmartUploadPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialSmartUploadPost(orgAssetsMaterialSmartUploadPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增 pantone 色號
     * @param {OrgAssetsMaterialUpdateAddPantonePostRequest} [orgAssetsMaterialUpdateAddPantonePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateAddPantonePost(orgAssetsMaterialUpdateAddPantonePostRequest?: OrgAssetsMaterialUpdateAddPantonePostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateAddPantonePost(orgAssetsMaterialUpdateAddPantonePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 設定產品預覽圖-產生S3檔案上傳url
     * @param {OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest} [orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateCoverImgGetUploadUrlPost(orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateCoverImgGetUploadUrlPost(orgAssetsMaterialUpdateCoverImgGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 設定產品預覽圖
     * @param {OrgAssetsMaterialUpdateCoverImgPostRequest} [orgAssetsMaterialUpdateCoverImgPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateCoverImgPost(orgAssetsMaterialUpdateCoverImgPostRequest?: OrgAssetsMaterialUpdateCoverImgPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateCoverImgPost(orgAssetsMaterialUpdateCoverImgPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 建立 U3M-產生S3檔案上傳url
     * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateGenerateU3mGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateGenerateU3mGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 建立 U3M
     * @param {OrgAssetsMaterialUpdateGenerateU3mPostRequest} [orgAssetsMaterialUpdateGenerateU3mPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateGenerateU3mPost(orgAssetsMaterialUpdateGenerateU3mPostRequest?: OrgAssetsMaterialUpdateGenerateU3mPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateGenerateU3mPost(orgAssetsMaterialUpdateGenerateU3mPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 設定單面布或雙面布
     * @param {OrgAssetsMaterialUpdateIsDoubleSidePostRequest} [orgAssetsMaterialUpdateIsDoubleSidePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateIsDoubleSidePost(orgAssetsMaterialUpdateIsDoubleSidePostRequest?: OrgAssetsMaterialUpdateIsDoubleSidePostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateIsDoubleSidePost(orgAssetsMaterialUpdateIsDoubleSidePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 編輯布料資訊
     * @param {OrgAssetsMaterialUpdatePostRequest} [orgAssetsMaterialUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdatePost(orgAssetsMaterialUpdatePostRequest?: OrgAssetsMaterialUpdatePostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdatePost(orgAssetsMaterialUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯布料時移除補充資料
     * @param {OrgAssetsMaterialUpdateRemoveAttachmentPostRequest} [orgAssetsMaterialUpdateRemoveAttachmentPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateRemoveAttachmentPost(orgAssetsMaterialUpdateRemoveAttachmentPostRequest?: OrgAssetsMaterialUpdateRemoveAttachmentPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateRemoveAttachmentPost(orgAssetsMaterialUpdateRemoveAttachmentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除 pantone 色號
     * @param {OrgAssetsMaterialUpdateRemovePantonePostRequest} [orgAssetsMaterialUpdateRemovePantonePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateRemovePantonePost(orgAssetsMaterialUpdateRemovePantonePostRequest?: OrgAssetsMaterialUpdateRemovePantonePostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateRemovePantonePost(orgAssetsMaterialUpdateRemovePantonePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯正反面-產生S3檔案上傳url
     * @param {OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest} [orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateScanImageGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest?: OrgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateScanImageGetUploadUrlPost(orgAssetsMaterialUpdateScanImageGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯正反面
     * @param {OrgAssetsMaterialUpdateScanImagePostRequest} [orgAssetsMaterialUpdateScanImagePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateScanImagePost(orgAssetsMaterialUpdateScanImagePostRequest?: OrgAssetsMaterialUpdateScanImagePostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateScanImagePost(orgAssetsMaterialUpdateScanImagePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 簡易編輯布料 inventory
     * @param {OrgAssetsMaterialUpdateSimpleInventoryPostRequest} [orgAssetsMaterialUpdateSimpleInventoryPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateSimpleInventoryPost(orgAssetsMaterialUpdateSimpleInventoryPostRequest?: OrgAssetsMaterialUpdateSimpleInventoryPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateSimpleInventoryPost(orgAssetsMaterialUpdateSimpleInventoryPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 簡易編輯布料 public price
     * @param {OrgAssetsMaterialUpdateSimplePublicPricePostRequest} [orgAssetsMaterialUpdateSimplePublicPricePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateSimplePublicPricePost(orgAssetsMaterialUpdateSimplePublicPricePostRequest?: OrgAssetsMaterialUpdateSimplePublicPricePostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateSimplePublicPricePost(orgAssetsMaterialUpdateSimplePublicPricePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 簡易編輯布料 spec
     * @param {OrgAssetsMaterialUpdateSimpleSpecPostRequest} [orgAssetsMaterialUpdateSimpleSpecPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateSimpleSpecPost(orgAssetsMaterialUpdateSimpleSpecPostRequest?: OrgAssetsMaterialUpdateSimpleSpecPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateSimpleSpecPost(orgAssetsMaterialUpdateSimpleSpecPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 簡易編輯布料 tag
     * @param {OrgAssetsMaterialUpdateSimpleTagPostRequest} [orgAssetsMaterialUpdateSimpleTagPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateSimpleTagPost(orgAssetsMaterialUpdateSimpleTagPostRequest?: OrgAssetsMaterialUpdateSimpleTagPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateSimpleTagPost(orgAssetsMaterialUpdateSimpleTagPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯布料時上傳補充資料 - 產生S3檔案上傳url
     * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯布料時上傳補充資料
     * @param {OrgAssetsMaterialUpdateUploadAttachmentPostRequest} [orgAssetsMaterialUpdateUploadAttachmentPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsMaterialUpdateUploadAttachmentPost(orgAssetsMaterialUpdateUploadAttachmentPostRequest?: OrgAssetsMaterialUpdateUploadAttachmentPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsMaterialUpdateUploadAttachmentPost(orgAssetsMaterialUpdateUploadAttachmentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Progress - excel
     * @param {OrgAssetsUploadProgressExcelCancelPostRequest} [orgAssetsUploadProgressExcelCancelPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsUploadProgressExcelCancelPost(orgAssetsUploadProgressExcelCancelPostRequest?: OrgAssetsUploadProgressExcelCancelPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsUploadProgressExcelCancelPost(orgAssetsUploadProgressExcelCancelPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Progress - excel
     * @param {OrgAssetsUploadProgressExcelGetListPostRequest} [orgAssetsUploadProgressExcelGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsUploadProgressExcelGetListPost(orgAssetsUploadProgressExcelGetListPostRequest?: OrgAssetsUploadProgressExcelGetListPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsUploadProgressExcelGetListPost(orgAssetsUploadProgressExcelGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Progress - excel
     * @param {OrgAssetsUploadProgressExcelCancelPostRequest} [orgAssetsUploadProgressExcelCancelPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsUploadProgressExcelGetMaterialListPost(orgAssetsUploadProgressExcelCancelPostRequest?: OrgAssetsUploadProgressExcelCancelPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsUploadProgressExcelGetMaterialListPost(orgAssetsUploadProgressExcelCancelPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Progress - Material
     * @param {OrgAssetsUploadProgressMaterialCancelPostRequest} [orgAssetsUploadProgressMaterialCancelPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsUploadProgressMaterialCancelPost(orgAssetsUploadProgressMaterialCancelPostRequest?: OrgAssetsUploadProgressMaterialCancelPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsUploadProgressMaterialCancelPost(orgAssetsUploadProgressMaterialCancelPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Progress - Material
     * @param {OrgAssetsUploadProgressMaterialGetListPostRequest} [orgAssetsUploadProgressMaterialGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsUploadProgressMaterialGetListPost(orgAssetsUploadProgressMaterialGetListPostRequest?: OrgAssetsUploadProgressMaterialGetListPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsUploadProgressMaterialGetListPost(orgAssetsUploadProgressMaterialGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Progress - u3m
     * @param {OrgAssetsUploadProgressU3mCancelPostRequest} [orgAssetsUploadProgressU3mCancelPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsUploadProgressU3mCancelPost(orgAssetsUploadProgressU3mCancelPostRequest?: OrgAssetsUploadProgressU3mCancelPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsUploadProgressU3mCancelPost(orgAssetsUploadProgressU3mCancelPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Progress - u3m
     * @param {OrgAssetsUploadProgressU3mGetListPostRequest} [orgAssetsUploadProgressU3mGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgAssetsApi
     */
    public orgAssetsUploadProgressU3mGetListPost(orgAssetsUploadProgressU3mGetListPostRequest?: OrgAssetsUploadProgressU3mGetListPostRequest, options?: AxiosRequestConfig) {
        return OrgAssetsApiFp(this.configuration).orgAssetsUploadProgressU3mGetListPost(orgAssetsUploadProgressU3mGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrgMemberApi - axios parameter creator
 * @export
 */
export const OrgMemberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **Access roles:** To be clear define
         * @summary 取消邀請中成員加入組織
         * @param {OrgMemberCancelInvitationPostRequest} [orgMemberCancelInvitationPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMemberCancelInvitationPost: async (orgMemberCancelInvitationPostRequest?: OrgMemberCancelInvitationPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/member/cancel-invitation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMemberCancelInvitationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 更改組織成員角色
         * @param {OrgMemberChangeRolePostRequest} [orgMemberChangeRolePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMemberChangeRolePost: async (orgMemberChangeRolePostRequest?: OrgMemberChangeRolePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/member/change-role`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMemberChangeRolePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 從組織中移除特定成員
         * @param {OrgMemberDeletePostRequest} [orgMemberDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMemberDeletePost: async (orgMemberDeletePostRequest?: OrgMemberDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/member/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMemberDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 透過 email 邀請組外人士加入組織
         * @param {OrgMemberInviteViaEmailPostRequest} [orgMemberInviteViaEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMemberInviteViaEmailPost: async (orgMemberInviteViaEmailPostRequest?: OrgMemberInviteViaEmailPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/member/invite-via-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMemberInviteViaEmailPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * **Access roles:** To be clear define
         * @summary 透過 invite link 加入組織
         * @param {OrgMemberJoinViaLinkPostRequest} [orgMemberJoinViaLinkPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMemberJoinViaLinkPost: async (orgMemberJoinViaLinkPostRequest?: OrgMemberJoinViaLinkPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/member/join-via-link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMemberJoinViaLinkPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgMemberApi - functional programming interface
 * @export
 */
export const OrgMemberApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgMemberApiAxiosParamCreator(configuration)
    return {
        /**
         * **Access roles:** To be clear define
         * @summary 取消邀請中成員加入組織
         * @param {OrgMemberCancelInvitationPostRequest} [orgMemberCancelInvitationPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMemberCancelInvitationPost(orgMemberCancelInvitationPostRequest?: OrgMemberCancelInvitationPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMemberCancelInvitationPost(orgMemberCancelInvitationPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 更改組織成員角色
         * @param {OrgMemberChangeRolePostRequest} [orgMemberChangeRolePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMemberChangeRolePost(orgMemberChangeRolePostRequest?: OrgMemberChangeRolePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMemberChangeRolePost(orgMemberChangeRolePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 從組織中移除特定成員
         * @param {OrgMemberDeletePostRequest} [orgMemberDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMemberDeletePost(orgMemberDeletePostRequest?: OrgMemberDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMemberDeletePost(orgMemberDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 透過 email 邀請組外人士加入組織
         * @param {OrgMemberInviteViaEmailPostRequest} [orgMemberInviteViaEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMemberInviteViaEmailPost(orgMemberInviteViaEmailPostRequest?: OrgMemberInviteViaEmailPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMemberInviteViaEmailPost(orgMemberInviteViaEmailPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * **Access roles:** To be clear define
         * @summary 透過 invite link 加入組織
         * @param {OrgMemberJoinViaLinkPostRequest} [orgMemberJoinViaLinkPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMemberJoinViaLinkPost(orgMemberJoinViaLinkPostRequest?: OrgMemberJoinViaLinkPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMemberJoinViaLinkPost(orgMemberJoinViaLinkPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgMemberApi - factory interface
 * @export
 */
export const OrgMemberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgMemberApiFp(configuration)
    return {
        /**
         * **Access roles:** To be clear define
         * @summary 取消邀請中成員加入組織
         * @param {OrgMemberCancelInvitationPostRequest} [orgMemberCancelInvitationPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMemberCancelInvitationPost(orgMemberCancelInvitationPostRequest?: OrgMemberCancelInvitationPostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgMemberCancelInvitationPost(orgMemberCancelInvitationPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 更改組織成員角色
         * @param {OrgMemberChangeRolePostRequest} [orgMemberChangeRolePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMemberChangeRolePost(orgMemberChangeRolePostRequest?: OrgMemberChangeRolePostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgMemberChangeRolePost(orgMemberChangeRolePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 從組織中移除特定成員
         * @param {OrgMemberDeletePostRequest} [orgMemberDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMemberDeletePost(orgMemberDeletePostRequest?: OrgMemberDeletePostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgMemberDeletePost(orgMemberDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 透過 email 邀請組外人士加入組織
         * @param {OrgMemberInviteViaEmailPostRequest} [orgMemberInviteViaEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMemberInviteViaEmailPost(orgMemberInviteViaEmailPostRequest?: OrgMemberInviteViaEmailPostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgMemberInviteViaEmailPost(orgMemberInviteViaEmailPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * **Access roles:** To be clear define
         * @summary 透過 invite link 加入組織
         * @param {OrgMemberJoinViaLinkPostRequest} [orgMemberJoinViaLinkPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMemberJoinViaLinkPost(orgMemberJoinViaLinkPostRequest?: OrgMemberJoinViaLinkPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgMemberJoinViaLinkPost(orgMemberJoinViaLinkPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrgMemberApi - object-oriented interface
 * @export
 * @class OrgMemberApi
 * @extends {BaseAPI}
 */
export class OrgMemberApi extends BaseAPI {
    /**
     * **Access roles:** To be clear define
     * @summary 取消邀請中成員加入組織
     * @param {OrgMemberCancelInvitationPostRequest} [orgMemberCancelInvitationPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMemberApi
     */
    public orgMemberCancelInvitationPost(orgMemberCancelInvitationPostRequest?: OrgMemberCancelInvitationPostRequest, options?: AxiosRequestConfig) {
        return OrgMemberApiFp(this.configuration).orgMemberCancelInvitationPost(orgMemberCancelInvitationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 更改組織成員角色
     * @param {OrgMemberChangeRolePostRequest} [orgMemberChangeRolePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMemberApi
     */
    public orgMemberChangeRolePost(orgMemberChangeRolePostRequest?: OrgMemberChangeRolePostRequest, options?: AxiosRequestConfig) {
        return OrgMemberApiFp(this.configuration).orgMemberChangeRolePost(orgMemberChangeRolePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 從組織中移除特定成員
     * @param {OrgMemberDeletePostRequest} [orgMemberDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMemberApi
     */
    public orgMemberDeletePost(orgMemberDeletePostRequest?: OrgMemberDeletePostRequest, options?: AxiosRequestConfig) {
        return OrgMemberApiFp(this.configuration).orgMemberDeletePost(orgMemberDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 透過 email 邀請組外人士加入組織
     * @param {OrgMemberInviteViaEmailPostRequest} [orgMemberInviteViaEmailPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMemberApi
     */
    public orgMemberInviteViaEmailPost(orgMemberInviteViaEmailPostRequest?: OrgMemberInviteViaEmailPostRequest, options?: AxiosRequestConfig) {
        return OrgMemberApiFp(this.configuration).orgMemberInviteViaEmailPost(orgMemberInviteViaEmailPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Access roles:** To be clear define
     * @summary 透過 invite link 加入組織
     * @param {OrgMemberJoinViaLinkPostRequest} [orgMemberJoinViaLinkPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMemberApi
     */
    public orgMemberJoinViaLinkPost(orgMemberJoinViaLinkPostRequest?: OrgMemberJoinViaLinkPostRequest, options?: AxiosRequestConfig) {
        return OrgMemberApiFp(this.configuration).orgMemberJoinViaLinkPost(orgMemberJoinViaLinkPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrgMoodboardApi - axios parameter creator
 * @export
 */
export const OrgMoodboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 建立 Moodboard
         * @param {OrgMoodboardCreatePostRequest} [orgMoodboardCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardCreatePost: async (orgMoodboardCreatePostRequest?: OrgMoodboardCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除 Moodboard
         * @param {OrgMoodboardGetPostRequest} [orgMoodboardGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardDeletePost: async (orgMoodboardGetPostRequest?: OrgMoodboardGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Moodboard 清單
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardGetListPost: async (orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgRemoveLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Moodboard 資訊
         * @param {OrgMoodboardGetPostRequest} [orgMoodboardGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardGetPost: async (orgMoodboardGetPostRequest?: OrgMoodboardGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增 Moodboard Comment 資訊
         * @param {OrgMoodboardOfferCommentCreatePostRequest} [orgMoodboardOfferCommentCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferCommentCreatePost: async (orgMoodboardOfferCommentCreatePostRequest?: OrgMoodboardOfferCommentCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/comment/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferCommentCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Moodboard Comment 資訊
         * @param {OrgMoodboardOfferCommentGetPostRequest} [orgMoodboardOfferCommentGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferCommentGetPost: async (orgMoodboardOfferCommentGetPostRequest?: OrgMoodboardOfferCommentGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/comment/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferCommentGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgMoodboardOfferNodeDeletePostRequest} [orgMoodboardOfferNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeCloneCheckPost: async (orgMoodboardOfferNodeDeletePostRequest?: OrgMoodboardOfferNodeDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/node/clone-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferNodeDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary clone
         * @param {OrgMoodboardOfferNodeClonePostRequest} [orgMoodboardOfferNodeClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeClonePost: async (orgMoodboardOfferNodeClonePostRequest?: OrgMoodboardOfferNodeClonePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/node/clone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferNodeClonePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增 Moodboard node collection
         * @param {OrgMoodboardOfferNodeCollectionCreatePostRequest} [orgMoodboardOfferNodeCollectionCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeCollectionCreatePost: async (orgMoodboardOfferNodeCollectionCreatePostRequest?: OrgMoodboardOfferNodeCollectionCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/node/collection/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferNodeCollectionCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Moodboard Offer Node - colection
         * @param {OrgMoodboardOfferNodeCollectionGetPostRequest} [orgMoodboardOfferNodeCollectionGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeCollectionGetPost: async (orgMoodboardOfferNodeCollectionGetPostRequest?: OrgMoodboardOfferNodeCollectionGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/node/collection/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferNodeCollectionGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新 Moodboard node collection
         * @param {OrgMoodboardOfferNodeCollectionUpdatePostRequest} [orgMoodboardOfferNodeCollectionUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeCollectionUpdatePost: async (orgMoodboardOfferNodeCollectionUpdatePostRequest?: OrgMoodboardOfferNodeCollectionUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/node/collection/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferNodeCollectionUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除 Moodboard Offer Node
         * @param {OrgMoodboardOfferNodeDeletePostRequest} [orgMoodboardOfferNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeDeletePost: async (orgMoodboardOfferNodeDeletePostRequest?: OrgMoodboardOfferNodeDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/node/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferNodeDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增 Moodboard node material
         * @param {OrgMoodboardOfferNodeMaterialCreatePostRequest} [orgMoodboardOfferNodeMaterialCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeMaterialCreatePost: async (orgMoodboardOfferNodeMaterialCreatePostRequest?: OrgMoodboardOfferNodeMaterialCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/node/material/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferNodeMaterialCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 node material
         * @param {OrgMoodboardOfferNodeMaterialGetPostRequest} [orgMoodboardOfferNodeMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeMaterialGetPost: async (orgMoodboardOfferNodeMaterialGetPostRequest?: OrgMoodboardOfferNodeMaterialGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/node/material/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferNodeMaterialGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pick Moodboard Offer Node
         * @param {OrgMoodboardOfferNodePickPostRequest} [orgMoodboardOfferNodePickPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodePickPost: async (orgMoodboardOfferNodePickPostRequest?: OrgMoodboardOfferNodePickPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/node/pick`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferNodePickPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unpick Moodboard Offer Node
         * @param {OrgMoodboardOfferNodePickPostRequest} [orgMoodboardOfferNodePickPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeUnpickPost: async (orgMoodboardOfferNodePickPostRequest?: OrgMoodboardOfferNodePickPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/node/unpick`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferNodePickPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 匯出 Moodboard Offer Picked 資訊
         * @param {OrgMoodboardOfferPickedExportPostRequest} [orgMoodboardOfferPickedExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferPickedExportPost: async (orgMoodboardOfferPickedExportPostRequest?: OrgMoodboardOfferPickedExportPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/picked/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferPickedExportPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Moodboard Offer Picked 資訊
         * @param {OrgMoodboardOfferPickedGetPostRequest} [orgMoodboardOfferPickedGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferPickedGetPost: async (orgMoodboardOfferPickedGetPostRequest?: OrgMoodboardOfferPickedGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/picked/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferPickedGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 大量匯出 Moodboard Offer Picked 資訊
         * @param {OrgMoodboardOfferPickedExportPostRequest} [orgMoodboardOfferPickedExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferPickedMassExportPost: async (orgMoodboardOfferPickedExportPostRequest?: OrgMoodboardOfferPickedExportPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/offer/picked/mass-export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardOfferPickedExportPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分享 Moodboard 取得分享對象
         * @param {OrgMoodboardShareGetTargetPostRequest} [orgMoodboardShareGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardShareGetTargetPost: async (orgMoodboardShareGetTargetPostRequest?: OrgMoodboardShareGetTargetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/share/get-target`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardShareGetTargetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分享 Moodboard
         * @param {OrgMoodboardSharePostRequest} [orgMoodboardSharePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardSharePost: async (orgMoodboardSharePostRequest?: OrgMoodboardSharePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/share`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardSharePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移除分享 Moodboard
         * @param {OrgMoodboardShareRemovePostRequest} [orgMoodboardShareRemovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardShareRemovePost: async (orgMoodboardShareRemovePostRequest?: OrgMoodboardShareRemovePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/share/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardShareRemovePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯 Moodboard
         * @param {OrgMoodboardUpdatePostRequest} [orgMoodboardUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardUpdatePost: async (orgMoodboardUpdatePostRequest?: OrgMoodboardUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/moodboard/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgMoodboardUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgMoodboardApi - functional programming interface
 * @export
 */
export const OrgMoodboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgMoodboardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 建立 Moodboard
         * @param {OrgMoodboardCreatePostRequest} [orgMoodboardCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardCreatePost(orgMoodboardCreatePostRequest?: OrgMoodboardCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardCreatePost(orgMoodboardCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除 Moodboard
         * @param {OrgMoodboardGetPostRequest} [orgMoodboardGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardDeletePost(orgMoodboardGetPostRequest?: OrgMoodboardGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardDeletePost(orgMoodboardGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Moodboard 清單
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardGetListPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardGetListPost(orgRemoveLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Moodboard 資訊
         * @param {OrgMoodboardGetPostRequest} [orgMoodboardGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardGetPost(orgMoodboardGetPostRequest?: OrgMoodboardGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardGetPost(orgMoodboardGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增 Moodboard Comment 資訊
         * @param {OrgMoodboardOfferCommentCreatePostRequest} [orgMoodboardOfferCommentCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferCommentCreatePost(orgMoodboardOfferCommentCreatePostRequest?: OrgMoodboardOfferCommentCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferCommentGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferCommentCreatePost(orgMoodboardOfferCommentCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Moodboard Comment 資訊
         * @param {OrgMoodboardOfferCommentGetPostRequest} [orgMoodboardOfferCommentGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferCommentGetPost(orgMoodboardOfferCommentGetPostRequest?: OrgMoodboardOfferCommentGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferCommentGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferCommentGetPost(orgMoodboardOfferCommentGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgMoodboardOfferNodeDeletePostRequest} [orgMoodboardOfferNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferNodeCloneCheckPost(orgMoodboardOfferNodeDeletePostRequest?: OrgMoodboardOfferNodeDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedCloneCheckPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferNodeCloneCheckPost(orgMoodboardOfferNodeDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary clone
         * @param {OrgMoodboardOfferNodeClonePostRequest} [orgMoodboardOfferNodeClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferNodeClonePost(orgMoodboardOfferNodeClonePostRequest?: OrgMoodboardOfferNodeClonePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferNodeClonePost(orgMoodboardOfferNodeClonePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增 Moodboard node collection
         * @param {OrgMoodboardOfferNodeCollectionCreatePostRequest} [orgMoodboardOfferNodeCollectionCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferNodeCollectionCreatePost(orgMoodboardOfferNodeCollectionCreatePostRequest?: OrgMoodboardOfferNodeCollectionCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferPickedGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferNodeCollectionCreatePost(orgMoodboardOfferNodeCollectionCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Moodboard Offer Node - colection
         * @param {OrgMoodboardOfferNodeCollectionGetPostRequest} [orgMoodboardOfferNodeCollectionGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferNodeCollectionGetPost(orgMoodboardOfferNodeCollectionGetPostRequest?: OrgMoodboardOfferNodeCollectionGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferPickedGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferNodeCollectionGetPost(orgMoodboardOfferNodeCollectionGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新 Moodboard node collection
         * @param {OrgMoodboardOfferNodeCollectionUpdatePostRequest} [orgMoodboardOfferNodeCollectionUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferNodeCollectionUpdatePost(orgMoodboardOfferNodeCollectionUpdatePostRequest?: OrgMoodboardOfferNodeCollectionUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferPickedGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferNodeCollectionUpdatePost(orgMoodboardOfferNodeCollectionUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除 Moodboard Offer Node
         * @param {OrgMoodboardOfferNodeDeletePostRequest} [orgMoodboardOfferNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferNodeDeletePost(orgMoodboardOfferNodeDeletePostRequest?: OrgMoodboardOfferNodeDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferNodeDeletePost(orgMoodboardOfferNodeDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增 Moodboard node material
         * @param {OrgMoodboardOfferNodeMaterialCreatePostRequest} [orgMoodboardOfferNodeMaterialCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferNodeMaterialCreatePost(orgMoodboardOfferNodeMaterialCreatePostRequest?: OrgMoodboardOfferNodeMaterialCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferPickedGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferNodeMaterialCreatePost(orgMoodboardOfferNodeMaterialCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 node material
         * @param {OrgMoodboardOfferNodeMaterialGetPostRequest} [orgMoodboardOfferNodeMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferNodeMaterialGetPost(orgMoodboardOfferNodeMaterialGetPostRequest?: OrgMoodboardOfferNodeMaterialGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferNodeMaterialGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferNodeMaterialGetPost(orgMoodboardOfferNodeMaterialGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pick Moodboard Offer Node
         * @param {OrgMoodboardOfferNodePickPostRequest} [orgMoodboardOfferNodePickPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferNodePickPost(orgMoodboardOfferNodePickPostRequest?: OrgMoodboardOfferNodePickPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferNodePickPost(orgMoodboardOfferNodePickPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Unpick Moodboard Offer Node
         * @param {OrgMoodboardOfferNodePickPostRequest} [orgMoodboardOfferNodePickPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferNodeUnpickPost(orgMoodboardOfferNodePickPostRequest?: OrgMoodboardOfferNodePickPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferNodeUnpickPost(orgMoodboardOfferNodePickPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 匯出 Moodboard Offer Picked 資訊
         * @param {OrgMoodboardOfferPickedExportPostRequest} [orgMoodboardOfferPickedExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferPickedExportPost(orgMoodboardOfferPickedExportPostRequest?: OrgMoodboardOfferPickedExportPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgAssetsMaterialExportPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferPickedExportPost(orgMoodboardOfferPickedExportPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Moodboard Offer Picked 資訊
         * @param {OrgMoodboardOfferPickedGetPostRequest} [orgMoodboardOfferPickedGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferPickedGetPost(orgMoodboardOfferPickedGetPostRequest?: OrgMoodboardOfferPickedGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardOfferPickedGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferPickedGetPost(orgMoodboardOfferPickedGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 大量匯出 Moodboard Offer Picked 資訊
         * @param {OrgMoodboardOfferPickedExportPostRequest} [orgMoodboardOfferPickedExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardOfferPickedMassExportPost(orgMoodboardOfferPickedExportPostRequest?: OrgMoodboardOfferPickedExportPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardOfferPickedMassExportPost(orgMoodboardOfferPickedExportPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 分享 Moodboard 取得分享對象
         * @param {OrgMoodboardShareGetTargetPostRequest} [orgMoodboardShareGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardShareGetTargetPost(orgMoodboardShareGetTargetPostRequest?: OrgMoodboardShareGetTargetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardShareGetTargetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardShareGetTargetPost(orgMoodboardShareGetTargetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 分享 Moodboard
         * @param {OrgMoodboardSharePostRequest} [orgMoodboardSharePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardSharePost(orgMoodboardSharePostRequest?: OrgMoodboardSharePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardSharePost(orgMoodboardSharePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 移除分享 Moodboard
         * @param {OrgMoodboardShareRemovePostRequest} [orgMoodboardShareRemovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardShareRemovePost(orgMoodboardShareRemovePostRequest?: OrgMoodboardShareRemovePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardShareRemovePost(orgMoodboardShareRemovePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯 Moodboard
         * @param {OrgMoodboardUpdatePostRequest} [orgMoodboardUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgMoodboardUpdatePost(orgMoodboardUpdatePostRequest?: OrgMoodboardUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgMoodboardGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgMoodboardUpdatePost(orgMoodboardUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgMoodboardApi - factory interface
 * @export
 */
export const OrgMoodboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgMoodboardApiFp(configuration)
    return {
        /**
         * 
         * @summary 建立 Moodboard
         * @param {OrgMoodboardCreatePostRequest} [orgMoodboardCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardCreatePost(orgMoodboardCreatePostRequest?: OrgMoodboardCreatePostRequest, options?: any): AxiosPromise<OrgMoodboardGetPost200Response> {
            return localVarFp.orgMoodboardCreatePost(orgMoodboardCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除 Moodboard
         * @param {OrgMoodboardGetPostRequest} [orgMoodboardGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardDeletePost(orgMoodboardGetPostRequest?: OrgMoodboardGetPostRequest, options?: any): AxiosPromise<OrgMoodboardGetListPost200Response> {
            return localVarFp.orgMoodboardDeletePost(orgMoodboardGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Moodboard 清單
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardGetListPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: any): AxiosPromise<OrgMoodboardGetListPost200Response> {
            return localVarFp.orgMoodboardGetListPost(orgRemoveLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Moodboard 資訊
         * @param {OrgMoodboardGetPostRequest} [orgMoodboardGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardGetPost(orgMoodboardGetPostRequest?: OrgMoodboardGetPostRequest, options?: any): AxiosPromise<OrgMoodboardGetPost200Response> {
            return localVarFp.orgMoodboardGetPost(orgMoodboardGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增 Moodboard Comment 資訊
         * @param {OrgMoodboardOfferCommentCreatePostRequest} [orgMoodboardOfferCommentCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferCommentCreatePost(orgMoodboardOfferCommentCreatePostRequest?: OrgMoodboardOfferCommentCreatePostRequest, options?: any): AxiosPromise<OrgMoodboardOfferCommentGetPost200Response> {
            return localVarFp.orgMoodboardOfferCommentCreatePost(orgMoodboardOfferCommentCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Moodboard Comment 資訊
         * @param {OrgMoodboardOfferCommentGetPostRequest} [orgMoodboardOfferCommentGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferCommentGetPost(orgMoodboardOfferCommentGetPostRequest?: OrgMoodboardOfferCommentGetPostRequest, options?: any): AxiosPromise<OrgMoodboardOfferCommentGetPost200Response> {
            return localVarFp.orgMoodboardOfferCommentGetPost(orgMoodboardOfferCommentGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgMoodboardOfferNodeDeletePostRequest} [orgMoodboardOfferNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeCloneCheckPost(orgMoodboardOfferNodeDeletePostRequest?: OrgMoodboardOfferNodeDeletePostRequest, options?: any): AxiosPromise<ShareGetReceivedCloneCheckPost200Response> {
            return localVarFp.orgMoodboardOfferNodeCloneCheckPost(orgMoodboardOfferNodeDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary clone
         * @param {OrgMoodboardOfferNodeClonePostRequest} [orgMoodboardOfferNodeClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeClonePost(orgMoodboardOfferNodeClonePostRequest?: OrgMoodboardOfferNodeClonePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgMoodboardOfferNodeClonePost(orgMoodboardOfferNodeClonePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增 Moodboard node collection
         * @param {OrgMoodboardOfferNodeCollectionCreatePostRequest} [orgMoodboardOfferNodeCollectionCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeCollectionCreatePost(orgMoodboardOfferNodeCollectionCreatePostRequest?: OrgMoodboardOfferNodeCollectionCreatePostRequest, options?: any): AxiosPromise<OrgMoodboardOfferPickedGetPost200Response> {
            return localVarFp.orgMoodboardOfferNodeCollectionCreatePost(orgMoodboardOfferNodeCollectionCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Moodboard Offer Node - colection
         * @param {OrgMoodboardOfferNodeCollectionGetPostRequest} [orgMoodboardOfferNodeCollectionGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeCollectionGetPost(orgMoodboardOfferNodeCollectionGetPostRequest?: OrgMoodboardOfferNodeCollectionGetPostRequest, options?: any): AxiosPromise<OrgMoodboardOfferPickedGetPost200Response> {
            return localVarFp.orgMoodboardOfferNodeCollectionGetPost(orgMoodboardOfferNodeCollectionGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新 Moodboard node collection
         * @param {OrgMoodboardOfferNodeCollectionUpdatePostRequest} [orgMoodboardOfferNodeCollectionUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeCollectionUpdatePost(orgMoodboardOfferNodeCollectionUpdatePostRequest?: OrgMoodboardOfferNodeCollectionUpdatePostRequest, options?: any): AxiosPromise<OrgMoodboardOfferPickedGetPost200Response> {
            return localVarFp.orgMoodboardOfferNodeCollectionUpdatePost(orgMoodboardOfferNodeCollectionUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除 Moodboard Offer Node
         * @param {OrgMoodboardOfferNodeDeletePostRequest} [orgMoodboardOfferNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeDeletePost(orgMoodboardOfferNodeDeletePostRequest?: OrgMoodboardOfferNodeDeletePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgMoodboardOfferNodeDeletePost(orgMoodboardOfferNodeDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增 Moodboard node material
         * @param {OrgMoodboardOfferNodeMaterialCreatePostRequest} [orgMoodboardOfferNodeMaterialCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeMaterialCreatePost(orgMoodboardOfferNodeMaterialCreatePostRequest?: OrgMoodboardOfferNodeMaterialCreatePostRequest, options?: any): AxiosPromise<OrgMoodboardOfferPickedGetPost200Response> {
            return localVarFp.orgMoodboardOfferNodeMaterialCreatePost(orgMoodboardOfferNodeMaterialCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 node material
         * @param {OrgMoodboardOfferNodeMaterialGetPostRequest} [orgMoodboardOfferNodeMaterialGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeMaterialGetPost(orgMoodboardOfferNodeMaterialGetPostRequest?: OrgMoodboardOfferNodeMaterialGetPostRequest, options?: any): AxiosPromise<OrgMoodboardOfferNodeMaterialGetPost200Response> {
            return localVarFp.orgMoodboardOfferNodeMaterialGetPost(orgMoodboardOfferNodeMaterialGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pick Moodboard Offer Node
         * @param {OrgMoodboardOfferNodePickPostRequest} [orgMoodboardOfferNodePickPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodePickPost(orgMoodboardOfferNodePickPostRequest?: OrgMoodboardOfferNodePickPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgMoodboardOfferNodePickPost(orgMoodboardOfferNodePickPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unpick Moodboard Offer Node
         * @param {OrgMoodboardOfferNodePickPostRequest} [orgMoodboardOfferNodePickPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferNodeUnpickPost(orgMoodboardOfferNodePickPostRequest?: OrgMoodboardOfferNodePickPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgMoodboardOfferNodeUnpickPost(orgMoodboardOfferNodePickPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 匯出 Moodboard Offer Picked 資訊
         * @param {OrgMoodboardOfferPickedExportPostRequest} [orgMoodboardOfferPickedExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferPickedExportPost(orgMoodboardOfferPickedExportPostRequest?: OrgMoodboardOfferPickedExportPostRequest, options?: any): AxiosPromise<OrgAssetsMaterialExportPost200Response> {
            return localVarFp.orgMoodboardOfferPickedExportPost(orgMoodboardOfferPickedExportPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Moodboard Offer Picked 資訊
         * @param {OrgMoodboardOfferPickedGetPostRequest} [orgMoodboardOfferPickedGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferPickedGetPost(orgMoodboardOfferPickedGetPostRequest?: OrgMoodboardOfferPickedGetPostRequest, options?: any): AxiosPromise<OrgMoodboardOfferPickedGetPost200Response> {
            return localVarFp.orgMoodboardOfferPickedGetPost(orgMoodboardOfferPickedGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 大量匯出 Moodboard Offer Picked 資訊
         * @param {OrgMoodboardOfferPickedExportPostRequest} [orgMoodboardOfferPickedExportPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardOfferPickedMassExportPost(orgMoodboardOfferPickedExportPostRequest?: OrgMoodboardOfferPickedExportPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgMoodboardOfferPickedMassExportPost(orgMoodboardOfferPickedExportPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分享 Moodboard 取得分享對象
         * @param {OrgMoodboardShareGetTargetPostRequest} [orgMoodboardShareGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardShareGetTargetPost(orgMoodboardShareGetTargetPostRequest?: OrgMoodboardShareGetTargetPostRequest, options?: any): AxiosPromise<OrgMoodboardShareGetTargetPost200Response> {
            return localVarFp.orgMoodboardShareGetTargetPost(orgMoodboardShareGetTargetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分享 Moodboard
         * @param {OrgMoodboardSharePostRequest} [orgMoodboardSharePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardSharePost(orgMoodboardSharePostRequest?: OrgMoodboardSharePostRequest, options?: any): AxiosPromise<OrgMoodboardGetPost200Response> {
            return localVarFp.orgMoodboardSharePost(orgMoodboardSharePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 移除分享 Moodboard
         * @param {OrgMoodboardShareRemovePostRequest} [orgMoodboardShareRemovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardShareRemovePost(orgMoodboardShareRemovePostRequest?: OrgMoodboardShareRemovePostRequest, options?: any): AxiosPromise<OrgMoodboardGetPost200Response> {
            return localVarFp.orgMoodboardShareRemovePost(orgMoodboardShareRemovePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯 Moodboard
         * @param {OrgMoodboardUpdatePostRequest} [orgMoodboardUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgMoodboardUpdatePost(orgMoodboardUpdatePostRequest?: OrgMoodboardUpdatePostRequest, options?: any): AxiosPromise<OrgMoodboardGetPost200Response> {
            return localVarFp.orgMoodboardUpdatePost(orgMoodboardUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrgMoodboardApi - object-oriented interface
 * @export
 * @class OrgMoodboardApi
 * @extends {BaseAPI}
 */
export class OrgMoodboardApi extends BaseAPI {
    /**
     * 
     * @summary 建立 Moodboard
     * @param {OrgMoodboardCreatePostRequest} [orgMoodboardCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardCreatePost(orgMoodboardCreatePostRequest?: OrgMoodboardCreatePostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardCreatePost(orgMoodboardCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除 Moodboard
     * @param {OrgMoodboardGetPostRequest} [orgMoodboardGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardDeletePost(orgMoodboardGetPostRequest?: OrgMoodboardGetPostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardDeletePost(orgMoodboardGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Moodboard 清單
     * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardGetListPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardGetListPost(orgRemoveLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Moodboard 資訊
     * @param {OrgMoodboardGetPostRequest} [orgMoodboardGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardGetPost(orgMoodboardGetPostRequest?: OrgMoodboardGetPostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardGetPost(orgMoodboardGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增 Moodboard Comment 資訊
     * @param {OrgMoodboardOfferCommentCreatePostRequest} [orgMoodboardOfferCommentCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferCommentCreatePost(orgMoodboardOfferCommentCreatePostRequest?: OrgMoodboardOfferCommentCreatePostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferCommentCreatePost(orgMoodboardOfferCommentCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Moodboard Comment 資訊
     * @param {OrgMoodboardOfferCommentGetPostRequest} [orgMoodboardOfferCommentGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferCommentGetPost(orgMoodboardOfferCommentGetPostRequest?: OrgMoodboardOfferCommentGetPostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferCommentGetPost(orgMoodboardOfferCommentGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得此次 Clone 產生 quota 數量
     * @param {OrgMoodboardOfferNodeDeletePostRequest} [orgMoodboardOfferNodeDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferNodeCloneCheckPost(orgMoodboardOfferNodeDeletePostRequest?: OrgMoodboardOfferNodeDeletePostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferNodeCloneCheckPost(orgMoodboardOfferNodeDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary clone
     * @param {OrgMoodboardOfferNodeClonePostRequest} [orgMoodboardOfferNodeClonePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferNodeClonePost(orgMoodboardOfferNodeClonePostRequest?: OrgMoodboardOfferNodeClonePostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferNodeClonePost(orgMoodboardOfferNodeClonePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增 Moodboard node collection
     * @param {OrgMoodboardOfferNodeCollectionCreatePostRequest} [orgMoodboardOfferNodeCollectionCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferNodeCollectionCreatePost(orgMoodboardOfferNodeCollectionCreatePostRequest?: OrgMoodboardOfferNodeCollectionCreatePostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferNodeCollectionCreatePost(orgMoodboardOfferNodeCollectionCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Moodboard Offer Node - colection
     * @param {OrgMoodboardOfferNodeCollectionGetPostRequest} [orgMoodboardOfferNodeCollectionGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferNodeCollectionGetPost(orgMoodboardOfferNodeCollectionGetPostRequest?: OrgMoodboardOfferNodeCollectionGetPostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferNodeCollectionGetPost(orgMoodboardOfferNodeCollectionGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新 Moodboard node collection
     * @param {OrgMoodboardOfferNodeCollectionUpdatePostRequest} [orgMoodboardOfferNodeCollectionUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferNodeCollectionUpdatePost(orgMoodboardOfferNodeCollectionUpdatePostRequest?: OrgMoodboardOfferNodeCollectionUpdatePostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferNodeCollectionUpdatePost(orgMoodboardOfferNodeCollectionUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除 Moodboard Offer Node
     * @param {OrgMoodboardOfferNodeDeletePostRequest} [orgMoodboardOfferNodeDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferNodeDeletePost(orgMoodboardOfferNodeDeletePostRequest?: OrgMoodboardOfferNodeDeletePostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferNodeDeletePost(orgMoodboardOfferNodeDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增 Moodboard node material
     * @param {OrgMoodboardOfferNodeMaterialCreatePostRequest} [orgMoodboardOfferNodeMaterialCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferNodeMaterialCreatePost(orgMoodboardOfferNodeMaterialCreatePostRequest?: OrgMoodboardOfferNodeMaterialCreatePostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferNodeMaterialCreatePost(orgMoodboardOfferNodeMaterialCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 node material
     * @param {OrgMoodboardOfferNodeMaterialGetPostRequest} [orgMoodboardOfferNodeMaterialGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferNodeMaterialGetPost(orgMoodboardOfferNodeMaterialGetPostRequest?: OrgMoodboardOfferNodeMaterialGetPostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferNodeMaterialGetPost(orgMoodboardOfferNodeMaterialGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pick Moodboard Offer Node
     * @param {OrgMoodboardOfferNodePickPostRequest} [orgMoodboardOfferNodePickPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferNodePickPost(orgMoodboardOfferNodePickPostRequest?: OrgMoodboardOfferNodePickPostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferNodePickPost(orgMoodboardOfferNodePickPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unpick Moodboard Offer Node
     * @param {OrgMoodboardOfferNodePickPostRequest} [orgMoodboardOfferNodePickPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferNodeUnpickPost(orgMoodboardOfferNodePickPostRequest?: OrgMoodboardOfferNodePickPostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferNodeUnpickPost(orgMoodboardOfferNodePickPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 匯出 Moodboard Offer Picked 資訊
     * @param {OrgMoodboardOfferPickedExportPostRequest} [orgMoodboardOfferPickedExportPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferPickedExportPost(orgMoodboardOfferPickedExportPostRequest?: OrgMoodboardOfferPickedExportPostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferPickedExportPost(orgMoodboardOfferPickedExportPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Moodboard Offer Picked 資訊
     * @param {OrgMoodboardOfferPickedGetPostRequest} [orgMoodboardOfferPickedGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferPickedGetPost(orgMoodboardOfferPickedGetPostRequest?: OrgMoodboardOfferPickedGetPostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferPickedGetPost(orgMoodboardOfferPickedGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 大量匯出 Moodboard Offer Picked 資訊
     * @param {OrgMoodboardOfferPickedExportPostRequest} [orgMoodboardOfferPickedExportPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardOfferPickedMassExportPost(orgMoodboardOfferPickedExportPostRequest?: OrgMoodboardOfferPickedExportPostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardOfferPickedMassExportPost(orgMoodboardOfferPickedExportPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分享 Moodboard 取得分享對象
     * @param {OrgMoodboardShareGetTargetPostRequest} [orgMoodboardShareGetTargetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardShareGetTargetPost(orgMoodboardShareGetTargetPostRequest?: OrgMoodboardShareGetTargetPostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardShareGetTargetPost(orgMoodboardShareGetTargetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分享 Moodboard
     * @param {OrgMoodboardSharePostRequest} [orgMoodboardSharePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardSharePost(orgMoodboardSharePostRequest?: OrgMoodboardSharePostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardSharePost(orgMoodboardSharePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 移除分享 Moodboard
     * @param {OrgMoodboardShareRemovePostRequest} [orgMoodboardShareRemovePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardShareRemovePost(orgMoodboardShareRemovePostRequest?: OrgMoodboardShareRemovePostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardShareRemovePost(orgMoodboardShareRemovePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯 Moodboard
     * @param {OrgMoodboardUpdatePostRequest} [orgMoodboardUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgMoodboardApi
     */
    public orgMoodboardUpdatePost(orgMoodboardUpdatePostRequest?: OrgMoodboardUpdatePostRequest, options?: AxiosRequestConfig) {
        return OrgMoodboardApiFp(this.configuration).orgMoodboardUpdatePost(orgMoodboardUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrgPaymentApi - axios parameter creator
 * @export
 */
export const OrgPaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 編輯 Billing Info
         * @param {OrgPaymentBillingInfoUpdatePostRequest} [orgPaymentBillingInfoUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentBillingInfoUpdatePost: async (orgPaymentBillingInfoUpdatePostRequest?: OrgPaymentBillingInfoUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/payment/billing-info/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgPaymentBillingInfoUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stripe Card Setup
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentCardInfoCreateSetupPost: async (orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/payment/card-info/create-setup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgRemoveLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stripe Card Customer Setup
         * @param {OrgPaymentCardInfoSetupCustomerPostRequest} [orgPaymentCardInfoSetupCustomerPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentCardInfoSetupCustomerPost: async (orgPaymentCardInfoSetupCustomerPostRequest?: OrgPaymentCardInfoSetupCustomerPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/payment/card-info/setup-customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgPaymentCardInfoSetupCustomerPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得上個月未結清的使用服務清單及費用
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentGetLastMonthUnbilledInfoPost: async (orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/payment/get-last-month-unbilled-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgRemoveLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得服務相關價錢設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentGetPricingPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/payment/get-pricing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得當前未結清的使用服務清單及費用
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentGetUnbilledInfoPost: async (orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/payment/get-unbilled-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgRemoveLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 invoice list
         * @param {OrgPaymentInvoiceGetListPostRequest} [orgPaymentInvoiceGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentInvoiceGetListPost: async (orgPaymentInvoiceGetListPostRequest?: OrgPaymentInvoiceGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/payment/invoice/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgPaymentInvoiceGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得單一 invoice 資訊
         * @param {OrgPaymentInvoiceGetPostRequest} [orgPaymentInvoiceGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentInvoiceGetPost: async (orgPaymentInvoiceGetPostRequest?: OrgPaymentInvoiceGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/payment/invoice/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgPaymentInvoiceGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯單一invoice的Billing Info
         * @param {OrgPaymentInvoiceUpdateBillingInfoPostRequest} [orgPaymentInvoiceUpdateBillingInfoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentInvoiceUpdateBillingInfoPost: async (orgPaymentInvoiceUpdateBillingInfoPostRequest?: OrgPaymentInvoiceUpdateBillingInfoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/payment/invoice/update-billing-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgPaymentInvoiceUpdateBillingInfoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 把上個月未結清的費用結清
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentPayLastMonthUnbilledInfoPost: async (orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/payment/pay-last-month-unbilled-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgRemoveLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 啟用組織
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanActivatePost: async (orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/plan/activate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgRemoveLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取消訂購布片
         * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanCancelMaterialPost: async (orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/plan/cancel/material`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgPlanPurchaseU3mPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 停用組織
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanDeactivatePost: async (orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/plan/deactivate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgRemoveLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 訂購布片-取得加購布片到月底預計會多收多少錢
         * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanPurchaseMaterialGetEstimateChargingPost: async (orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/plan/purchase/material/get-estimate-charging`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgPlanPurchaseU3mPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 訂購布片
         * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanPurchaseMaterialPost: async (orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/plan/purchase/material`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgPlanPurchaseU3mPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 加購 U3M
         * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanPurchaseU3mPost: async (orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/plan/purchase/u3m`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgPlanPurchaseU3mPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 升級組織方案-取得升級方案到月底預計會多收多少錢
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanUpgradeGetEstimateChargingPost: async (orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/plan/upgrade/get-estimate-charging`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgRemoveLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 升級組織方案
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanUpgradePost: async (orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/plan/upgrade`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgRemoveLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 升級組織方案
         * @param {OrgPlanUpgradeRequestPostRequest} [orgPlanUpgradeRequestPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanUpgradeRequestPost: async (orgPlanUpgradeRequestPostRequest?: OrgPlanUpgradeRequestPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/plan/upgrade-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgPlanUpgradeRequestPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgPaymentApi - functional programming interface
 * @export
 */
export const OrgPaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgPaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 編輯 Billing Info
         * @param {OrgPaymentBillingInfoUpdatePostRequest} [orgPaymentBillingInfoUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPaymentBillingInfoUpdatePost(orgPaymentBillingInfoUpdatePostRequest?: OrgPaymentBillingInfoUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPaymentBillingInfoUpdatePost(orgPaymentBillingInfoUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Stripe Card Setup
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPaymentCardInfoCreateSetupPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgPaymentCardInfoCreateSetupPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPaymentCardInfoCreateSetupPost(orgRemoveLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Stripe Card Customer Setup
         * @param {OrgPaymentCardInfoSetupCustomerPostRequest} [orgPaymentCardInfoSetupCustomerPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPaymentCardInfoSetupCustomerPost(orgPaymentCardInfoSetupCustomerPostRequest?: OrgPaymentCardInfoSetupCustomerPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPaymentCardInfoSetupCustomerPost(orgPaymentCardInfoSetupCustomerPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得上個月未結清的使用服務清單及費用
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPaymentGetLastMonthUnbilledInfoPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgPaymentGetUnbilledInfoPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPaymentGetLastMonthUnbilledInfoPost(orgRemoveLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得服務相關價錢設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPaymentGetPricingPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgPaymentGetPricingPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPaymentGetPricingPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得當前未結清的使用服務清單及費用
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPaymentGetUnbilledInfoPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgPaymentGetUnbilledInfoPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPaymentGetUnbilledInfoPost(orgRemoveLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 invoice list
         * @param {OrgPaymentInvoiceGetListPostRequest} [orgPaymentInvoiceGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPaymentInvoiceGetListPost(orgPaymentInvoiceGetListPostRequest?: OrgPaymentInvoiceGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgPaymentInvoiceGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPaymentInvoiceGetListPost(orgPaymentInvoiceGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得單一 invoice 資訊
         * @param {OrgPaymentInvoiceGetPostRequest} [orgPaymentInvoiceGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPaymentInvoiceGetPost(orgPaymentInvoiceGetPostRequest?: OrgPaymentInvoiceGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgPaymentInvoiceGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPaymentInvoiceGetPost(orgPaymentInvoiceGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯單一invoice的Billing Info
         * @param {OrgPaymentInvoiceUpdateBillingInfoPostRequest} [orgPaymentInvoiceUpdateBillingInfoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPaymentInvoiceUpdateBillingInfoPost(orgPaymentInvoiceUpdateBillingInfoPostRequest?: OrgPaymentInvoiceUpdateBillingInfoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgPaymentInvoiceGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPaymentInvoiceUpdateBillingInfoPost(orgPaymentInvoiceUpdateBillingInfoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 把上個月未結清的費用結清
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPaymentPayLastMonthUnbilledInfoPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPaymentPayLastMonthUnbilledInfoPost(orgRemoveLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 啟用組織
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPlanActivatePost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPlanActivatePost(orgRemoveLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取消訂購布片
         * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPlanCancelMaterialPost(orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPlanCancelMaterialPost(orgPlanPurchaseU3mPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 停用組織
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPlanDeactivatePost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPlanDeactivatePost(orgRemoveLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 訂購布片-取得加購布片到月底預計會多收多少錢
         * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPlanPurchaseMaterialGetEstimateChargingPost(orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgPlanPurchaseMaterialGetEstimateChargingPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPlanPurchaseMaterialGetEstimateChargingPost(orgPlanPurchaseU3mPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 訂購布片
         * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPlanPurchaseMaterialPost(orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPlanPurchaseMaterialPost(orgPlanPurchaseU3mPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 加購 U3M
         * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPlanPurchaseU3mPost(orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgPlanPurchaseU3mPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPlanPurchaseU3mPost(orgPlanPurchaseU3mPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 升級組織方案-取得升級方案到月底預計會多收多少錢
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPlanUpgradeGetEstimateChargingPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgPlanUpgradeGetEstimateChargingPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPlanUpgradeGetEstimateChargingPost(orgRemoveLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 升級組織方案
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPlanUpgradePost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPlanUpgradePost(orgRemoveLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 升級組織方案
         * @param {OrgPlanUpgradeRequestPostRequest} [orgPlanUpgradeRequestPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgPlanUpgradeRequestPost(orgPlanUpgradeRequestPostRequest?: OrgPlanUpgradeRequestPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgPlanUpgradeRequestPost(orgPlanUpgradeRequestPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgPaymentApi - factory interface
 * @export
 */
export const OrgPaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgPaymentApiFp(configuration)
    return {
        /**
         * 
         * @summary 編輯 Billing Info
         * @param {OrgPaymentBillingInfoUpdatePostRequest} [orgPaymentBillingInfoUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentBillingInfoUpdatePost(orgPaymentBillingInfoUpdatePostRequest?: OrgPaymentBillingInfoUpdatePostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgPaymentBillingInfoUpdatePost(orgPaymentBillingInfoUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stripe Card Setup
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentCardInfoCreateSetupPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: any): AxiosPromise<OrgPaymentCardInfoCreateSetupPost200Response> {
            return localVarFp.orgPaymentCardInfoCreateSetupPost(orgRemoveLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stripe Card Customer Setup
         * @param {OrgPaymentCardInfoSetupCustomerPostRequest} [orgPaymentCardInfoSetupCustomerPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentCardInfoSetupCustomerPost(orgPaymentCardInfoSetupCustomerPostRequest?: OrgPaymentCardInfoSetupCustomerPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgPaymentCardInfoSetupCustomerPost(orgPaymentCardInfoSetupCustomerPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得上個月未結清的使用服務清單及費用
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentGetLastMonthUnbilledInfoPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: any): AxiosPromise<OrgPaymentGetUnbilledInfoPost200Response> {
            return localVarFp.orgPaymentGetLastMonthUnbilledInfoPost(orgRemoveLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得服務相關價錢設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentGetPricingPost(options?: any): AxiosPromise<OrgPaymentGetPricingPost200Response> {
            return localVarFp.orgPaymentGetPricingPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得當前未結清的使用服務清單及費用
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentGetUnbilledInfoPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: any): AxiosPromise<OrgPaymentGetUnbilledInfoPost200Response> {
            return localVarFp.orgPaymentGetUnbilledInfoPost(orgRemoveLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 invoice list
         * @param {OrgPaymentInvoiceGetListPostRequest} [orgPaymentInvoiceGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentInvoiceGetListPost(orgPaymentInvoiceGetListPostRequest?: OrgPaymentInvoiceGetListPostRequest, options?: any): AxiosPromise<OrgPaymentInvoiceGetListPost200Response> {
            return localVarFp.orgPaymentInvoiceGetListPost(orgPaymentInvoiceGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得單一 invoice 資訊
         * @param {OrgPaymentInvoiceGetPostRequest} [orgPaymentInvoiceGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentInvoiceGetPost(orgPaymentInvoiceGetPostRequest?: OrgPaymentInvoiceGetPostRequest, options?: any): AxiosPromise<OrgPaymentInvoiceGetPost200Response> {
            return localVarFp.orgPaymentInvoiceGetPost(orgPaymentInvoiceGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯單一invoice的Billing Info
         * @param {OrgPaymentInvoiceUpdateBillingInfoPostRequest} [orgPaymentInvoiceUpdateBillingInfoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentInvoiceUpdateBillingInfoPost(orgPaymentInvoiceUpdateBillingInfoPostRequest?: OrgPaymentInvoiceUpdateBillingInfoPostRequest, options?: any): AxiosPromise<OrgPaymentInvoiceGetPost200Response> {
            return localVarFp.orgPaymentInvoiceUpdateBillingInfoPost(orgPaymentInvoiceUpdateBillingInfoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 把上個月未結清的費用結清
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPaymentPayLastMonthUnbilledInfoPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgPaymentPayLastMonthUnbilledInfoPost(orgRemoveLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 啟用組織
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanActivatePost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgPlanActivatePost(orgRemoveLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取消訂購布片
         * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanCancelMaterialPost(orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgPlanCancelMaterialPost(orgPlanPurchaseU3mPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 停用組織
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanDeactivatePost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgPlanDeactivatePost(orgRemoveLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 訂購布片-取得加購布片到月底預計會多收多少錢
         * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanPurchaseMaterialGetEstimateChargingPost(orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options?: any): AxiosPromise<OrgPlanPurchaseMaterialGetEstimateChargingPost200Response> {
            return localVarFp.orgPlanPurchaseMaterialGetEstimateChargingPost(orgPlanPurchaseU3mPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 訂購布片
         * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanPurchaseMaterialPost(orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgPlanPurchaseMaterialPost(orgPlanPurchaseU3mPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 加購 U3M
         * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanPurchaseU3mPost(orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options?: any): AxiosPromise<OrgPlanPurchaseU3mPost200Response> {
            return localVarFp.orgPlanPurchaseU3mPost(orgPlanPurchaseU3mPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 升級組織方案-取得升級方案到月底預計會多收多少錢
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanUpgradeGetEstimateChargingPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: any): AxiosPromise<OrgPlanUpgradeGetEstimateChargingPost200Response> {
            return localVarFp.orgPlanUpgradeGetEstimateChargingPost(orgRemoveLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 升級組織方案
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanUpgradePost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: any): AxiosPromise<OrgGetPost200Response> {
            return localVarFp.orgPlanUpgradePost(orgRemoveLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 升級組織方案
         * @param {OrgPlanUpgradeRequestPostRequest} [orgPlanUpgradeRequestPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgPlanUpgradeRequestPost(orgPlanUpgradeRequestPostRequest?: OrgPlanUpgradeRequestPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgPlanUpgradeRequestPost(orgPlanUpgradeRequestPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrgPaymentApi - object-oriented interface
 * @export
 * @class OrgPaymentApi
 * @extends {BaseAPI}
 */
export class OrgPaymentApi extends BaseAPI {
    /**
     * 
     * @summary 編輯 Billing Info
     * @param {OrgPaymentBillingInfoUpdatePostRequest} [orgPaymentBillingInfoUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPaymentBillingInfoUpdatePost(orgPaymentBillingInfoUpdatePostRequest?: OrgPaymentBillingInfoUpdatePostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPaymentBillingInfoUpdatePost(orgPaymentBillingInfoUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stripe Card Setup
     * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPaymentCardInfoCreateSetupPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPaymentCardInfoCreateSetupPost(orgRemoveLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stripe Card Customer Setup
     * @param {OrgPaymentCardInfoSetupCustomerPostRequest} [orgPaymentCardInfoSetupCustomerPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPaymentCardInfoSetupCustomerPost(orgPaymentCardInfoSetupCustomerPostRequest?: OrgPaymentCardInfoSetupCustomerPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPaymentCardInfoSetupCustomerPost(orgPaymentCardInfoSetupCustomerPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得上個月未結清的使用服務清單及費用
     * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPaymentGetLastMonthUnbilledInfoPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPaymentGetLastMonthUnbilledInfoPost(orgRemoveLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得服務相關價錢設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPaymentGetPricingPost(options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPaymentGetPricingPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得當前未結清的使用服務清單及費用
     * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPaymentGetUnbilledInfoPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPaymentGetUnbilledInfoPost(orgRemoveLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 invoice list
     * @param {OrgPaymentInvoiceGetListPostRequest} [orgPaymentInvoiceGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPaymentInvoiceGetListPost(orgPaymentInvoiceGetListPostRequest?: OrgPaymentInvoiceGetListPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPaymentInvoiceGetListPost(orgPaymentInvoiceGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得單一 invoice 資訊
     * @param {OrgPaymentInvoiceGetPostRequest} [orgPaymentInvoiceGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPaymentInvoiceGetPost(orgPaymentInvoiceGetPostRequest?: OrgPaymentInvoiceGetPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPaymentInvoiceGetPost(orgPaymentInvoiceGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯單一invoice的Billing Info
     * @param {OrgPaymentInvoiceUpdateBillingInfoPostRequest} [orgPaymentInvoiceUpdateBillingInfoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPaymentInvoiceUpdateBillingInfoPost(orgPaymentInvoiceUpdateBillingInfoPostRequest?: OrgPaymentInvoiceUpdateBillingInfoPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPaymentInvoiceUpdateBillingInfoPost(orgPaymentInvoiceUpdateBillingInfoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 把上個月未結清的費用結清
     * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPaymentPayLastMonthUnbilledInfoPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPaymentPayLastMonthUnbilledInfoPost(orgRemoveLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 啟用組織
     * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPlanActivatePost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPlanActivatePost(orgRemoveLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取消訂購布片
     * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPlanCancelMaterialPost(orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPlanCancelMaterialPost(orgPlanPurchaseU3mPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 停用組織
     * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPlanDeactivatePost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPlanDeactivatePost(orgRemoveLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 訂購布片-取得加購布片到月底預計會多收多少錢
     * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPlanPurchaseMaterialGetEstimateChargingPost(orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPlanPurchaseMaterialGetEstimateChargingPost(orgPlanPurchaseU3mPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 訂購布片
     * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPlanPurchaseMaterialPost(orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPlanPurchaseMaterialPost(orgPlanPurchaseU3mPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 加購 U3M
     * @param {OrgPlanPurchaseU3mPostRequest} [orgPlanPurchaseU3mPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPlanPurchaseU3mPost(orgPlanPurchaseU3mPostRequest?: OrgPlanPurchaseU3mPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPlanPurchaseU3mPost(orgPlanPurchaseU3mPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 升級組織方案-取得升級方案到月底預計會多收多少錢
     * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPlanUpgradeGetEstimateChargingPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPlanUpgradeGetEstimateChargingPost(orgRemoveLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 升級組織方案
     * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPlanUpgradePost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPlanUpgradePost(orgRemoveLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 升級組織方案
     * @param {OrgPlanUpgradeRequestPostRequest} [orgPlanUpgradeRequestPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgPaymentApi
     */
    public orgPlanUpgradeRequestPost(orgPlanUpgradeRequestPostRequest?: OrgPlanUpgradeRequestPostRequest, options?: AxiosRequestConfig) {
        return OrgPaymentApiFp(this.configuration).orgPlanUpgradeRequestPost(orgPlanUpgradeRequestPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrgShareToMeApi - axios parameter creator
 * @export
 */
export const OrgShareToMeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgShareToMeCloneCheckPostRequest} [orgShareToMeCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgShareToMeCloneCheckPost: async (orgShareToMeCloneCheckPostRequest?: OrgShareToMeCloneCheckPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/share-to-me/clone-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgShareToMeCloneCheckPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Clone
         * @param {OrgShareToMeClonePostRequest} [orgShareToMeClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgShareToMeClonePost: async (orgShareToMeClonePostRequest?: OrgShareToMeClonePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/share-to-me/clone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgShareToMeClonePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除 share to me
         * @param {PublicCloneCheckPostRequest} [publicCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgShareToMeDeletePost: async (publicCloneCheckPostRequest?: PublicCloneCheckPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/share-to-me/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicCloneCheckPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Share to me 清單
         * @param {OrgShareToMeGetListPostRequest} [orgShareToMeGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgShareToMeGetListPost: async (orgShareToMeGetListPostRequest?: OrgShareToMeGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/share-to-me/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgShareToMeGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Share to me 布片詳細資料
         * @param {OrgShareToMeGetMaterialPostRequest} [orgShareToMeGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgShareToMeGetMaterialPost: async (orgShareToMeGetMaterialPostRequest?: OrgShareToMeGetMaterialPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/share-to-me/get-material`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgShareToMeGetMaterialPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgShareToMeApi - functional programming interface
 * @export
 */
export const OrgShareToMeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgShareToMeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgShareToMeCloneCheckPostRequest} [orgShareToMeCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgShareToMeCloneCheckPost(orgShareToMeCloneCheckPostRequest?: OrgShareToMeCloneCheckPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedCloneCheckPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgShareToMeCloneCheckPost(orgShareToMeCloneCheckPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Clone
         * @param {OrgShareToMeClonePostRequest} [orgShareToMeClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgShareToMeClonePost(orgShareToMeClonePostRequest?: OrgShareToMeClonePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgShareToMeClonePost(orgShareToMeClonePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除 share to me
         * @param {PublicCloneCheckPostRequest} [publicCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgShareToMeDeletePost(publicCloneCheckPostRequest?: PublicCloneCheckPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgShareToMeDeletePost(publicCloneCheckPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Share to me 清單
         * @param {OrgShareToMeGetListPostRequest} [orgShareToMeGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgShareToMeGetListPost(orgShareToMeGetListPostRequest?: OrgShareToMeGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgShareToMeGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgShareToMeGetListPost(orgShareToMeGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Share to me 布片詳細資料
         * @param {OrgShareToMeGetMaterialPostRequest} [orgShareToMeGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgShareToMeGetMaterialPost(orgShareToMeGetMaterialPostRequest?: OrgShareToMeGetMaterialPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedGetMaterialPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgShareToMeGetMaterialPost(orgShareToMeGetMaterialPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgShareToMeApi - factory interface
 * @export
 */
export const OrgShareToMeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgShareToMeApiFp(configuration)
    return {
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {OrgShareToMeCloneCheckPostRequest} [orgShareToMeCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgShareToMeCloneCheckPost(orgShareToMeCloneCheckPostRequest?: OrgShareToMeCloneCheckPostRequest, options?: any): AxiosPromise<ShareGetReceivedCloneCheckPost200Response> {
            return localVarFp.orgShareToMeCloneCheckPost(orgShareToMeCloneCheckPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Clone
         * @param {OrgShareToMeClonePostRequest} [orgShareToMeClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgShareToMeClonePost(orgShareToMeClonePostRequest?: OrgShareToMeClonePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgShareToMeClonePost(orgShareToMeClonePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除 share to me
         * @param {PublicCloneCheckPostRequest} [publicCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgShareToMeDeletePost(publicCloneCheckPostRequest?: PublicCloneCheckPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgShareToMeDeletePost(publicCloneCheckPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Share to me 清單
         * @param {OrgShareToMeGetListPostRequest} [orgShareToMeGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgShareToMeGetListPost(orgShareToMeGetListPostRequest?: OrgShareToMeGetListPostRequest, options?: any): AxiosPromise<OrgShareToMeGetListPost200Response> {
            return localVarFp.orgShareToMeGetListPost(orgShareToMeGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Share to me 布片詳細資料
         * @param {OrgShareToMeGetMaterialPostRequest} [orgShareToMeGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgShareToMeGetMaterialPost(orgShareToMeGetMaterialPostRequest?: OrgShareToMeGetMaterialPostRequest, options?: any): AxiosPromise<ShareGetReceivedGetMaterialPost200Response> {
            return localVarFp.orgShareToMeGetMaterialPost(orgShareToMeGetMaterialPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrgShareToMeApi - object-oriented interface
 * @export
 * @class OrgShareToMeApi
 * @extends {BaseAPI}
 */
export class OrgShareToMeApi extends BaseAPI {
    /**
     * 
     * @summary 取得此次 Clone 產生 quota 數量
     * @param {OrgShareToMeCloneCheckPostRequest} [orgShareToMeCloneCheckPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgShareToMeApi
     */
    public orgShareToMeCloneCheckPost(orgShareToMeCloneCheckPostRequest?: OrgShareToMeCloneCheckPostRequest, options?: AxiosRequestConfig) {
        return OrgShareToMeApiFp(this.configuration).orgShareToMeCloneCheckPost(orgShareToMeCloneCheckPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Clone
     * @param {OrgShareToMeClonePostRequest} [orgShareToMeClonePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgShareToMeApi
     */
    public orgShareToMeClonePost(orgShareToMeClonePostRequest?: OrgShareToMeClonePostRequest, options?: AxiosRequestConfig) {
        return OrgShareToMeApiFp(this.configuration).orgShareToMeClonePost(orgShareToMeClonePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除 share to me
     * @param {PublicCloneCheckPostRequest} [publicCloneCheckPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgShareToMeApi
     */
    public orgShareToMeDeletePost(publicCloneCheckPostRequest?: PublicCloneCheckPostRequest, options?: AxiosRequestConfig) {
        return OrgShareToMeApiFp(this.configuration).orgShareToMeDeletePost(publicCloneCheckPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Share to me 清單
     * @param {OrgShareToMeGetListPostRequest} [orgShareToMeGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgShareToMeApi
     */
    public orgShareToMeGetListPost(orgShareToMeGetListPostRequest?: OrgShareToMeGetListPostRequest, options?: AxiosRequestConfig) {
        return OrgShareToMeApiFp(this.configuration).orgShareToMeGetListPost(orgShareToMeGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Share to me 布片詳細資料
     * @param {OrgShareToMeGetMaterialPostRequest} [orgShareToMeGetMaterialPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgShareToMeApi
     */
    public orgShareToMeGetMaterialPost(orgShareToMeGetMaterialPostRequest?: OrgShareToMeGetMaterialPostRequest, options?: AxiosRequestConfig) {
        return OrgShareToMeApiFp(this.configuration).orgShareToMeGetMaterialPost(orgShareToMeGetMaterialPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrgUserApi - axios parameter creator
 * @export
 */
export const OrgUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取得使用者在組織下的資料
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUserGetPost: async (orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/user/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgRemoveLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 瀏覽通知
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUserReadNotificationPost: async (orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/user/read-notification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgRemoveLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移除使用者在組織中的頭像
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUserRemoveAvatarPost: async (orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/user/remove-avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgRemoveLogoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新使用者在組織中的頭像-產生S3檔案上傳url
         * @param {OrgUserUpdateAvatarGetUploadUrlPostRequest} [orgUserUpdateAvatarGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUserUpdateAvatarGetUploadUrlPost: async (orgUserUpdateAvatarGetUploadUrlPostRequest?: OrgUserUpdateAvatarGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/user/update-avatar/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgUserUpdateAvatarGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新使用者在組織中的頭像
         * @param {OrgUserUpdateAvatarPostRequest} [orgUserUpdateAvatarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUserUpdateAvatarPost: async (orgUserUpdateAvatarPostRequest?: OrgUserUpdateAvatarPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/user/update-avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgUserUpdateAvatarPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新使用者在組織中的顯示名稱
         * @param {OrgUserUpdateDisplayNamePostRequest} [orgUserUpdateDisplayNamePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUserUpdateDisplayNamePost: async (orgUserUpdateDisplayNamePostRequest?: OrgUserUpdateDisplayNamePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/user/update-display-name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgUserUpdateDisplayNamePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgUserApi - functional programming interface
 * @export
 */
export const OrgUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 取得使用者在組織下的資料
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgUserGetPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgValueAddedServiceMade2flowScheduleMeetingPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgUserGetPost(orgRemoveLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 瀏覽通知
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgUserReadNotificationPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgValueAddedServiceMade2flowScheduleMeetingPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgUserReadNotificationPost(orgRemoveLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 移除使用者在組織中的頭像
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgUserRemoveAvatarPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgUserRemoveAvatarPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgUserRemoveAvatarPost(orgRemoveLogoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新使用者在組織中的頭像-產生S3檔案上傳url
         * @param {OrgUserUpdateAvatarGetUploadUrlPostRequest} [orgUserUpdateAvatarGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgUserUpdateAvatarGetUploadUrlPost(orgUserUpdateAvatarGetUploadUrlPostRequest?: OrgUserUpdateAvatarGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgUserUpdateAvatarGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgUserUpdateAvatarGetUploadUrlPost(orgUserUpdateAvatarGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新使用者在組織中的頭像
         * @param {OrgUserUpdateAvatarPostRequest} [orgUserUpdateAvatarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgUserUpdateAvatarPost(orgUserUpdateAvatarPostRequest?: OrgUserUpdateAvatarPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgValueAddedServiceMade2flowScheduleMeetingPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgUserUpdateAvatarPost(orgUserUpdateAvatarPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新使用者在組織中的顯示名稱
         * @param {OrgUserUpdateDisplayNamePostRequest} [orgUserUpdateDisplayNamePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgUserUpdateDisplayNamePost(orgUserUpdateDisplayNamePostRequest?: OrgUserUpdateDisplayNamePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgValueAddedServiceMade2flowScheduleMeetingPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgUserUpdateDisplayNamePost(orgUserUpdateDisplayNamePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgUserApi - factory interface
 * @export
 */
export const OrgUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgUserApiFp(configuration)
    return {
        /**
         * 
         * @summary 取得使用者在組織下的資料
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUserGetPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: any): AxiosPromise<OrgValueAddedServiceMade2flowScheduleMeetingPost200Response> {
            return localVarFp.orgUserGetPost(orgRemoveLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 瀏覽通知
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUserReadNotificationPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: any): AxiosPromise<OrgValueAddedServiceMade2flowScheduleMeetingPost200Response> {
            return localVarFp.orgUserReadNotificationPost(orgRemoveLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 移除使用者在組織中的頭像
         * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUserRemoveAvatarPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: any): AxiosPromise<OrgUserRemoveAvatarPost200Response> {
            return localVarFp.orgUserRemoveAvatarPost(orgRemoveLogoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新使用者在組織中的頭像-產生S3檔案上傳url
         * @param {OrgUserUpdateAvatarGetUploadUrlPostRequest} [orgUserUpdateAvatarGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUserUpdateAvatarGetUploadUrlPost(orgUserUpdateAvatarGetUploadUrlPostRequest?: OrgUserUpdateAvatarGetUploadUrlPostRequest, options?: any): AxiosPromise<OrgUserUpdateAvatarGetUploadUrlPost200Response> {
            return localVarFp.orgUserUpdateAvatarGetUploadUrlPost(orgUserUpdateAvatarGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新使用者在組織中的頭像
         * @param {OrgUserUpdateAvatarPostRequest} [orgUserUpdateAvatarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUserUpdateAvatarPost(orgUserUpdateAvatarPostRequest?: OrgUserUpdateAvatarPostRequest, options?: any): AxiosPromise<OrgValueAddedServiceMade2flowScheduleMeetingPost200Response> {
            return localVarFp.orgUserUpdateAvatarPost(orgUserUpdateAvatarPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新使用者在組織中的顯示名稱
         * @param {OrgUserUpdateDisplayNamePostRequest} [orgUserUpdateDisplayNamePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgUserUpdateDisplayNamePost(orgUserUpdateDisplayNamePostRequest?: OrgUserUpdateDisplayNamePostRequest, options?: any): AxiosPromise<OrgValueAddedServiceMade2flowScheduleMeetingPost200Response> {
            return localVarFp.orgUserUpdateDisplayNamePost(orgUserUpdateDisplayNamePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrgUserApi - object-oriented interface
 * @export
 * @class OrgUserApi
 * @extends {BaseAPI}
 */
export class OrgUserApi extends BaseAPI {
    /**
     * 
     * @summary 取得使用者在組織下的資料
     * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgUserApi
     */
    public orgUserGetPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgUserApiFp(this.configuration).orgUserGetPost(orgRemoveLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 瀏覽通知
     * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgUserApi
     */
    public orgUserReadNotificationPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgUserApiFp(this.configuration).orgUserReadNotificationPost(orgRemoveLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 移除使用者在組織中的頭像
     * @param {OrgRemoveLogoPostRequest} [orgRemoveLogoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgUserApi
     */
    public orgUserRemoveAvatarPost(orgRemoveLogoPostRequest?: OrgRemoveLogoPostRequest, options?: AxiosRequestConfig) {
        return OrgUserApiFp(this.configuration).orgUserRemoveAvatarPost(orgRemoveLogoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新使用者在組織中的頭像-產生S3檔案上傳url
     * @param {OrgUserUpdateAvatarGetUploadUrlPostRequest} [orgUserUpdateAvatarGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgUserApi
     */
    public orgUserUpdateAvatarGetUploadUrlPost(orgUserUpdateAvatarGetUploadUrlPostRequest?: OrgUserUpdateAvatarGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return OrgUserApiFp(this.configuration).orgUserUpdateAvatarGetUploadUrlPost(orgUserUpdateAvatarGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新使用者在組織中的頭像
     * @param {OrgUserUpdateAvatarPostRequest} [orgUserUpdateAvatarPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgUserApi
     */
    public orgUserUpdateAvatarPost(orgUserUpdateAvatarPostRequest?: OrgUserUpdateAvatarPostRequest, options?: AxiosRequestConfig) {
        return OrgUserApiFp(this.configuration).orgUserUpdateAvatarPost(orgUserUpdateAvatarPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新使用者在組織中的顯示名稱
     * @param {OrgUserUpdateDisplayNamePostRequest} [orgUserUpdateDisplayNamePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgUserApi
     */
    public orgUserUpdateDisplayNamePost(orgUserUpdateDisplayNamePostRequest?: OrgUserUpdateDisplayNamePostRequest, options?: AxiosRequestConfig) {
        return OrgUserApiFp(this.configuration).orgUserUpdateDisplayNamePost(orgUserUpdateDisplayNamePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrgValueAddedServiceApi - axios parameter creator
 * @export
 */
export const OrgValueAddedServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 加值服務 Made2 Flow 預約Meeting
         * @param {OrgValueAddedServiceMade2flowScheduleMeetingPostRequest} [orgValueAddedServiceMade2flowScheduleMeetingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgValueAddedServiceMade2flowScheduleMeetingPost: async (orgValueAddedServiceMade2flowScheduleMeetingPostRequest?: OrgValueAddedServiceMade2flowScheduleMeetingPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/value-added-service/made2flow/schedule-meeting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgValueAddedServiceMade2flowScheduleMeetingPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgValueAddedServiceApi - functional programming interface
 * @export
 */
export const OrgValueAddedServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgValueAddedServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 加值服務 Made2 Flow 預約Meeting
         * @param {OrgValueAddedServiceMade2flowScheduleMeetingPostRequest} [orgValueAddedServiceMade2flowScheduleMeetingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgValueAddedServiceMade2flowScheduleMeetingPost(orgValueAddedServiceMade2flowScheduleMeetingPostRequest?: OrgValueAddedServiceMade2flowScheduleMeetingPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgValueAddedServiceMade2flowScheduleMeetingPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgValueAddedServiceMade2flowScheduleMeetingPost(orgValueAddedServiceMade2flowScheduleMeetingPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgValueAddedServiceApi - factory interface
 * @export
 */
export const OrgValueAddedServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgValueAddedServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary 加值服務 Made2 Flow 預約Meeting
         * @param {OrgValueAddedServiceMade2flowScheduleMeetingPostRequest} [orgValueAddedServiceMade2flowScheduleMeetingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgValueAddedServiceMade2flowScheduleMeetingPost(orgValueAddedServiceMade2flowScheduleMeetingPostRequest?: OrgValueAddedServiceMade2flowScheduleMeetingPostRequest, options?: any): AxiosPromise<OrgValueAddedServiceMade2flowScheduleMeetingPost200Response> {
            return localVarFp.orgValueAddedServiceMade2flowScheduleMeetingPost(orgValueAddedServiceMade2flowScheduleMeetingPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrgValueAddedServiceApi - object-oriented interface
 * @export
 * @class OrgValueAddedServiceApi
 * @extends {BaseAPI}
 */
export class OrgValueAddedServiceApi extends BaseAPI {
    /**
     * 
     * @summary 加值服務 Made2 Flow 預約Meeting
     * @param {OrgValueAddedServiceMade2flowScheduleMeetingPostRequest} [orgValueAddedServiceMade2flowScheduleMeetingPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgValueAddedServiceApi
     */
    public orgValueAddedServiceMade2flowScheduleMeetingPost(orgValueAddedServiceMade2flowScheduleMeetingPostRequest?: OrgValueAddedServiceMade2flowScheduleMeetingPostRequest, options?: AxiosRequestConfig) {
        return OrgValueAddedServiceApiFp(this.configuration).orgValueAddedServiceMade2flowScheduleMeetingPost(orgValueAddedServiceMade2flowScheduleMeetingPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrgWorkspaceApi - axios parameter creator
 * @export
 */
export const OrgWorkspaceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 新增 Collection - 產生S3檔案上傳url
         * @param {OrgWorkspaceCollectionCreateGetUploadUrlPostRequest} [orgWorkspaceCollectionCreateGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceCollectionCreateGetUploadUrlPost: async (orgWorkspaceCollectionCreateGetUploadUrlPostRequest?: OrgWorkspaceCollectionCreateGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/collection/create/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceCollectionCreateGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增 Collection
         * @param {OrgWorkspaceCollectionCreatePostRequest} [orgWorkspaceCollectionCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceCollectionCreatePost: async (orgWorkspaceCollectionCreatePostRequest?: OrgWorkspaceCollectionCreatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/collection/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceCollectionCreatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移除 Collection 的 Trend Board
         * @param {OrgWorkspaceCollectionRemoveTrendBoardPostRequest} [orgWorkspaceCollectionRemoveTrendBoardPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceCollectionRemoveTrendBoardPost: async (orgWorkspaceCollectionRemoveTrendBoardPostRequest?: OrgWorkspaceCollectionRemoveTrendBoardPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/collection/remove-trend-board`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceCollectionRemoveTrendBoardPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯 Collection - 產生S3檔案上傳url
         * @param {OrgWorkspaceCollectionCreateGetUploadUrlPostRequest} [orgWorkspaceCollectionCreateGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceCollectionUpdateGetUploadUrlPost: async (orgWorkspaceCollectionCreateGetUploadUrlPostRequest?: OrgWorkspaceCollectionCreateGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/collection/update/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceCollectionCreateGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 編輯 Collection
         * @param {OrgWorkspaceCollectionUpdatePostRequest} [orgWorkspaceCollectionUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceCollectionUpdatePost: async (orgWorkspaceCollectionUpdatePostRequest?: OrgWorkspaceCollectionUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/collection/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceCollectionUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得布料清單
         * @param {OrgWorkspaceGetForModalPostRequest} [orgWorkspaceGetForModalPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceGetForModalPost: async (orgWorkspaceGetForModalPostRequest?: OrgWorkspaceGetForModalPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/get-for-modal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceGetForModalPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Org Workspace 布片詳細資料
         * @param {OrgWorkspaceGetMaterialPostRequest} [orgWorkspaceGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceGetMaterialPost: async (orgWorkspaceGetMaterialPostRequest?: OrgWorkspaceGetMaterialPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/get-material`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceGetMaterialPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得Workspace資料夾及布片清單
         * @param {OrgWorkspaceGetPostRequest} [orgWorkspaceGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceGetPost: async (orgWorkspaceGetPostRequest?: OrgWorkspaceGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 刪除 workspace node (material or collection)
         * @param {OrgWorkspaceNodeDeletePostRequest} [orgWorkspaceNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeDeletePost: async (orgWorkspaceNodeDeletePostRequest?: OrgWorkspaceNodeDeletePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/node/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceNodeDeletePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary duplicate workspace node (material or collection)
         * @param {OrgWorkspaceNodeDuplicatePostRequest} [orgWorkspaceNodeDuplicatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeDuplicatePost: async (orgWorkspaceNodeDuplicatePostRequest?: OrgWorkspaceNodeDuplicatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/node/duplicate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceNodeDuplicatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 搬移 workspace node (material or collection)
         * @param {OrgWorkspaceNodeMovePostRequest} [orgWorkspaceNodeMovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeMovePost: async (orgWorkspaceNodeMovePostRequest?: OrgWorkspaceNodeMovePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/node/move`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceNodeMovePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary publish workspace node (material or collection)
         * @param {OrgWorkspaceNodePublishPostRequest} [orgWorkspaceNodePublishPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodePublishPost: async (orgWorkspaceNodePublishPostRequest?: OrgWorkspaceNodePublishPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/node/publish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceNodePublishPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {OrgWorkspaceNodeShareAssignedGetTargetPostRequest} [orgWorkspaceNodeShareAssignedGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareAssignedGetTargetPost: async (orgWorkspaceNodeShareAssignedGetTargetPostRequest?: OrgWorkspaceNodeShareAssignedGetTargetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/node/share/assigned/get-target`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceNodeShareAssignedGetTargetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary share workspace node (material or collection)
         * @param {OrgWorkspaceNodeShareAssignedPostRequest} [orgWorkspaceNodeShareAssignedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareAssignedPost: async (orgWorkspaceNodeShareAssignedPostRequest?: OrgWorkspaceNodeShareAssignedPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/node/share/assigned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceNodeShareAssignedPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 移除 share 對象
         * @param {OrgWorkspaceNodeShareAssignedRemovePostRequest} [orgWorkspaceNodeShareAssignedRemovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareAssignedRemovePost: async (orgWorkspaceNodeShareAssignedRemovePostRequest?: OrgWorkspaceNodeShareAssignedRemovePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/node/share/assigned/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceNodeShareAssignedRemovePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 變更 share 權限
         * @param {OrgWorkspaceNodeShareAssignedUpdatePostRequest} [orgWorkspaceNodeShareAssignedUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareAssignedUpdatePost: async (orgWorkspaceNodeShareAssignedUpdatePostRequest?: OrgWorkspaceNodeShareAssignedUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/node/share/assigned/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceNodeShareAssignedUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 產生 copy link
         * @param {OrgWorkspaceNodeShareGetPostRequest} [orgWorkspaceNodeShareGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareCopyLinkGeneratePost: async (orgWorkspaceNodeShareGetPostRequest?: OrgWorkspaceNodeShareGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/node/share/copy-link/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceNodeShareGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 開關 copy link
         * @param {OrgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest} [orgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareCopyLinkUpdateSettingPost: async (orgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest?: OrgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/node/share/copy-link/update-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 設定 embed code 是否可以下載 U3M
         * @param {OrgWorkspaceNodeShareEmbedUpdateSettingPostRequest} [orgWorkspaceNodeShareEmbedUpdateSettingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareEmbedUpdateSettingPost: async (orgWorkspaceNodeShareEmbedUpdateSettingPostRequest?: OrgWorkspaceNodeShareEmbedUpdateSettingPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/node/share/embed/update-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceNodeShareEmbedUpdateSettingPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 workspace node 的 share 資訊
         * @param {OrgWorkspaceNodeShareGetPostRequest} [orgWorkspaceNodeShareGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareGetPost: async (orgWorkspaceNodeShareGetPostRequest?: OrgWorkspaceNodeShareGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/node/share/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceNodeShareGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 產生 social media key
         * @param {OrgWorkspaceNodeShareSocialGeneratePostRequest} [orgWorkspaceNodeShareSocialGeneratePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareSocialGeneratePost: async (orgWorkspaceNodeShareSocialGeneratePostRequest?: OrgWorkspaceNodeShareSocialGeneratePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org/workspace/node/share/social/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orgWorkspaceNodeShareSocialGeneratePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgWorkspaceApi - functional programming interface
 * @export
 */
export const OrgWorkspaceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgWorkspaceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 新增 Collection - 產生S3檔案上傳url
         * @param {OrgWorkspaceCollectionCreateGetUploadUrlPostRequest} [orgWorkspaceCollectionCreateGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceCollectionCreateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest?: OrgWorkspaceCollectionCreateGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgWorkspaceCollectionCreateGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceCollectionCreateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 新增 Collection
         * @param {OrgWorkspaceCollectionCreatePostRequest} [orgWorkspaceCollectionCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceCollectionCreatePost(orgWorkspaceCollectionCreatePostRequest?: OrgWorkspaceCollectionCreatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceCollectionCreatePost(orgWorkspaceCollectionCreatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 移除 Collection 的 Trend Board
         * @param {OrgWorkspaceCollectionRemoveTrendBoardPostRequest} [orgWorkspaceCollectionRemoveTrendBoardPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceCollectionRemoveTrendBoardPost(orgWorkspaceCollectionRemoveTrendBoardPostRequest?: OrgWorkspaceCollectionRemoveTrendBoardPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceCollectionRemoveTrendBoardPost(orgWorkspaceCollectionRemoveTrendBoardPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯 Collection - 產生S3檔案上傳url
         * @param {OrgWorkspaceCollectionCreateGetUploadUrlPostRequest} [orgWorkspaceCollectionCreateGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceCollectionUpdateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest?: OrgWorkspaceCollectionCreateGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgWorkspaceCollectionCreateGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceCollectionUpdateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 編輯 Collection
         * @param {OrgWorkspaceCollectionUpdatePostRequest} [orgWorkspaceCollectionUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceCollectionUpdatePost(orgWorkspaceCollectionUpdatePostRequest?: OrgWorkspaceCollectionUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceCollectionUpdatePost(orgWorkspaceCollectionUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得布料清單
         * @param {OrgWorkspaceGetForModalPostRequest} [orgWorkspaceGetForModalPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceGetForModalPost(orgWorkspaceGetForModalPostRequest?: OrgWorkspaceGetForModalPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgWorkspaceGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceGetForModalPost(orgWorkspaceGetForModalPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Org Workspace 布片詳細資料
         * @param {OrgWorkspaceGetMaterialPostRequest} [orgWorkspaceGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceGetMaterialPost(orgWorkspaceGetMaterialPostRequest?: OrgWorkspaceGetMaterialPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgWorkspaceGetMaterialPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceGetMaterialPost(orgWorkspaceGetMaterialPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得Workspace資料夾及布片清單
         * @param {OrgWorkspaceGetPostRequest} [orgWorkspaceGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceGetPost(orgWorkspaceGetPostRequest?: OrgWorkspaceGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgWorkspaceGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceGetPost(orgWorkspaceGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 刪除 workspace node (material or collection)
         * @param {OrgWorkspaceNodeDeletePostRequest} [orgWorkspaceNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceNodeDeletePost(orgWorkspaceNodeDeletePostRequest?: OrgWorkspaceNodeDeletePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceNodeDeletePost(orgWorkspaceNodeDeletePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary duplicate workspace node (material or collection)
         * @param {OrgWorkspaceNodeDuplicatePostRequest} [orgWorkspaceNodeDuplicatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceNodeDuplicatePost(orgWorkspaceNodeDuplicatePostRequest?: OrgWorkspaceNodeDuplicatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceNodeDuplicatePost(orgWorkspaceNodeDuplicatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 搬移 workspace node (material or collection)
         * @param {OrgWorkspaceNodeMovePostRequest} [orgWorkspaceNodeMovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceNodeMovePost(orgWorkspaceNodeMovePostRequest?: OrgWorkspaceNodeMovePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceNodeMovePost(orgWorkspaceNodeMovePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary publish workspace node (material or collection)
         * @param {OrgWorkspaceNodePublishPostRequest} [orgWorkspaceNodePublishPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceNodePublishPost(orgWorkspaceNodePublishPostRequest?: OrgWorkspaceNodePublishPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceNodePublishPost(orgWorkspaceNodePublishPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {OrgWorkspaceNodeShareAssignedGetTargetPostRequest} [orgWorkspaceNodeShareAssignedGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceNodeShareAssignedGetTargetPost(orgWorkspaceNodeShareAssignedGetTargetPostRequest?: OrgWorkspaceNodeShareAssignedGetTargetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicShareAssignedGetTargetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceNodeShareAssignedGetTargetPost(orgWorkspaceNodeShareAssignedGetTargetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary share workspace node (material or collection)
         * @param {OrgWorkspaceNodeShareAssignedPostRequest} [orgWorkspaceNodeShareAssignedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceNodeShareAssignedPost(orgWorkspaceNodeShareAssignedPostRequest?: OrgWorkspaceNodeShareAssignedPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgWorkspaceNodeShareAssignedPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceNodeShareAssignedPost(orgWorkspaceNodeShareAssignedPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 移除 share 對象
         * @param {OrgWorkspaceNodeShareAssignedRemovePostRequest} [orgWorkspaceNodeShareAssignedRemovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceNodeShareAssignedRemovePost(orgWorkspaceNodeShareAssignedRemovePostRequest?: OrgWorkspaceNodeShareAssignedRemovePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceNodeShareAssignedRemovePost(orgWorkspaceNodeShareAssignedRemovePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 變更 share 權限
         * @param {OrgWorkspaceNodeShareAssignedUpdatePostRequest} [orgWorkspaceNodeShareAssignedUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceNodeShareAssignedUpdatePost(orgWorkspaceNodeShareAssignedUpdatePostRequest?: OrgWorkspaceNodeShareAssignedUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceNodeShareAssignedUpdatePost(orgWorkspaceNodeShareAssignedUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 產生 copy link
         * @param {OrgWorkspaceNodeShareGetPostRequest} [orgWorkspaceNodeShareGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceNodeShareCopyLinkGeneratePost(orgWorkspaceNodeShareGetPostRequest?: OrgWorkspaceNodeShareGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicShareCopyLinkGeneratePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceNodeShareCopyLinkGeneratePost(orgWorkspaceNodeShareGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 開關 copy link
         * @param {OrgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest} [orgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceNodeShareCopyLinkUpdateSettingPost(orgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest?: OrgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceNodeShareCopyLinkUpdateSettingPost(orgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 設定 embed code 是否可以下載 U3M
         * @param {OrgWorkspaceNodeShareEmbedUpdateSettingPostRequest} [orgWorkspaceNodeShareEmbedUpdateSettingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceNodeShareEmbedUpdateSettingPost(orgWorkspaceNodeShareEmbedUpdateSettingPostRequest?: OrgWorkspaceNodeShareEmbedUpdateSettingPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceNodeShareEmbedUpdateSettingPost(orgWorkspaceNodeShareEmbedUpdateSettingPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 workspace node 的 share 資訊
         * @param {OrgWorkspaceNodeShareGetPostRequest} [orgWorkspaceNodeShareGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceNodeShareGetPost(orgWorkspaceNodeShareGetPostRequest?: OrgWorkspaceNodeShareGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgWorkspaceNodeShareGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceNodeShareGetPost(orgWorkspaceNodeShareGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 產生 social media key
         * @param {OrgWorkspaceNodeShareSocialGeneratePostRequest} [orgWorkspaceNodeShareSocialGeneratePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgWorkspaceNodeShareSocialGeneratePost(orgWorkspaceNodeShareSocialGeneratePostRequest?: OrgWorkspaceNodeShareSocialGeneratePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicShareCopyLinkGeneratePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgWorkspaceNodeShareSocialGeneratePost(orgWorkspaceNodeShareSocialGeneratePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgWorkspaceApi - factory interface
 * @export
 */
export const OrgWorkspaceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgWorkspaceApiFp(configuration)
    return {
        /**
         * 
         * @summary 新增 Collection - 產生S3檔案上傳url
         * @param {OrgWorkspaceCollectionCreateGetUploadUrlPostRequest} [orgWorkspaceCollectionCreateGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceCollectionCreateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest?: OrgWorkspaceCollectionCreateGetUploadUrlPostRequest, options?: any): AxiosPromise<OrgWorkspaceCollectionCreateGetUploadUrlPost200Response> {
            return localVarFp.orgWorkspaceCollectionCreateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 新增 Collection
         * @param {OrgWorkspaceCollectionCreatePostRequest} [orgWorkspaceCollectionCreatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceCollectionCreatePost(orgWorkspaceCollectionCreatePostRequest?: OrgWorkspaceCollectionCreatePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgWorkspaceCollectionCreatePost(orgWorkspaceCollectionCreatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 移除 Collection 的 Trend Board
         * @param {OrgWorkspaceCollectionRemoveTrendBoardPostRequest} [orgWorkspaceCollectionRemoveTrendBoardPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceCollectionRemoveTrendBoardPost(orgWorkspaceCollectionRemoveTrendBoardPostRequest?: OrgWorkspaceCollectionRemoveTrendBoardPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgWorkspaceCollectionRemoveTrendBoardPost(orgWorkspaceCollectionRemoveTrendBoardPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯 Collection - 產生S3檔案上傳url
         * @param {OrgWorkspaceCollectionCreateGetUploadUrlPostRequest} [orgWorkspaceCollectionCreateGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceCollectionUpdateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest?: OrgWorkspaceCollectionCreateGetUploadUrlPostRequest, options?: any): AxiosPromise<OrgWorkspaceCollectionCreateGetUploadUrlPost200Response> {
            return localVarFp.orgWorkspaceCollectionUpdateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 編輯 Collection
         * @param {OrgWorkspaceCollectionUpdatePostRequest} [orgWorkspaceCollectionUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceCollectionUpdatePost(orgWorkspaceCollectionUpdatePostRequest?: OrgWorkspaceCollectionUpdatePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgWorkspaceCollectionUpdatePost(orgWorkspaceCollectionUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得布料清單
         * @param {OrgWorkspaceGetForModalPostRequest} [orgWorkspaceGetForModalPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceGetForModalPost(orgWorkspaceGetForModalPostRequest?: OrgWorkspaceGetForModalPostRequest, options?: any): AxiosPromise<OrgWorkspaceGetPost200Response> {
            return localVarFp.orgWorkspaceGetForModalPost(orgWorkspaceGetForModalPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Org Workspace 布片詳細資料
         * @param {OrgWorkspaceGetMaterialPostRequest} [orgWorkspaceGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceGetMaterialPost(orgWorkspaceGetMaterialPostRequest?: OrgWorkspaceGetMaterialPostRequest, options?: any): AxiosPromise<OrgWorkspaceGetMaterialPost200Response> {
            return localVarFp.orgWorkspaceGetMaterialPost(orgWorkspaceGetMaterialPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得Workspace資料夾及布片清單
         * @param {OrgWorkspaceGetPostRequest} [orgWorkspaceGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceGetPost(orgWorkspaceGetPostRequest?: OrgWorkspaceGetPostRequest, options?: any): AxiosPromise<OrgWorkspaceGetPost200Response> {
            return localVarFp.orgWorkspaceGetPost(orgWorkspaceGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 刪除 workspace node (material or collection)
         * @param {OrgWorkspaceNodeDeletePostRequest} [orgWorkspaceNodeDeletePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeDeletePost(orgWorkspaceNodeDeletePostRequest?: OrgWorkspaceNodeDeletePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgWorkspaceNodeDeletePost(orgWorkspaceNodeDeletePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary duplicate workspace node (material or collection)
         * @param {OrgWorkspaceNodeDuplicatePostRequest} [orgWorkspaceNodeDuplicatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeDuplicatePost(orgWorkspaceNodeDuplicatePostRequest?: OrgWorkspaceNodeDuplicatePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgWorkspaceNodeDuplicatePost(orgWorkspaceNodeDuplicatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 搬移 workspace node (material or collection)
         * @param {OrgWorkspaceNodeMovePostRequest} [orgWorkspaceNodeMovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeMovePost(orgWorkspaceNodeMovePostRequest?: OrgWorkspaceNodeMovePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgWorkspaceNodeMovePost(orgWorkspaceNodeMovePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary publish workspace node (material or collection)
         * @param {OrgWorkspaceNodePublishPostRequest} [orgWorkspaceNodePublishPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodePublishPost(orgWorkspaceNodePublishPostRequest?: OrgWorkspaceNodePublishPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgWorkspaceNodePublishPost(orgWorkspaceNodePublishPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {OrgWorkspaceNodeShareAssignedGetTargetPostRequest} [orgWorkspaceNodeShareAssignedGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareAssignedGetTargetPost(orgWorkspaceNodeShareAssignedGetTargetPostRequest?: OrgWorkspaceNodeShareAssignedGetTargetPostRequest, options?: any): AxiosPromise<PublicShareAssignedGetTargetPost200Response> {
            return localVarFp.orgWorkspaceNodeShareAssignedGetTargetPost(orgWorkspaceNodeShareAssignedGetTargetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary share workspace node (material or collection)
         * @param {OrgWorkspaceNodeShareAssignedPostRequest} [orgWorkspaceNodeShareAssignedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareAssignedPost(orgWorkspaceNodeShareAssignedPostRequest?: OrgWorkspaceNodeShareAssignedPostRequest, options?: any): AxiosPromise<OrgWorkspaceNodeShareAssignedPost200Response> {
            return localVarFp.orgWorkspaceNodeShareAssignedPost(orgWorkspaceNodeShareAssignedPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 移除 share 對象
         * @param {OrgWorkspaceNodeShareAssignedRemovePostRequest} [orgWorkspaceNodeShareAssignedRemovePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareAssignedRemovePost(orgWorkspaceNodeShareAssignedRemovePostRequest?: OrgWorkspaceNodeShareAssignedRemovePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgWorkspaceNodeShareAssignedRemovePost(orgWorkspaceNodeShareAssignedRemovePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 變更 share 權限
         * @param {OrgWorkspaceNodeShareAssignedUpdatePostRequest} [orgWorkspaceNodeShareAssignedUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareAssignedUpdatePost(orgWorkspaceNodeShareAssignedUpdatePostRequest?: OrgWorkspaceNodeShareAssignedUpdatePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgWorkspaceNodeShareAssignedUpdatePost(orgWorkspaceNodeShareAssignedUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 產生 copy link
         * @param {OrgWorkspaceNodeShareGetPostRequest} [orgWorkspaceNodeShareGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareCopyLinkGeneratePost(orgWorkspaceNodeShareGetPostRequest?: OrgWorkspaceNodeShareGetPostRequest, options?: any): AxiosPromise<PublicShareCopyLinkGeneratePost200Response> {
            return localVarFp.orgWorkspaceNodeShareCopyLinkGeneratePost(orgWorkspaceNodeShareGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 開關 copy link
         * @param {OrgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest} [orgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareCopyLinkUpdateSettingPost(orgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest?: OrgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgWorkspaceNodeShareCopyLinkUpdateSettingPost(orgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 設定 embed code 是否可以下載 U3M
         * @param {OrgWorkspaceNodeShareEmbedUpdateSettingPostRequest} [orgWorkspaceNodeShareEmbedUpdateSettingPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareEmbedUpdateSettingPost(orgWorkspaceNodeShareEmbedUpdateSettingPostRequest?: OrgWorkspaceNodeShareEmbedUpdateSettingPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.orgWorkspaceNodeShareEmbedUpdateSettingPost(orgWorkspaceNodeShareEmbedUpdateSettingPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 workspace node 的 share 資訊
         * @param {OrgWorkspaceNodeShareGetPostRequest} [orgWorkspaceNodeShareGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareGetPost(orgWorkspaceNodeShareGetPostRequest?: OrgWorkspaceNodeShareGetPostRequest, options?: any): AxiosPromise<OrgWorkspaceNodeShareGetPost200Response> {
            return localVarFp.orgWorkspaceNodeShareGetPost(orgWorkspaceNodeShareGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 產生 social media key
         * @param {OrgWorkspaceNodeShareSocialGeneratePostRequest} [orgWorkspaceNodeShareSocialGeneratePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgWorkspaceNodeShareSocialGeneratePost(orgWorkspaceNodeShareSocialGeneratePostRequest?: OrgWorkspaceNodeShareSocialGeneratePostRequest, options?: any): AxiosPromise<PublicShareCopyLinkGeneratePost200Response> {
            return localVarFp.orgWorkspaceNodeShareSocialGeneratePost(orgWorkspaceNodeShareSocialGeneratePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrgWorkspaceApi - object-oriented interface
 * @export
 * @class OrgWorkspaceApi
 * @extends {BaseAPI}
 */
export class OrgWorkspaceApi extends BaseAPI {
    /**
     * 
     * @summary 新增 Collection - 產生S3檔案上傳url
     * @param {OrgWorkspaceCollectionCreateGetUploadUrlPostRequest} [orgWorkspaceCollectionCreateGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceCollectionCreateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest?: OrgWorkspaceCollectionCreateGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceCollectionCreateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 新增 Collection
     * @param {OrgWorkspaceCollectionCreatePostRequest} [orgWorkspaceCollectionCreatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceCollectionCreatePost(orgWorkspaceCollectionCreatePostRequest?: OrgWorkspaceCollectionCreatePostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceCollectionCreatePost(orgWorkspaceCollectionCreatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 移除 Collection 的 Trend Board
     * @param {OrgWorkspaceCollectionRemoveTrendBoardPostRequest} [orgWorkspaceCollectionRemoveTrendBoardPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceCollectionRemoveTrendBoardPost(orgWorkspaceCollectionRemoveTrendBoardPostRequest?: OrgWorkspaceCollectionRemoveTrendBoardPostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceCollectionRemoveTrendBoardPost(orgWorkspaceCollectionRemoveTrendBoardPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯 Collection - 產生S3檔案上傳url
     * @param {OrgWorkspaceCollectionCreateGetUploadUrlPostRequest} [orgWorkspaceCollectionCreateGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceCollectionUpdateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest?: OrgWorkspaceCollectionCreateGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceCollectionUpdateGetUploadUrlPost(orgWorkspaceCollectionCreateGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 編輯 Collection
     * @param {OrgWorkspaceCollectionUpdatePostRequest} [orgWorkspaceCollectionUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceCollectionUpdatePost(orgWorkspaceCollectionUpdatePostRequest?: OrgWorkspaceCollectionUpdatePostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceCollectionUpdatePost(orgWorkspaceCollectionUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得布料清單
     * @param {OrgWorkspaceGetForModalPostRequest} [orgWorkspaceGetForModalPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceGetForModalPost(orgWorkspaceGetForModalPostRequest?: OrgWorkspaceGetForModalPostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceGetForModalPost(orgWorkspaceGetForModalPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Org Workspace 布片詳細資料
     * @param {OrgWorkspaceGetMaterialPostRequest} [orgWorkspaceGetMaterialPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceGetMaterialPost(orgWorkspaceGetMaterialPostRequest?: OrgWorkspaceGetMaterialPostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceGetMaterialPost(orgWorkspaceGetMaterialPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得Workspace資料夾及布片清單
     * @param {OrgWorkspaceGetPostRequest} [orgWorkspaceGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceGetPost(orgWorkspaceGetPostRequest?: OrgWorkspaceGetPostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceGetPost(orgWorkspaceGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 刪除 workspace node (material or collection)
     * @param {OrgWorkspaceNodeDeletePostRequest} [orgWorkspaceNodeDeletePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceNodeDeletePost(orgWorkspaceNodeDeletePostRequest?: OrgWorkspaceNodeDeletePostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceNodeDeletePost(orgWorkspaceNodeDeletePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary duplicate workspace node (material or collection)
     * @param {OrgWorkspaceNodeDuplicatePostRequest} [orgWorkspaceNodeDuplicatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceNodeDuplicatePost(orgWorkspaceNodeDuplicatePostRequest?: OrgWorkspaceNodeDuplicatePostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceNodeDuplicatePost(orgWorkspaceNodeDuplicatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 搬移 workspace node (material or collection)
     * @param {OrgWorkspaceNodeMovePostRequest} [orgWorkspaceNodeMovePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceNodeMovePost(orgWorkspaceNodeMovePostRequest?: OrgWorkspaceNodeMovePostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceNodeMovePost(orgWorkspaceNodeMovePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary publish workspace node (material or collection)
     * @param {OrgWorkspaceNodePublishPostRequest} [orgWorkspaceNodePublishPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceNodePublishPost(orgWorkspaceNodePublishPostRequest?: OrgWorkspaceNodePublishPostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceNodePublishPost(orgWorkspaceNodePublishPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {OrgWorkspaceNodeShareAssignedGetTargetPostRequest} [orgWorkspaceNodeShareAssignedGetTargetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceNodeShareAssignedGetTargetPost(orgWorkspaceNodeShareAssignedGetTargetPostRequest?: OrgWorkspaceNodeShareAssignedGetTargetPostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceNodeShareAssignedGetTargetPost(orgWorkspaceNodeShareAssignedGetTargetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary share workspace node (material or collection)
     * @param {OrgWorkspaceNodeShareAssignedPostRequest} [orgWorkspaceNodeShareAssignedPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceNodeShareAssignedPost(orgWorkspaceNodeShareAssignedPostRequest?: OrgWorkspaceNodeShareAssignedPostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceNodeShareAssignedPost(orgWorkspaceNodeShareAssignedPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 移除 share 對象
     * @param {OrgWorkspaceNodeShareAssignedRemovePostRequest} [orgWorkspaceNodeShareAssignedRemovePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceNodeShareAssignedRemovePost(orgWorkspaceNodeShareAssignedRemovePostRequest?: OrgWorkspaceNodeShareAssignedRemovePostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceNodeShareAssignedRemovePost(orgWorkspaceNodeShareAssignedRemovePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 變更 share 權限
     * @param {OrgWorkspaceNodeShareAssignedUpdatePostRequest} [orgWorkspaceNodeShareAssignedUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceNodeShareAssignedUpdatePost(orgWorkspaceNodeShareAssignedUpdatePostRequest?: OrgWorkspaceNodeShareAssignedUpdatePostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceNodeShareAssignedUpdatePost(orgWorkspaceNodeShareAssignedUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 產生 copy link
     * @param {OrgWorkspaceNodeShareGetPostRequest} [orgWorkspaceNodeShareGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceNodeShareCopyLinkGeneratePost(orgWorkspaceNodeShareGetPostRequest?: OrgWorkspaceNodeShareGetPostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceNodeShareCopyLinkGeneratePost(orgWorkspaceNodeShareGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 開關 copy link
     * @param {OrgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest} [orgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceNodeShareCopyLinkUpdateSettingPost(orgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest?: OrgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceNodeShareCopyLinkUpdateSettingPost(orgWorkspaceNodeShareCopyLinkUpdateSettingPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 設定 embed code 是否可以下載 U3M
     * @param {OrgWorkspaceNodeShareEmbedUpdateSettingPostRequest} [orgWorkspaceNodeShareEmbedUpdateSettingPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceNodeShareEmbedUpdateSettingPost(orgWorkspaceNodeShareEmbedUpdateSettingPostRequest?: OrgWorkspaceNodeShareEmbedUpdateSettingPostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceNodeShareEmbedUpdateSettingPost(orgWorkspaceNodeShareEmbedUpdateSettingPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 workspace node 的 share 資訊
     * @param {OrgWorkspaceNodeShareGetPostRequest} [orgWorkspaceNodeShareGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceNodeShareGetPost(orgWorkspaceNodeShareGetPostRequest?: OrgWorkspaceNodeShareGetPostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceNodeShareGetPost(orgWorkspaceNodeShareGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 產生 social media key
     * @param {OrgWorkspaceNodeShareSocialGeneratePostRequest} [orgWorkspaceNodeShareSocialGeneratePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgWorkspaceApi
     */
    public orgWorkspaceNodeShareSocialGeneratePost(orgWorkspaceNodeShareSocialGeneratePostRequest?: OrgWorkspaceNodeShareSocialGeneratePostRequest, options?: AxiosRequestConfig) {
        return OrgWorkspaceApiFp(this.configuration).orgWorkspaceNodeShareSocialGeneratePost(orgWorkspaceNodeShareSocialGeneratePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PollingApi - axios parameter creator
 * @export
 */
export const PollingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取得 Sticker 的已存在 Tag List
         * @param {PollingDigitalThreadStickerTagListGetPostRequest} [pollingDigitalThreadStickerTagListGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pollingDigitalThreadStickerTagListGetPost: async (pollingDigitalThreadStickerTagListGetPostRequest?: PollingDigitalThreadStickerTagListGetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/polling/digital-thread/sticker/tag-list/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pollingDigitalThreadStickerTagListGetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Sidebar 資訊
         * @param {PollingSidebarPostRequest} [pollingSidebarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pollingSidebarPost: async (pollingSidebarPostRequest?: PollingSidebarPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/polling/sidebar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pollingSidebarPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PollingApi - functional programming interface
 * @export
 */
export const PollingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PollingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 取得 Sticker 的已存在 Tag List
         * @param {PollingDigitalThreadStickerTagListGetPostRequest} [pollingDigitalThreadStickerTagListGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pollingDigitalThreadStickerTagListGetPost(pollingDigitalThreadStickerTagListGetPostRequest?: PollingDigitalThreadStickerTagListGetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PollingDigitalThreadStickerTagListGetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pollingDigitalThreadStickerTagListGetPost(pollingDigitalThreadStickerTagListGetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Sidebar 資訊
         * @param {PollingSidebarPostRequest} [pollingSidebarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pollingSidebarPost(pollingSidebarPostRequest?: PollingSidebarPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PollingSidebarPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pollingSidebarPost(pollingSidebarPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PollingApi - factory interface
 * @export
 */
export const PollingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PollingApiFp(configuration)
    return {
        /**
         * 
         * @summary 取得 Sticker 的已存在 Tag List
         * @param {PollingDigitalThreadStickerTagListGetPostRequest} [pollingDigitalThreadStickerTagListGetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pollingDigitalThreadStickerTagListGetPost(pollingDigitalThreadStickerTagListGetPostRequest?: PollingDigitalThreadStickerTagListGetPostRequest, options?: any): AxiosPromise<PollingDigitalThreadStickerTagListGetPost200Response> {
            return localVarFp.pollingDigitalThreadStickerTagListGetPost(pollingDigitalThreadStickerTagListGetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Sidebar 資訊
         * @param {PollingSidebarPostRequest} [pollingSidebarPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pollingSidebarPost(pollingSidebarPostRequest?: PollingSidebarPostRequest, options?: any): AxiosPromise<PollingSidebarPost200Response> {
            return localVarFp.pollingSidebarPost(pollingSidebarPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PollingApi - object-oriented interface
 * @export
 * @class PollingApi
 * @extends {BaseAPI}
 */
export class PollingApi extends BaseAPI {
    /**
     * 
     * @summary 取得 Sticker 的已存在 Tag List
     * @param {PollingDigitalThreadStickerTagListGetPostRequest} [pollingDigitalThreadStickerTagListGetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PollingApi
     */
    public pollingDigitalThreadStickerTagListGetPost(pollingDigitalThreadStickerTagListGetPostRequest?: PollingDigitalThreadStickerTagListGetPostRequest, options?: AxiosRequestConfig) {
        return PollingApiFp(this.configuration).pollingDigitalThreadStickerTagListGetPost(pollingDigitalThreadStickerTagListGetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Sidebar 資訊
     * @param {PollingSidebarPostRequest} [pollingSidebarPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PollingApi
     */
    public pollingSidebarPost(pollingSidebarPostRequest?: PollingSidebarPostRequest, options?: AxiosRequestConfig) {
        return PollingApiFp(this.configuration).pollingSidebarPost(pollingSidebarPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {PublicCloneCheckPostRequest} [publicCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicCloneCheckPost: async (publicCloneCheckPostRequest?: PublicCloneCheckPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/clone-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicCloneCheckPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Clone
         * @param {PublicClonePostRequest} [publicClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicClonePost: async (publicClonePostRequest?: PublicClonePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/clone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicClonePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Public 清單
         * @param {PublicGetListPostRequest} [publicGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicGetListPost: async (publicGetListPostRequest?: PublicGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Public 布片詳細資料
         * @param {PublicGetMaterialPostRequest} [publicGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicGetMaterialPost: async (publicGetMaterialPostRequest?: PublicGetMaterialPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/get-material`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicGetMaterialPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PublicShareAssignedGetTargetPostRequest} [publicShareAssignedGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicShareAssignedGetTargetPost: async (publicShareAssignedGetTargetPostRequest?: PublicShareAssignedGetTargetPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/share/assigned/get-target`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicShareAssignedGetTargetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary share workspace node (material or collection)
         * @param {PublicShareAssignedPostRequest} [publicShareAssignedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicShareAssignedPost: async (publicShareAssignedPostRequest?: PublicShareAssignedPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/share/assigned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicShareAssignedPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 產生 copy link
         * @param {PublicShareCopyLinkGeneratePostRequest} [publicShareCopyLinkGeneratePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicShareCopyLinkGeneratePost: async (publicShareCopyLinkGeneratePostRequest?: PublicShareCopyLinkGeneratePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/share/copy-link/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicShareCopyLinkGeneratePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 產生 social media key
         * @param {PublicShareSocialGeneratePostRequest} [publicShareSocialGeneratePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicShareSocialGeneratePost: async (publicShareSocialGeneratePostRequest?: PublicShareSocialGeneratePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/share/social/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicShareSocialGeneratePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {PublicCloneCheckPostRequest} [publicCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicCloneCheckPost(publicCloneCheckPostRequest?: PublicCloneCheckPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedCloneCheckPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicCloneCheckPost(publicCloneCheckPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Clone
         * @param {PublicClonePostRequest} [publicClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicClonePost(publicClonePostRequest?: PublicClonePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicClonePost(publicClonePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Public 清單
         * @param {PublicGetListPostRequest} [publicGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicGetListPost(publicGetListPostRequest?: PublicGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicGetListPost(publicGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Public 布片詳細資料
         * @param {PublicGetMaterialPostRequest} [publicGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicGetMaterialPost(publicGetMaterialPostRequest?: PublicGetMaterialPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicGetMaterialPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicGetMaterialPost(publicGetMaterialPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {PublicShareAssignedGetTargetPostRequest} [publicShareAssignedGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicShareAssignedGetTargetPost(publicShareAssignedGetTargetPostRequest?: PublicShareAssignedGetTargetPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicShareAssignedGetTargetPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicShareAssignedGetTargetPost(publicShareAssignedGetTargetPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary share workspace node (material or collection)
         * @param {PublicShareAssignedPostRequest} [publicShareAssignedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicShareAssignedPost(publicShareAssignedPostRequest?: PublicShareAssignedPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicShareAssignedPost(publicShareAssignedPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 產生 copy link
         * @param {PublicShareCopyLinkGeneratePostRequest} [publicShareCopyLinkGeneratePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicShareCopyLinkGeneratePost(publicShareCopyLinkGeneratePostRequest?: PublicShareCopyLinkGeneratePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicShareCopyLinkGeneratePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicShareCopyLinkGeneratePost(publicShareCopyLinkGeneratePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 產生 social media key
         * @param {PublicShareSocialGeneratePostRequest} [publicShareSocialGeneratePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicShareSocialGeneratePost(publicShareSocialGeneratePostRequest?: PublicShareSocialGeneratePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicShareCopyLinkGeneratePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicShareSocialGeneratePost(publicShareSocialGeneratePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicApiFp(configuration)
    return {
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {PublicCloneCheckPostRequest} [publicCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicCloneCheckPost(publicCloneCheckPostRequest?: PublicCloneCheckPostRequest, options?: any): AxiosPromise<ShareGetReceivedCloneCheckPost200Response> {
            return localVarFp.publicCloneCheckPost(publicCloneCheckPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Clone
         * @param {PublicClonePostRequest} [publicClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicClonePost(publicClonePostRequest?: PublicClonePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.publicClonePost(publicClonePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Public 清單
         * @param {PublicGetListPostRequest} [publicGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicGetListPost(publicGetListPostRequest?: PublicGetListPostRequest, options?: any): AxiosPromise<PublicGetListPost200Response> {
            return localVarFp.publicGetListPost(publicGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Public 布片詳細資料
         * @param {PublicGetMaterialPostRequest} [publicGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicGetMaterialPost(publicGetMaterialPostRequest?: PublicGetMaterialPostRequest, options?: any): AxiosPromise<PublicGetMaterialPost200Response> {
            return localVarFp.publicGetMaterialPost(publicGetMaterialPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PublicShareAssignedGetTargetPostRequest} [publicShareAssignedGetTargetPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicShareAssignedGetTargetPost(publicShareAssignedGetTargetPostRequest?: PublicShareAssignedGetTargetPostRequest, options?: any): AxiosPromise<PublicShareAssignedGetTargetPost200Response> {
            return localVarFp.publicShareAssignedGetTargetPost(publicShareAssignedGetTargetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary share workspace node (material or collection)
         * @param {PublicShareAssignedPostRequest} [publicShareAssignedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicShareAssignedPost(publicShareAssignedPostRequest?: PublicShareAssignedPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.publicShareAssignedPost(publicShareAssignedPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 產生 copy link
         * @param {PublicShareCopyLinkGeneratePostRequest} [publicShareCopyLinkGeneratePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicShareCopyLinkGeneratePost(publicShareCopyLinkGeneratePostRequest?: PublicShareCopyLinkGeneratePostRequest, options?: any): AxiosPromise<PublicShareCopyLinkGeneratePost200Response> {
            return localVarFp.publicShareCopyLinkGeneratePost(publicShareCopyLinkGeneratePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 產生 social media key
         * @param {PublicShareSocialGeneratePostRequest} [publicShareSocialGeneratePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicShareSocialGeneratePost(publicShareSocialGeneratePostRequest?: PublicShareSocialGeneratePostRequest, options?: any): AxiosPromise<PublicShareCopyLinkGeneratePost200Response> {
            return localVarFp.publicShareSocialGeneratePost(publicShareSocialGeneratePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI {
    /**
     * 
     * @summary 取得此次 Clone 產生 quota 數量
     * @param {PublicCloneCheckPostRequest} [publicCloneCheckPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicCloneCheckPost(publicCloneCheckPostRequest?: PublicCloneCheckPostRequest, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).publicCloneCheckPost(publicCloneCheckPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Clone
     * @param {PublicClonePostRequest} [publicClonePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicClonePost(publicClonePostRequest?: PublicClonePostRequest, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).publicClonePost(publicClonePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Public 清單
     * @param {PublicGetListPostRequest} [publicGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicGetListPost(publicGetListPostRequest?: PublicGetListPostRequest, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).publicGetListPost(publicGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Public 布片詳細資料
     * @param {PublicGetMaterialPostRequest} [publicGetMaterialPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicGetMaterialPost(publicGetMaterialPostRequest?: PublicGetMaterialPostRequest, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).publicGetMaterialPost(publicGetMaterialPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PublicShareAssignedGetTargetPostRequest} [publicShareAssignedGetTargetPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicShareAssignedGetTargetPost(publicShareAssignedGetTargetPostRequest?: PublicShareAssignedGetTargetPostRequest, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).publicShareAssignedGetTargetPost(publicShareAssignedGetTargetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary share workspace node (material or collection)
     * @param {PublicShareAssignedPostRequest} [publicShareAssignedPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicShareAssignedPost(publicShareAssignedPostRequest?: PublicShareAssignedPostRequest, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).publicShareAssignedPost(publicShareAssignedPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 產生 copy link
     * @param {PublicShareCopyLinkGeneratePostRequest} [publicShareCopyLinkGeneratePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicShareCopyLinkGeneratePost(publicShareCopyLinkGeneratePostRequest?: PublicShareCopyLinkGeneratePostRequest, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).publicShareCopyLinkGeneratePost(publicShareCopyLinkGeneratePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 產生 social media key
     * @param {PublicShareSocialGeneratePostRequest} [publicShareSocialGeneratePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public publicShareSocialGeneratePost(publicShareSocialGeneratePostRequest?: PublicShareSocialGeneratePostRequest, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).publicShareSocialGeneratePost(publicShareSocialGeneratePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SampleApi - axios parameter creator
 * @export
 */
export const SampleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **Access roles:** To be clear define
         * @summary Sample summary.
         * @param {SamplePostRequest} [samplePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        samplePost: async (samplePostRequest?: SamplePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sample`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(samplePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SampleApi - functional programming interface
 * @export
 */
export const SampleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SampleApiAxiosParamCreator(configuration)
    return {
        /**
         * **Access roles:** To be clear define
         * @summary Sample summary.
         * @param {SamplePostRequest} [samplePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async samplePost(samplePostRequest?: SamplePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SamplePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.samplePost(samplePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SampleApi - factory interface
 * @export
 */
export const SampleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SampleApiFp(configuration)
    return {
        /**
         * **Access roles:** To be clear define
         * @summary Sample summary.
         * @param {SamplePostRequest} [samplePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        samplePost(samplePostRequest?: SamplePostRequest, options?: any): AxiosPromise<SamplePost200Response> {
            return localVarFp.samplePost(samplePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SampleApi - object-oriented interface
 * @export
 * @class SampleApi
 * @extends {BaseAPI}
 */
export class SampleApi extends BaseAPI {
    /**
     * **Access roles:** To be clear define
     * @summary Sample summary.
     * @param {SamplePostRequest} [samplePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public samplePost(samplePostRequest?: SamplePostRequest, options?: AxiosRequestConfig) {
        return SampleApiFp(this.configuration).samplePost(samplePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取得布料相關 tag
         * @param {SearchGetAiTagsPostRequest} [searchGetAiTagsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGetAiTagsPost: async (searchGetAiTagsPostRequest?: SearchGetAiTagsPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/search/get-ai-tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchGetAiTagsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 取得布料相關 tag
         * @param {SearchGetAiTagsPostRequest} [searchGetAiTagsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchGetAiTagsPost(searchGetAiTagsPostRequest?: SearchGetAiTagsPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchGetAiTagsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchGetAiTagsPost(searchGetAiTagsPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * 
         * @summary 取得布料相關 tag
         * @param {SearchGetAiTagsPostRequest} [searchGetAiTagsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGetAiTagsPost(searchGetAiTagsPostRequest?: SearchGetAiTagsPostRequest, options?: any): AxiosPromise<SearchGetAiTagsPost200Response> {
            return localVarFp.searchGetAiTagsPost(searchGetAiTagsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * 
     * @summary 取得布料相關 tag
     * @param {SearchGetAiTagsPostRequest} [searchGetAiTagsPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public searchGetAiTagsPost(searchGetAiTagsPostRequest?: SearchGetAiTagsPostRequest, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).searchGetAiTagsPost(searchGetAiTagsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShareApi - axios parameter creator
 * @export
 */
export const ShareApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取得 embed page 的 collection
         * @param {ShareGetReceivedGetListPostRequest} [shareGetReceivedGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetEmbedGetListPost: async (shareGetReceivedGetListPostRequest?: ShareGetReceivedGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/share/get-embed/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareGetReceivedGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 embed page collection 中的material明細
         * @param {ShareGetReceivedGetMaterialPostRequest} [shareGetReceivedGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetEmbedGetMaterialPost: async (shareGetReceivedGetMaterialPostRequest?: ShareGetReceivedGetMaterialPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/share/get-embed/get-material`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareGetReceivedGetMaterialPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 embed page 資料
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetEmbedPost: async (shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/share/get-embed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareGetReceivedPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 驗證是否有 save, clone 或 download 權限
         * @param {ShareGetReceivedCheckPermissionPostRequest} [shareGetReceivedCheckPermissionPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetReceivedCheckPermissionPost: async (shareGetReceivedCheckPermissionPostRequest?: ShareGetReceivedCheckPermissionPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/share/get-received/check-permission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareGetReceivedCheckPermissionPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {ShareGetReceivedCloneCheckPostRequest} [shareGetReceivedCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetReceivedCloneCheckPost: async (shareGetReceivedCloneCheckPostRequest?: ShareGetReceivedCloneCheckPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/share/get-received/clone-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareGetReceivedCloneCheckPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary clone
         * @param {ShareGetReceivedClonePostRequest} [shareGetReceivedClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetReceivedClonePost: async (shareGetReceivedClonePostRequest?: ShareGetReceivedClonePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/share/get-received/clone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareGetReceivedClonePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 received page collection
         * @param {ShareGetReceivedGetListPostRequest} [shareGetReceivedGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetReceivedGetListPost: async (shareGetReceivedGetListPostRequest?: ShareGetReceivedGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/share/get-received/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareGetReceivedGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 received page collection 中的material明細
         * @param {ShareGetReceivedGetMaterialPostRequest} [shareGetReceivedGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetReceivedGetMaterialPost: async (shareGetReceivedGetMaterialPostRequest?: ShareGetReceivedGetMaterialPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/share/get-received/get-material`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareGetReceivedGetMaterialPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 received page 資料
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetReceivedPost: async (shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/share/get-received`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareGetReceivedPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary save
         * @param {ShareGetReceivedSavePostRequest} [shareGetReceivedSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetReceivedSavePost: async (shareGetReceivedSavePostRequest?: ShareGetReceivedSavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/share/get-received/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareGetReceivedSavePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Moodboard received page 資料
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareMoodboardGetReceivedPost: async (shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/share/moodboard/get-received`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareGetReceivedPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save Moodboard received page 資料
         * @param {ShareGetReceivedSavePostRequest} [shareGetReceivedSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareMoodboardGetReceivedSavePost: async (shareGetReceivedSavePostRequest?: ShareGetReceivedSavePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/share/moodboard/get-received/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shareGetReceivedSavePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShareApi - functional programming interface
 * @export
 */
export const ShareApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShareApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 取得 embed page 的 collection
         * @param {ShareGetReceivedGetListPostRequest} [shareGetReceivedGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareGetEmbedGetListPost(shareGetReceivedGetListPostRequest?: ShareGetReceivedGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareGetEmbedGetListPost(shareGetReceivedGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 embed page collection 中的material明細
         * @param {ShareGetReceivedGetMaterialPostRequest} [shareGetReceivedGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareGetEmbedGetMaterialPost(shareGetReceivedGetMaterialPostRequest?: ShareGetReceivedGetMaterialPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedGetMaterialPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareGetEmbedGetMaterialPost(shareGetReceivedGetMaterialPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 embed page 資料
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareGetEmbedPost(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareGetEmbedPost(shareGetReceivedPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 驗證是否有 save, clone 或 download 權限
         * @param {ShareGetReceivedCheckPermissionPostRequest} [shareGetReceivedCheckPermissionPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareGetReceivedCheckPermissionPost(shareGetReceivedCheckPermissionPostRequest?: ShareGetReceivedCheckPermissionPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedCheckPermissionPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareGetReceivedCheckPermissionPost(shareGetReceivedCheckPermissionPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {ShareGetReceivedCloneCheckPostRequest} [shareGetReceivedCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareGetReceivedCloneCheckPost(shareGetReceivedCloneCheckPostRequest?: ShareGetReceivedCloneCheckPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedCloneCheckPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareGetReceivedCloneCheckPost(shareGetReceivedCloneCheckPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary clone
         * @param {ShareGetReceivedClonePostRequest} [shareGetReceivedClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareGetReceivedClonePost(shareGetReceivedClonePostRequest?: ShareGetReceivedClonePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareGetReceivedClonePost(shareGetReceivedClonePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 received page collection
         * @param {ShareGetReceivedGetListPostRequest} [shareGetReceivedGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareGetReceivedGetListPost(shareGetReceivedGetListPostRequest?: ShareGetReceivedGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareGetReceivedGetListPost(shareGetReceivedGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 received page collection 中的material明細
         * @param {ShareGetReceivedGetMaterialPostRequest} [shareGetReceivedGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareGetReceivedGetMaterialPost(shareGetReceivedGetMaterialPostRequest?: ShareGetReceivedGetMaterialPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedGetMaterialPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareGetReceivedGetMaterialPost(shareGetReceivedGetMaterialPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 received page 資料
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareGetReceivedPost(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareGetReceivedPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareGetReceivedPost(shareGetReceivedPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary save
         * @param {ShareGetReceivedSavePostRequest} [shareGetReceivedSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareGetReceivedSavePost(shareGetReceivedSavePostRequest?: ShareGetReceivedSavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareGetReceivedSavePost(shareGetReceivedSavePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Moodboard received page 資料
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareMoodboardGetReceivedPost(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShareMoodboardGetReceivedPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareMoodboardGetReceivedPost(shareGetReceivedPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Save Moodboard received page 資料
         * @param {ShareGetReceivedSavePostRequest} [shareGetReceivedSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareMoodboardGetReceivedSavePost(shareGetReceivedSavePostRequest?: ShareGetReceivedSavePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareMoodboardGetReceivedSavePost(shareGetReceivedSavePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShareApi - factory interface
 * @export
 */
export const ShareApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShareApiFp(configuration)
    return {
        /**
         * 
         * @summary 取得 embed page 的 collection
         * @param {ShareGetReceivedGetListPostRequest} [shareGetReceivedGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetEmbedGetListPost(shareGetReceivedGetListPostRequest?: ShareGetReceivedGetListPostRequest, options?: any): AxiosPromise<ShareGetReceivedGetListPost200Response> {
            return localVarFp.shareGetEmbedGetListPost(shareGetReceivedGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 embed page collection 中的material明細
         * @param {ShareGetReceivedGetMaterialPostRequest} [shareGetReceivedGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetEmbedGetMaterialPost(shareGetReceivedGetMaterialPostRequest?: ShareGetReceivedGetMaterialPostRequest, options?: any): AxiosPromise<ShareGetReceivedGetMaterialPost200Response> {
            return localVarFp.shareGetEmbedGetMaterialPost(shareGetReceivedGetMaterialPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 embed page 資料
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetEmbedPost(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: any): AxiosPromise<ShareGetReceivedPost200Response> {
            return localVarFp.shareGetEmbedPost(shareGetReceivedPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 驗證是否有 save, clone 或 download 權限
         * @param {ShareGetReceivedCheckPermissionPostRequest} [shareGetReceivedCheckPermissionPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetReceivedCheckPermissionPost(shareGetReceivedCheckPermissionPostRequest?: ShareGetReceivedCheckPermissionPostRequest, options?: any): AxiosPromise<ShareGetReceivedCheckPermissionPost200Response> {
            return localVarFp.shareGetReceivedCheckPermissionPost(shareGetReceivedCheckPermissionPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得此次 Clone 產生 quota 數量
         * @param {ShareGetReceivedCloneCheckPostRequest} [shareGetReceivedCloneCheckPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetReceivedCloneCheckPost(shareGetReceivedCloneCheckPostRequest?: ShareGetReceivedCloneCheckPostRequest, options?: any): AxiosPromise<ShareGetReceivedCloneCheckPost200Response> {
            return localVarFp.shareGetReceivedCloneCheckPost(shareGetReceivedCloneCheckPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary clone
         * @param {ShareGetReceivedClonePostRequest} [shareGetReceivedClonePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetReceivedClonePost(shareGetReceivedClonePostRequest?: ShareGetReceivedClonePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.shareGetReceivedClonePost(shareGetReceivedClonePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 received page collection
         * @param {ShareGetReceivedGetListPostRequest} [shareGetReceivedGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetReceivedGetListPost(shareGetReceivedGetListPostRequest?: ShareGetReceivedGetListPostRequest, options?: any): AxiosPromise<ShareGetReceivedGetListPost200Response> {
            return localVarFp.shareGetReceivedGetListPost(shareGetReceivedGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 received page collection 中的material明細
         * @param {ShareGetReceivedGetMaterialPostRequest} [shareGetReceivedGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetReceivedGetMaterialPost(shareGetReceivedGetMaterialPostRequest?: ShareGetReceivedGetMaterialPostRequest, options?: any): AxiosPromise<ShareGetReceivedGetMaterialPost200Response> {
            return localVarFp.shareGetReceivedGetMaterialPost(shareGetReceivedGetMaterialPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 received page 資料
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetReceivedPost(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: any): AxiosPromise<ShareGetReceivedPost200Response> {
            return localVarFp.shareGetReceivedPost(shareGetReceivedPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary save
         * @param {ShareGetReceivedSavePostRequest} [shareGetReceivedSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareGetReceivedSavePost(shareGetReceivedSavePostRequest?: ShareGetReceivedSavePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.shareGetReceivedSavePost(shareGetReceivedSavePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Moodboard received page 資料
         * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareMoodboardGetReceivedPost(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: any): AxiosPromise<ShareMoodboardGetReceivedPost200Response> {
            return localVarFp.shareMoodboardGetReceivedPost(shareGetReceivedPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save Moodboard received page 資料
         * @param {ShareGetReceivedSavePostRequest} [shareGetReceivedSavePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareMoodboardGetReceivedSavePost(shareGetReceivedSavePostRequest?: ShareGetReceivedSavePostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.shareMoodboardGetReceivedSavePost(shareGetReceivedSavePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShareApi - object-oriented interface
 * @export
 * @class ShareApi
 * @extends {BaseAPI}
 */
export class ShareApi extends BaseAPI {
    /**
     * 
     * @summary 取得 embed page 的 collection
     * @param {ShareGetReceivedGetListPostRequest} [shareGetReceivedGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public shareGetEmbedGetListPost(shareGetReceivedGetListPostRequest?: ShareGetReceivedGetListPostRequest, options?: AxiosRequestConfig) {
        return ShareApiFp(this.configuration).shareGetEmbedGetListPost(shareGetReceivedGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 embed page collection 中的material明細
     * @param {ShareGetReceivedGetMaterialPostRequest} [shareGetReceivedGetMaterialPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public shareGetEmbedGetMaterialPost(shareGetReceivedGetMaterialPostRequest?: ShareGetReceivedGetMaterialPostRequest, options?: AxiosRequestConfig) {
        return ShareApiFp(this.configuration).shareGetEmbedGetMaterialPost(shareGetReceivedGetMaterialPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 embed page 資料
     * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public shareGetEmbedPost(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: AxiosRequestConfig) {
        return ShareApiFp(this.configuration).shareGetEmbedPost(shareGetReceivedPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 驗證是否有 save, clone 或 download 權限
     * @param {ShareGetReceivedCheckPermissionPostRequest} [shareGetReceivedCheckPermissionPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public shareGetReceivedCheckPermissionPost(shareGetReceivedCheckPermissionPostRequest?: ShareGetReceivedCheckPermissionPostRequest, options?: AxiosRequestConfig) {
        return ShareApiFp(this.configuration).shareGetReceivedCheckPermissionPost(shareGetReceivedCheckPermissionPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得此次 Clone 產生 quota 數量
     * @param {ShareGetReceivedCloneCheckPostRequest} [shareGetReceivedCloneCheckPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public shareGetReceivedCloneCheckPost(shareGetReceivedCloneCheckPostRequest?: ShareGetReceivedCloneCheckPostRequest, options?: AxiosRequestConfig) {
        return ShareApiFp(this.configuration).shareGetReceivedCloneCheckPost(shareGetReceivedCloneCheckPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary clone
     * @param {ShareGetReceivedClonePostRequest} [shareGetReceivedClonePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public shareGetReceivedClonePost(shareGetReceivedClonePostRequest?: ShareGetReceivedClonePostRequest, options?: AxiosRequestConfig) {
        return ShareApiFp(this.configuration).shareGetReceivedClonePost(shareGetReceivedClonePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 received page collection
     * @param {ShareGetReceivedGetListPostRequest} [shareGetReceivedGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public shareGetReceivedGetListPost(shareGetReceivedGetListPostRequest?: ShareGetReceivedGetListPostRequest, options?: AxiosRequestConfig) {
        return ShareApiFp(this.configuration).shareGetReceivedGetListPost(shareGetReceivedGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 received page collection 中的material明細
     * @param {ShareGetReceivedGetMaterialPostRequest} [shareGetReceivedGetMaterialPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public shareGetReceivedGetMaterialPost(shareGetReceivedGetMaterialPostRequest?: ShareGetReceivedGetMaterialPostRequest, options?: AxiosRequestConfig) {
        return ShareApiFp(this.configuration).shareGetReceivedGetMaterialPost(shareGetReceivedGetMaterialPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 received page 資料
     * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public shareGetReceivedPost(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: AxiosRequestConfig) {
        return ShareApiFp(this.configuration).shareGetReceivedPost(shareGetReceivedPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary save
     * @param {ShareGetReceivedSavePostRequest} [shareGetReceivedSavePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public shareGetReceivedSavePost(shareGetReceivedSavePostRequest?: ShareGetReceivedSavePostRequest, options?: AxiosRequestConfig) {
        return ShareApiFp(this.configuration).shareGetReceivedSavePost(shareGetReceivedSavePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Moodboard received page 資料
     * @param {ShareGetReceivedPostRequest} [shareGetReceivedPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public shareMoodboardGetReceivedPost(shareGetReceivedPostRequest?: ShareGetReceivedPostRequest, options?: AxiosRequestConfig) {
        return ShareApiFp(this.configuration).shareMoodboardGetReceivedPost(shareGetReceivedPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save Moodboard received page 資料
     * @param {ShareGetReceivedSavePostRequest} [shareGetReceivedSavePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareApi
     */
    public shareMoodboardGetReceivedSavePost(shareGetReceivedSavePostRequest?: ShareGetReceivedSavePostRequest, options?: AxiosRequestConfig) {
        return ShareApiFp(this.configuration).shareMoodboardGetReceivedSavePost(shareGetReceivedSavePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShowroomApi - axios parameter creator
 * @export
 */
export const ShowroomApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 取得Showroom的announcement
         * @param {ShowroomGetAnnouncementPostRequest} [showroomGetAnnouncementPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showroomGetAnnouncementPost: async (showroomGetAnnouncementPostRequest?: ShowroomGetAnnouncementPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/showroom/get-announcement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(showroomGetAnnouncementPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得Showroom的banner和showroom list
         * @param {ShowroomGetAnnouncementPostRequest} [showroomGetAnnouncementPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showroomGetBannerAndListPost: async (showroomGetAnnouncementPostRequest?: ShowroomGetAnnouncementPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/showroom/get-banner-and-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(showroomGetAnnouncementPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 依ShowroomId取得展會資料
         * @param {ShowroomGetInfoPostRequest} [showroomGetInfoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showroomGetInfoPost: async (showroomGetInfoPostRequest?: ShowroomGetInfoPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/showroom/get-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(showroomGetInfoPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Showroom collection 清單(且collection需公開)
         * @param {ShowroomGetListPostRequest} [showroomGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showroomGetListPost: async (showroomGetListPostRequest?: ShowroomGetListPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/showroom/get-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(showroomGetListPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得 Showroom 布片詳細資料
         * @param {ShowroomGetMaterialPostRequest} [showroomGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showroomGetMaterialPost: async (showroomGetMaterialPostRequest?: ShowroomGetMaterialPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/showroom/get-material`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(showroomGetMaterialPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 由noreply@frontier.cool代為發送
         * @summary 使用者發送Email訊息給某一組織的showroom信箱
         * @param {ShowroomSendMailPostRequest} [showroomSendMailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showroomSendMailPost: async (showroomSendMailPostRequest?: ShowroomSendMailPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/showroom/send-mail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(showroomSendMailPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowroomApi - functional programming interface
 * @export
 */
export const ShowroomApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowroomApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 取得Showroom的announcement
         * @param {ShowroomGetAnnouncementPostRequest} [showroomGetAnnouncementPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showroomGetAnnouncementPost(showroomGetAnnouncementPostRequest?: ShowroomGetAnnouncementPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowroomGetAnnouncementPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showroomGetAnnouncementPost(showroomGetAnnouncementPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得Showroom的banner和showroom list
         * @param {ShowroomGetAnnouncementPostRequest} [showroomGetAnnouncementPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showroomGetBannerAndListPost(showroomGetAnnouncementPostRequest?: ShowroomGetAnnouncementPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowroomGetBannerAndListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showroomGetBannerAndListPost(showroomGetAnnouncementPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 依ShowroomId取得展會資料
         * @param {ShowroomGetInfoPostRequest} [showroomGetInfoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showroomGetInfoPost(showroomGetInfoPostRequest?: ShowroomGetInfoPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowroomGetInfoPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showroomGetInfoPost(showroomGetInfoPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Showroom collection 清單(且collection需公開)
         * @param {ShowroomGetListPostRequest} [showroomGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showroomGetListPost(showroomGetListPostRequest?: ShowroomGetListPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicGetListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showroomGetListPost(showroomGetListPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得 Showroom 布片詳細資料
         * @param {ShowroomGetMaterialPostRequest} [showroomGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showroomGetMaterialPost(showroomGetMaterialPostRequest?: ShowroomGetMaterialPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicGetMaterialPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showroomGetMaterialPost(showroomGetMaterialPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 由noreply@frontier.cool代為發送
         * @summary 使用者發送Email訊息給某一組織的showroom信箱
         * @param {ShowroomSendMailPostRequest} [showroomSendMailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showroomSendMailPost(showroomSendMailPostRequest?: ShowroomSendMailPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showroomSendMailPost(showroomSendMailPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowroomApi - factory interface
 * @export
 */
export const ShowroomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowroomApiFp(configuration)
    return {
        /**
         * 
         * @summary 取得Showroom的announcement
         * @param {ShowroomGetAnnouncementPostRequest} [showroomGetAnnouncementPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showroomGetAnnouncementPost(showroomGetAnnouncementPostRequest?: ShowroomGetAnnouncementPostRequest, options?: any): AxiosPromise<ShowroomGetAnnouncementPost200Response> {
            return localVarFp.showroomGetAnnouncementPost(showroomGetAnnouncementPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得Showroom的banner和showroom list
         * @param {ShowroomGetAnnouncementPostRequest} [showroomGetAnnouncementPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showroomGetBannerAndListPost(showroomGetAnnouncementPostRequest?: ShowroomGetAnnouncementPostRequest, options?: any): AxiosPromise<ShowroomGetBannerAndListPost200Response> {
            return localVarFp.showroomGetBannerAndListPost(showroomGetAnnouncementPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 依ShowroomId取得展會資料
         * @param {ShowroomGetInfoPostRequest} [showroomGetInfoPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showroomGetInfoPost(showroomGetInfoPostRequest?: ShowroomGetInfoPostRequest, options?: any): AxiosPromise<ShowroomGetInfoPost200Response> {
            return localVarFp.showroomGetInfoPost(showroomGetInfoPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Showroom collection 清單(且collection需公開)
         * @param {ShowroomGetListPostRequest} [showroomGetListPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showroomGetListPost(showroomGetListPostRequest?: ShowroomGetListPostRequest, options?: any): AxiosPromise<PublicGetListPost200Response> {
            return localVarFp.showroomGetListPost(showroomGetListPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得 Showroom 布片詳細資料
         * @param {ShowroomGetMaterialPostRequest} [showroomGetMaterialPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showroomGetMaterialPost(showroomGetMaterialPostRequest?: ShowroomGetMaterialPostRequest, options?: any): AxiosPromise<PublicGetMaterialPost200Response> {
            return localVarFp.showroomGetMaterialPost(showroomGetMaterialPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 由noreply@frontier.cool代為發送
         * @summary 使用者發送Email訊息給某一組織的showroom信箱
         * @param {ShowroomSendMailPostRequest} [showroomSendMailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showroomSendMailPost(showroomSendMailPostRequest?: ShowroomSendMailPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.showroomSendMailPost(showroomSendMailPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowroomApi - object-oriented interface
 * @export
 * @class ShowroomApi
 * @extends {BaseAPI}
 */
export class ShowroomApi extends BaseAPI {
    /**
     * 
     * @summary 取得Showroom的announcement
     * @param {ShowroomGetAnnouncementPostRequest} [showroomGetAnnouncementPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowroomApi
     */
    public showroomGetAnnouncementPost(showroomGetAnnouncementPostRequest?: ShowroomGetAnnouncementPostRequest, options?: AxiosRequestConfig) {
        return ShowroomApiFp(this.configuration).showroomGetAnnouncementPost(showroomGetAnnouncementPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得Showroom的banner和showroom list
     * @param {ShowroomGetAnnouncementPostRequest} [showroomGetAnnouncementPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowroomApi
     */
    public showroomGetBannerAndListPost(showroomGetAnnouncementPostRequest?: ShowroomGetAnnouncementPostRequest, options?: AxiosRequestConfig) {
        return ShowroomApiFp(this.configuration).showroomGetBannerAndListPost(showroomGetAnnouncementPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 依ShowroomId取得展會資料
     * @param {ShowroomGetInfoPostRequest} [showroomGetInfoPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowroomApi
     */
    public showroomGetInfoPost(showroomGetInfoPostRequest?: ShowroomGetInfoPostRequest, options?: AxiosRequestConfig) {
        return ShowroomApiFp(this.configuration).showroomGetInfoPost(showroomGetInfoPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Showroom collection 清單(且collection需公開)
     * @param {ShowroomGetListPostRequest} [showroomGetListPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowroomApi
     */
    public showroomGetListPost(showroomGetListPostRequest?: ShowroomGetListPostRequest, options?: AxiosRequestConfig) {
        return ShowroomApiFp(this.configuration).showroomGetListPost(showroomGetListPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得 Showroom 布片詳細資料
     * @param {ShowroomGetMaterialPostRequest} [showroomGetMaterialPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowroomApi
     */
    public showroomGetMaterialPost(showroomGetMaterialPostRequest?: ShowroomGetMaterialPostRequest, options?: AxiosRequestConfig) {
        return ShowroomApiFp(this.configuration).showroomGetMaterialPost(showroomGetMaterialPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 由noreply@frontier.cool代為發送
     * @summary 使用者發送Email訊息給某一組織的showroom信箱
     * @param {ShowroomSendMailPostRequest} [showroomSendMailPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowroomApi
     */
    public showroomSendMailPost(showroomSendMailPostRequest?: ShowroomSendMailPostRequest, options?: AxiosRequestConfig) {
        return ShowroomApiFp(this.configuration).showroomSendMailPost(showroomSendMailPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SignInApi - axios parameter creator
 * @export
 */
export const SignInApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Sign-In and retrieve user\'s AccessToken & RefreshToken.
         * @param {SignInGeneralPostRequest} [signInGeneralPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInGeneralPost: async (signInGeneralPostRequest?: SignInGeneralPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign-in/general`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInGeneralPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary google sign in
         * @param {SignInGooglePostRequest} [signInGooglePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInGooglePost: async (signInGooglePostRequest?: SignInGooglePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign-in/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInGooglePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignInApi - functional programming interface
 * @export
 */
export const SignInApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignInApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Sign-In and retrieve user\'s AccessToken & RefreshToken.
         * @param {SignInGeneralPostRequest} [signInGeneralPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signInGeneralPost(signInGeneralPostRequest?: SignInGeneralPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignInGeneralPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signInGeneralPost(signInGeneralPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary google sign in
         * @param {SignInGooglePostRequest} [signInGooglePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signInGooglePost(signInGooglePostRequest?: SignInGooglePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignInGooglePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signInGooglePost(signInGooglePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignInApi - factory interface
 * @export
 */
export const SignInApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignInApiFp(configuration)
    return {
        /**
         * 
         * @summary Sign-In and retrieve user\'s AccessToken & RefreshToken.
         * @param {SignInGeneralPostRequest} [signInGeneralPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInGeneralPost(signInGeneralPostRequest?: SignInGeneralPostRequest, options?: any): AxiosPromise<SignInGeneralPost200Response> {
            return localVarFp.signInGeneralPost(signInGeneralPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary google sign in
         * @param {SignInGooglePostRequest} [signInGooglePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInGooglePost(signInGooglePostRequest?: SignInGooglePostRequest, options?: any): AxiosPromise<SignInGooglePost200Response> {
            return localVarFp.signInGooglePost(signInGooglePostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignInApi - object-oriented interface
 * @export
 * @class SignInApi
 * @extends {BaseAPI}
 */
export class SignInApi extends BaseAPI {
    /**
     * 
     * @summary Sign-In and retrieve user\'s AccessToken & RefreshToken.
     * @param {SignInGeneralPostRequest} [signInGeneralPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignInApi
     */
    public signInGeneralPost(signInGeneralPostRequest?: SignInGeneralPostRequest, options?: AxiosRequestConfig) {
        return SignInApiFp(this.configuration).signInGeneralPost(signInGeneralPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary google sign in
     * @param {SignInGooglePostRequest} [signInGooglePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignInApi
     */
    public signInGooglePost(signInGooglePostRequest?: SignInGooglePostRequest, options?: AxiosRequestConfig) {
        return SignInApiFp(this.configuration).signInGooglePost(signInGooglePostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SignUpApi - axios parameter creator
 * @export
 */
export const SignUpApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 填寫帳號申請表單
         * @param {SignUpRequestPostRequest} [signUpRequestPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpRequestPost: async (signUpRequestPostRequest?: SignUpRequestPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign-up/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpRequestPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignUpApi - functional programming interface
 * @export
 */
export const SignUpApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignUpApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 填寫帳號申請表單
         * @param {SignUpRequestPostRequest} [signUpRequestPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUpRequestPost(signUpRequestPostRequest?: SignUpRequestPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUpRequestPost(signUpRequestPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignUpApi - factory interface
 * @export
 */
export const SignUpApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignUpApiFp(configuration)
    return {
        /**
         * 
         * @summary 填寫帳號申請表單
         * @param {SignUpRequestPostRequest} [signUpRequestPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpRequestPost(signUpRequestPostRequest?: SignUpRequestPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.signUpRequestPost(signUpRequestPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SignUpApi - object-oriented interface
 * @export
 * @class SignUpApi
 * @extends {BaseAPI}
 */
export class SignUpApi extends BaseAPI {
    /**
     * 
     * @summary 填寫帳號申請表單
     * @param {SignUpRequestPostRequest} [signUpRequestPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignUpApi
     */
    public signUpRequestPost(signUpRequestPostRequest?: SignUpRequestPostRequest, options?: AxiosRequestConfig) {
        return SignUpApiFp(this.configuration).signUpRequestPost(signUpRequestPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ThreadBoardApi - axios parameter creator
 * @export
 */
export const ThreadBoardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 在Thread Board中檢查是否可以刪除 Workflow Stage
         * @param {CheckCanDeleteWorkflowStageRequest} checkCanDeleteWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCanDeleteWorkflowStage: async (checkCanDeleteWorkflowStageRequest: CheckCanDeleteWorkflowStageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'checkCanDeleteWorkflowStageRequest' is not null or undefined
            assertParamExists('checkCanDeleteWorkflowStage', 'checkCanDeleteWorkflowStageRequest', checkCanDeleteWorkflowStageRequest)
            const localVarPath = `/thread-board/workflow-stage/check-can-delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkCanDeleteWorkflowStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 在Thread Board中建立 Workflow Stage
         * @param {CreateWorkflowStageRequest} createWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowStage: async (createWorkflowStageRequest: CreateWorkflowStageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createWorkflowStageRequest' is not null or undefined
            assertParamExists('createWorkflowStage', 'createWorkflowStageRequest', createWorkflowStageRequest)
            const localVarPath = `/thread-board/workflow-stage/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkflowStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 在Thread Board中刪除 Workflow Stage
         * @param {CheckCanDeleteWorkflowStageRequest} checkCanDeleteWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowStage: async (checkCanDeleteWorkflowStageRequest: CheckCanDeleteWorkflowStageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'checkCanDeleteWorkflowStageRequest' is not null or undefined
            assertParamExists('deleteWorkflowStage', 'checkCanDeleteWorkflowStageRequest', checkCanDeleteWorkflowStageRequest)
            const localVarPath = `/thread-board/workflow-stage/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkCanDeleteWorkflowStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得Thread Board資料
         * @param {GetThreadBoardRequest} getThreadBoardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThreadBoard: async (getThreadBoardRequest: GetThreadBoardRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getThreadBoardRequest' is not null or undefined
            assertParamExists('getThreadBoard', 'getThreadBoardRequest', getThreadBoardRequest)
            const localVarPath = `/thread-board/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getThreadBoardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 在Thread Board中取得該單位(組織或團隊)最常參與的使用者
         * @param {GetThreadBoardMostParticipantRequest} getThreadBoardMostParticipantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThreadBoardMostParticipant: async (getThreadBoardMostParticipantRequest: GetThreadBoardMostParticipantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getThreadBoardMostParticipantRequest' is not null or undefined
            assertParamExists('getThreadBoardMostParticipant', 'getThreadBoardMostParticipantRequest', getThreadBoardMostParticipantRequest)
            const localVarPath = `/thread-board/get-most-participant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getThreadBoardMostParticipantRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 以單位紀錄的是sortBy、onlyShowUnread、filter，以使用者紀錄的是search
         * @summary 在Thread Board中取得該單位(組織或團隊)及使用者的查詢條件
         * @param {GetThreadBoardMostParticipantRequest} getThreadBoardMostParticipantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThreadBoardQuery: async (getThreadBoardMostParticipantRequest: GetThreadBoardMostParticipantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getThreadBoardMostParticipantRequest' is not null or undefined
            assertParamExists('getThreadBoardQuery', 'getThreadBoardMostParticipantRequest', getThreadBoardMostParticipantRequest)
            const localVarPath = `/thread-board/query/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getThreadBoardMostParticipantRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 在Thread Board中隱藏 Workflow Stage
         * @param {HideWorkflowStageRequest} hideWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hideWorkflowStage: async (hideWorkflowStageRequest: HideWorkflowStageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hideWorkflowStageRequest' is not null or undefined
            assertParamExists('hideWorkflowStage', 'hideWorkflowStageRequest', hideWorkflowStageRequest)
            const localVarPath = `/thread-board/workflow-stage/hide`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hideWorkflowStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 在Thread Board中移動WorkflowStage位置
         * @param {MoveWorkflowStageRequest} moveWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveWorkflowStage: async (moveWorkflowStageRequest: MoveWorkflowStageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moveWorkflowStageRequest' is not null or undefined
            assertParamExists('moveWorkflowStage', 'moveWorkflowStageRequest', moveWorkflowStageRequest)
            const localVarPath = `/thread-board/workflow-stage/move`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moveWorkflowStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 在Thread Board中移動Workflow Stage中的所有digital-thread至另一個Workflow Stage
         * @param {MoveWorkflowStageAllDigitalThreadRequest} moveWorkflowStageAllDigitalThreadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveWorkflowStageAllDigitalThread: async (moveWorkflowStageAllDigitalThreadRequest: MoveWorkflowStageAllDigitalThreadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moveWorkflowStageAllDigitalThreadRequest' is not null or undefined
            assertParamExists('moveWorkflowStageAllDigitalThread', 'moveWorkflowStageAllDigitalThreadRequest', moveWorkflowStageAllDigitalThreadRequest)
            const localVarPath = `/thread-board/workflow-stage/digital-thread/move-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moveWorkflowStageAllDigitalThreadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 在Thread Board中移動digital-thread位置
         * @param {MoveWorkflowStageDigitalThreadRequest} moveWorkflowStageDigitalThreadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveWorkflowStageDigitalThread: async (moveWorkflowStageDigitalThreadRequest: MoveWorkflowStageDigitalThreadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moveWorkflowStageDigitalThreadRequest' is not null or undefined
            assertParamExists('moveWorkflowStageDigitalThread', 'moveWorkflowStageDigitalThreadRequest', moveWorkflowStageDigitalThreadRequest)
            const localVarPath = `/thread-board/workflow-stage/digital-thread/move`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(moveWorkflowStageDigitalThreadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 在Thread Board中將所有未讀的Digital Thread標記為已讀
         * @param {ReadAllUnreadDigitalThreadRequest} readAllUnreadDigitalThreadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllUnreadDigitalThread: async (readAllUnreadDigitalThreadRequest: ReadAllUnreadDigitalThreadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'readAllUnreadDigitalThreadRequest' is not null or undefined
            assertParamExists('readAllUnreadDigitalThread', 'readAllUnreadDigitalThreadRequest', readAllUnreadDigitalThreadRequest)
            const localVarPath = `/thread-board/read-all-unread-digital-thread`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(readAllUnreadDigitalThreadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 在Thread Board中重新命名 Workflow Stage名稱
         * @param {RenameWorkflowStageRequest} renameWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameWorkflowStage: async (renameWorkflowStageRequest: RenameWorkflowStageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'renameWorkflowStageRequest' is not null or undefined
            assertParamExists('renameWorkflowStage', 'renameWorkflowStageRequest', renameWorkflowStageRequest)
            const localVarPath = `/thread-board/workflow-stage/rename`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(renameWorkflowStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 以單位紀錄的是sortBy、onlyShowUnread、filter，以使用者紀錄的是search
         * @summary 在Thread Board中紀錄該單位(組織或團隊)及使用者的查詢條件
         * @param {GetThreadBoardRequest} getThreadBoardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveThreadBoardQuery: async (getThreadBoardRequest: GetThreadBoardRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getThreadBoardRequest' is not null or undefined
            assertParamExists('saveThreadBoardQuery', 'getThreadBoardRequest', getThreadBoardRequest)
            const localVarPath = `/thread-board/query/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getThreadBoardRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 在Thread Board中顯示 Workflow Stage
         * @param {HideWorkflowStageRequest} hideWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showWorkflowStage: async (hideWorkflowStageRequest: HideWorkflowStageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hideWorkflowStageRequest' is not null or undefined
            assertParamExists('showWorkflowStage', 'hideWorkflowStageRequest', hideWorkflowStageRequest)
            const localVarPath = `/thread-board/workflow-stage/show`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hideWorkflowStageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThreadBoardApi - functional programming interface
 * @export
 */
export const ThreadBoardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThreadBoardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 在Thread Board中檢查是否可以刪除 Workflow Stage
         * @param {CheckCanDeleteWorkflowStageRequest} checkCanDeleteWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCanDeleteWorkflowStage(checkCanDeleteWorkflowStageRequest: CheckCanDeleteWorkflowStageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckCanDeleteWorkflowStage200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkCanDeleteWorkflowStage(checkCanDeleteWorkflowStageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 在Thread Board中建立 Workflow Stage
         * @param {CreateWorkflowStageRequest} createWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkflowStage(createWorkflowStageRequest: CreateWorkflowStageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkflowStage(createWorkflowStageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 在Thread Board中刪除 Workflow Stage
         * @param {CheckCanDeleteWorkflowStageRequest} checkCanDeleteWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkflowStage(checkCanDeleteWorkflowStageRequest: CheckCanDeleteWorkflowStageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckCanDeleteWorkflowStage200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkflowStage(checkCanDeleteWorkflowStageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得Thread Board資料
         * @param {GetThreadBoardRequest} getThreadBoardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getThreadBoard(getThreadBoardRequest: GetThreadBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetThreadBoard200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getThreadBoard(getThreadBoardRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 在Thread Board中取得該單位(組織或團隊)最常參與的使用者
         * @param {GetThreadBoardMostParticipantRequest} getThreadBoardMostParticipantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getThreadBoardMostParticipant(getThreadBoardMostParticipantRequest: GetThreadBoardMostParticipantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetThreadBoardMostParticipant200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getThreadBoardMostParticipant(getThreadBoardMostParticipantRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 以單位紀錄的是sortBy、onlyShowUnread、filter，以使用者紀錄的是search
         * @summary 在Thread Board中取得該單位(組織或團隊)及使用者的查詢條件
         * @param {GetThreadBoardMostParticipantRequest} getThreadBoardMostParticipantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getThreadBoardQuery(getThreadBoardMostParticipantRequest: GetThreadBoardMostParticipantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetThreadBoardQuery200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getThreadBoardQuery(getThreadBoardMostParticipantRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 在Thread Board中隱藏 Workflow Stage
         * @param {HideWorkflowStageRequest} hideWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hideWorkflowStage(hideWorkflowStageRequest: HideWorkflowStageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hideWorkflowStage(hideWorkflowStageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 在Thread Board中移動WorkflowStage位置
         * @param {MoveWorkflowStageRequest} moveWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveWorkflowStage(moveWorkflowStageRequest: MoveWorkflowStageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveWorkflowStage(moveWorkflowStageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 在Thread Board中移動Workflow Stage中的所有digital-thread至另一個Workflow Stage
         * @param {MoveWorkflowStageAllDigitalThreadRequest} moveWorkflowStageAllDigitalThreadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveWorkflowStageAllDigitalThread(moveWorkflowStageAllDigitalThreadRequest: MoveWorkflowStageAllDigitalThreadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MoveWorkflowStageAllDigitalThread200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveWorkflowStageAllDigitalThread(moveWorkflowStageAllDigitalThreadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 在Thread Board中移動digital-thread位置
         * @param {MoveWorkflowStageDigitalThreadRequest} moveWorkflowStageDigitalThreadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveWorkflowStageDigitalThread(moveWorkflowStageDigitalThreadRequest: MoveWorkflowStageDigitalThreadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveWorkflowStageDigitalThread(moveWorkflowStageDigitalThreadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 在Thread Board中將所有未讀的Digital Thread標記為已讀
         * @param {ReadAllUnreadDigitalThreadRequest} readAllUnreadDigitalThreadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAllUnreadDigitalThread(readAllUnreadDigitalThreadRequest: ReadAllUnreadDigitalThreadRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAllUnreadDigitalThread(readAllUnreadDigitalThreadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 在Thread Board中重新命名 Workflow Stage名稱
         * @param {RenameWorkflowStageRequest} renameWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renameWorkflowStage(renameWorkflowStageRequest: RenameWorkflowStageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.renameWorkflowStage(renameWorkflowStageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 以單位紀錄的是sortBy、onlyShowUnread、filter，以使用者紀錄的是search
         * @summary 在Thread Board中紀錄該單位(組織或團隊)及使用者的查詢條件
         * @param {GetThreadBoardRequest} getThreadBoardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveThreadBoardQuery(getThreadBoardRequest: GetThreadBoardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveThreadBoardQuery(getThreadBoardRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 在Thread Board中顯示 Workflow Stage
         * @param {HideWorkflowStageRequest} hideWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showWorkflowStage(hideWorkflowStageRequest: HideWorkflowStageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showWorkflowStage(hideWorkflowStageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ThreadBoardApi - factory interface
 * @export
 */
export const ThreadBoardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThreadBoardApiFp(configuration)
    return {
        /**
         * 
         * @summary 在Thread Board中檢查是否可以刪除 Workflow Stage
         * @param {CheckCanDeleteWorkflowStageRequest} checkCanDeleteWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCanDeleteWorkflowStage(checkCanDeleteWorkflowStageRequest: CheckCanDeleteWorkflowStageRequest, options?: any): AxiosPromise<CheckCanDeleteWorkflowStage200Response> {
            return localVarFp.checkCanDeleteWorkflowStage(checkCanDeleteWorkflowStageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 在Thread Board中建立 Workflow Stage
         * @param {CreateWorkflowStageRequest} createWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflowStage(createWorkflowStageRequest: CreateWorkflowStageRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.createWorkflowStage(createWorkflowStageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 在Thread Board中刪除 Workflow Stage
         * @param {CheckCanDeleteWorkflowStageRequest} checkCanDeleteWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflowStage(checkCanDeleteWorkflowStageRequest: CheckCanDeleteWorkflowStageRequest, options?: any): AxiosPromise<CheckCanDeleteWorkflowStage200Response> {
            return localVarFp.deleteWorkflowStage(checkCanDeleteWorkflowStageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得Thread Board資料
         * @param {GetThreadBoardRequest} getThreadBoardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThreadBoard(getThreadBoardRequest: GetThreadBoardRequest, options?: any): AxiosPromise<GetThreadBoard200Response> {
            return localVarFp.getThreadBoard(getThreadBoardRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 在Thread Board中取得該單位(組織或團隊)最常參與的使用者
         * @param {GetThreadBoardMostParticipantRequest} getThreadBoardMostParticipantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThreadBoardMostParticipant(getThreadBoardMostParticipantRequest: GetThreadBoardMostParticipantRequest, options?: any): AxiosPromise<GetThreadBoardMostParticipant200Response> {
            return localVarFp.getThreadBoardMostParticipant(getThreadBoardMostParticipantRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 以單位紀錄的是sortBy、onlyShowUnread、filter，以使用者紀錄的是search
         * @summary 在Thread Board中取得該單位(組織或團隊)及使用者的查詢條件
         * @param {GetThreadBoardMostParticipantRequest} getThreadBoardMostParticipantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThreadBoardQuery(getThreadBoardMostParticipantRequest: GetThreadBoardMostParticipantRequest, options?: any): AxiosPromise<GetThreadBoardQuery200Response> {
            return localVarFp.getThreadBoardQuery(getThreadBoardMostParticipantRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 在Thread Board中隱藏 Workflow Stage
         * @param {HideWorkflowStageRequest} hideWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hideWorkflowStage(hideWorkflowStageRequest: HideWorkflowStageRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.hideWorkflowStage(hideWorkflowStageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 在Thread Board中移動WorkflowStage位置
         * @param {MoveWorkflowStageRequest} moveWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveWorkflowStage(moveWorkflowStageRequest: MoveWorkflowStageRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.moveWorkflowStage(moveWorkflowStageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 在Thread Board中移動Workflow Stage中的所有digital-thread至另一個Workflow Stage
         * @param {MoveWorkflowStageAllDigitalThreadRequest} moveWorkflowStageAllDigitalThreadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveWorkflowStageAllDigitalThread(moveWorkflowStageAllDigitalThreadRequest: MoveWorkflowStageAllDigitalThreadRequest, options?: any): AxiosPromise<MoveWorkflowStageAllDigitalThread200Response> {
            return localVarFp.moveWorkflowStageAllDigitalThread(moveWorkflowStageAllDigitalThreadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 在Thread Board中移動digital-thread位置
         * @param {MoveWorkflowStageDigitalThreadRequest} moveWorkflowStageDigitalThreadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveWorkflowStageDigitalThread(moveWorkflowStageDigitalThreadRequest: MoveWorkflowStageDigitalThreadRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.moveWorkflowStageDigitalThread(moveWorkflowStageDigitalThreadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 在Thread Board中將所有未讀的Digital Thread標記為已讀
         * @param {ReadAllUnreadDigitalThreadRequest} readAllUnreadDigitalThreadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAllUnreadDigitalThread(readAllUnreadDigitalThreadRequest: ReadAllUnreadDigitalThreadRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.readAllUnreadDigitalThread(readAllUnreadDigitalThreadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 在Thread Board中重新命名 Workflow Stage名稱
         * @param {RenameWorkflowStageRequest} renameWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renameWorkflowStage(renameWorkflowStageRequest: RenameWorkflowStageRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.renameWorkflowStage(renameWorkflowStageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 以單位紀錄的是sortBy、onlyShowUnread、filter，以使用者紀錄的是search
         * @summary 在Thread Board中紀錄該單位(組織或團隊)及使用者的查詢條件
         * @param {GetThreadBoardRequest} getThreadBoardRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveThreadBoardQuery(getThreadBoardRequest: GetThreadBoardRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.saveThreadBoardQuery(getThreadBoardRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 在Thread Board中顯示 Workflow Stage
         * @param {HideWorkflowStageRequest} hideWorkflowStageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showWorkflowStage(hideWorkflowStageRequest: HideWorkflowStageRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.showWorkflowStage(hideWorkflowStageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ThreadBoardApi - object-oriented interface
 * @export
 * @class ThreadBoardApi
 * @extends {BaseAPI}
 */
export class ThreadBoardApi extends BaseAPI {
    /**
     * 
     * @summary 在Thread Board中檢查是否可以刪除 Workflow Stage
     * @param {CheckCanDeleteWorkflowStageRequest} checkCanDeleteWorkflowStageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadBoardApi
     */
    public checkCanDeleteWorkflowStage(checkCanDeleteWorkflowStageRequest: CheckCanDeleteWorkflowStageRequest, options?: AxiosRequestConfig) {
        return ThreadBoardApiFp(this.configuration).checkCanDeleteWorkflowStage(checkCanDeleteWorkflowStageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 在Thread Board中建立 Workflow Stage
     * @param {CreateWorkflowStageRequest} createWorkflowStageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadBoardApi
     */
    public createWorkflowStage(createWorkflowStageRequest: CreateWorkflowStageRequest, options?: AxiosRequestConfig) {
        return ThreadBoardApiFp(this.configuration).createWorkflowStage(createWorkflowStageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 在Thread Board中刪除 Workflow Stage
     * @param {CheckCanDeleteWorkflowStageRequest} checkCanDeleteWorkflowStageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadBoardApi
     */
    public deleteWorkflowStage(checkCanDeleteWorkflowStageRequest: CheckCanDeleteWorkflowStageRequest, options?: AxiosRequestConfig) {
        return ThreadBoardApiFp(this.configuration).deleteWorkflowStage(checkCanDeleteWorkflowStageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得Thread Board資料
     * @param {GetThreadBoardRequest} getThreadBoardRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadBoardApi
     */
    public getThreadBoard(getThreadBoardRequest: GetThreadBoardRequest, options?: AxiosRequestConfig) {
        return ThreadBoardApiFp(this.configuration).getThreadBoard(getThreadBoardRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 在Thread Board中取得該單位(組織或團隊)最常參與的使用者
     * @param {GetThreadBoardMostParticipantRequest} getThreadBoardMostParticipantRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadBoardApi
     */
    public getThreadBoardMostParticipant(getThreadBoardMostParticipantRequest: GetThreadBoardMostParticipantRequest, options?: AxiosRequestConfig) {
        return ThreadBoardApiFp(this.configuration).getThreadBoardMostParticipant(getThreadBoardMostParticipantRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 以單位紀錄的是sortBy、onlyShowUnread、filter，以使用者紀錄的是search
     * @summary 在Thread Board中取得該單位(組織或團隊)及使用者的查詢條件
     * @param {GetThreadBoardMostParticipantRequest} getThreadBoardMostParticipantRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadBoardApi
     */
    public getThreadBoardQuery(getThreadBoardMostParticipantRequest: GetThreadBoardMostParticipantRequest, options?: AxiosRequestConfig) {
        return ThreadBoardApiFp(this.configuration).getThreadBoardQuery(getThreadBoardMostParticipantRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 在Thread Board中隱藏 Workflow Stage
     * @param {HideWorkflowStageRequest} hideWorkflowStageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadBoardApi
     */
    public hideWorkflowStage(hideWorkflowStageRequest: HideWorkflowStageRequest, options?: AxiosRequestConfig) {
        return ThreadBoardApiFp(this.configuration).hideWorkflowStage(hideWorkflowStageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 在Thread Board中移動WorkflowStage位置
     * @param {MoveWorkflowStageRequest} moveWorkflowStageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadBoardApi
     */
    public moveWorkflowStage(moveWorkflowStageRequest: MoveWorkflowStageRequest, options?: AxiosRequestConfig) {
        return ThreadBoardApiFp(this.configuration).moveWorkflowStage(moveWorkflowStageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 在Thread Board中移動Workflow Stage中的所有digital-thread至另一個Workflow Stage
     * @param {MoveWorkflowStageAllDigitalThreadRequest} moveWorkflowStageAllDigitalThreadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadBoardApi
     */
    public moveWorkflowStageAllDigitalThread(moveWorkflowStageAllDigitalThreadRequest: MoveWorkflowStageAllDigitalThreadRequest, options?: AxiosRequestConfig) {
        return ThreadBoardApiFp(this.configuration).moveWorkflowStageAllDigitalThread(moveWorkflowStageAllDigitalThreadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 在Thread Board中移動digital-thread位置
     * @param {MoveWorkflowStageDigitalThreadRequest} moveWorkflowStageDigitalThreadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadBoardApi
     */
    public moveWorkflowStageDigitalThread(moveWorkflowStageDigitalThreadRequest: MoveWorkflowStageDigitalThreadRequest, options?: AxiosRequestConfig) {
        return ThreadBoardApiFp(this.configuration).moveWorkflowStageDigitalThread(moveWorkflowStageDigitalThreadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 在Thread Board中將所有未讀的Digital Thread標記為已讀
     * @param {ReadAllUnreadDigitalThreadRequest} readAllUnreadDigitalThreadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadBoardApi
     */
    public readAllUnreadDigitalThread(readAllUnreadDigitalThreadRequest: ReadAllUnreadDigitalThreadRequest, options?: AxiosRequestConfig) {
        return ThreadBoardApiFp(this.configuration).readAllUnreadDigitalThread(readAllUnreadDigitalThreadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 在Thread Board中重新命名 Workflow Stage名稱
     * @param {RenameWorkflowStageRequest} renameWorkflowStageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadBoardApi
     */
    public renameWorkflowStage(renameWorkflowStageRequest: RenameWorkflowStageRequest, options?: AxiosRequestConfig) {
        return ThreadBoardApiFp(this.configuration).renameWorkflowStage(renameWorkflowStageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 以單位紀錄的是sortBy、onlyShowUnread、filter，以使用者紀錄的是search
     * @summary 在Thread Board中紀錄該單位(組織或團隊)及使用者的查詢條件
     * @param {GetThreadBoardRequest} getThreadBoardRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadBoardApi
     */
    public saveThreadBoardQuery(getThreadBoardRequest: GetThreadBoardRequest, options?: AxiosRequestConfig) {
        return ThreadBoardApiFp(this.configuration).saveThreadBoardQuery(getThreadBoardRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 在Thread Board中顯示 Workflow Stage
     * @param {HideWorkflowStageRequest} hideWorkflowStageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreadBoardApi
     */
    public showWorkflowStage(hideWorkflowStageRequest: HideWorkflowStageRequest, options?: AxiosRequestConfig) {
        return ThreadBoardApiFp(this.configuration).showWorkflowStage(hideWorkflowStageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 更新使用者系統環境語言
         * @param {UserChangeLanguagePostRequest} [userChangeLanguagePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userChangeLanguagePost: async (userChangeLanguagePostRequest?: UserChangeLanguagePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/change-language`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userChangeLanguagePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 使用者變更密碼
         * @param {UserChangePasswordPostRequest} [userChangePasswordPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userChangePasswordPost: async (userChangePasswordPostRequest?: UserChangePasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userChangePasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 回饋反饋時刪除補充資料
         * @param {UserFeedbackRemoveAttachmentPostRequest} [userFeedbackRemoveAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFeedbackRemoveAttachmentPost: async (userFeedbackRemoveAttachmentPostRequest?: UserFeedbackRemoveAttachmentPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/feedback/remove-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userFeedbackRemoveAttachmentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 回饋反饋
         * @param {UserFeedbackSendPostRequest} [userFeedbackSendPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFeedbackSendPost: async (userFeedbackSendPostRequest?: UserFeedbackSendPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/feedback/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userFeedbackSendPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 回饋反饋時上傳補充資料-產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFeedbackUploadAttachmentGetUploadUrlPost: async (userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/feedback/upload-attachment/get-upload-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userFeedbackUploadAttachmentGetUploadUrlPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 回饋反饋時上傳補充資料
         * @param {UserFeedbackUploadAttachmentPostRequest} [userFeedbackUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFeedbackUploadAttachmentPost: async (userFeedbackUploadAttachmentPostRequest?: UserFeedbackUploadAttachmentPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/feedback/upload-attachment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userFeedbackUploadAttachmentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 使用者忘記密碼時重設密碼
         * @param {UserForgotPasswordResetPasswordPostRequest} [userForgotPasswordResetPasswordPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userForgotPasswordResetPasswordPost: async (userForgotPasswordResetPasswordPostRequest?: UserForgotPasswordResetPasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/forgot-password/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userForgotPasswordResetPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 使用者忘記密碼時寄送驗證碼至註冊信箱
         * @param {UserForgotPasswordSendEmailPostRequest} [userForgotPasswordSendEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userForgotPasswordSendEmailPost: async (userForgotPasswordSendEmailPostRequest?: UserForgotPasswordSendEmailPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/forgot-password/send-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userForgotPasswordSendEmailPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 使用者忘記密碼時驗證驗證碼
         * @param {UserForgotPasswordVerifyPostRequest} [userForgotPasswordVerifyPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userForgotPasswordVerifyPost: async (userForgotPasswordVerifyPostRequest?: UserForgotPasswordVerifyPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/forgot-password/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userForgotPasswordVerifyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得使用者資料
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 取得使用者已加入的組織清單
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGetOrgListPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/get-org-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 舊使用者第一次登入新平台重設密碼
         * @param {UserOldUserResetPasswordPostRequest} [userOldUserResetPasswordPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOldUserResetPasswordPost: async (userOldUserResetPasswordPostRequest?: UserOldUserResetPasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/old-user/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userOldUserResetPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 使用者已讀公告
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userReadAnnouncementPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/read-announcement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 重新寄送驗證信
         * @param {UserResendVerifyEmailPostRequest} [userResendVerifyEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userResendVerifyEmailPost: async (userResendVerifyEmailPostRequest?: UserResendVerifyEmailPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/resend-verify-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userResendVerifyEmailPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新使用者資料
         * @param {UserUpdatePostRequest} [userUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdatePost: async (userUpdatePostRequest?: UserUpdatePostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 驗證使用者密碼
         * @param {UserVerifyPasswordPostRequest} [userVerifyPasswordPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userVerifyPasswordPost: async (userVerifyPasswordPostRequest?: UserVerifyPasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/verify-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userVerifyPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 驗證 User
         * @param {UserVerifyPostRequest} [userVerifyPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userVerifyPost: async (userVerifyPostRequest?: UserVerifyPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userVerifyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 更新使用者系統環境語言
         * @param {UserChangeLanguagePostRequest} [userChangeLanguagePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userChangeLanguagePost(userChangeLanguagePostRequest?: UserChangeLanguagePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userChangeLanguagePost(userChangeLanguagePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 使用者變更密碼
         * @param {UserChangePasswordPostRequest} [userChangePasswordPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userChangePasswordPost(userChangePasswordPostRequest?: UserChangePasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userChangePasswordPost(userChangePasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 回饋反饋時刪除補充資料
         * @param {UserFeedbackRemoveAttachmentPostRequest} [userFeedbackRemoveAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userFeedbackRemoveAttachmentPost(userFeedbackRemoveAttachmentPostRequest?: UserFeedbackRemoveAttachmentPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFeedbackUploadAttachmentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userFeedbackRemoveAttachmentPost(userFeedbackRemoveAttachmentPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 回饋反饋
         * @param {UserFeedbackSendPostRequest} [userFeedbackSendPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userFeedbackSendPost(userFeedbackSendPostRequest?: UserFeedbackSendPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userFeedbackSendPost(userFeedbackSendPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 回饋反饋時上傳補充資料-產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userFeedbackUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFeedbackUploadAttachmentGetUploadUrlPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userFeedbackUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 回饋反饋時上傳補充資料
         * @param {UserFeedbackUploadAttachmentPostRequest} [userFeedbackUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userFeedbackUploadAttachmentPost(userFeedbackUploadAttachmentPostRequest?: UserFeedbackUploadAttachmentPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFeedbackUploadAttachmentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userFeedbackUploadAttachmentPost(userFeedbackUploadAttachmentPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 使用者忘記密碼時重設密碼
         * @param {UserForgotPasswordResetPasswordPostRequest} [userForgotPasswordResetPasswordPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userForgotPasswordResetPasswordPost(userForgotPasswordResetPasswordPostRequest?: UserForgotPasswordResetPasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralRefreshTokenPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userForgotPasswordResetPasswordPost(userForgotPasswordResetPasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 使用者忘記密碼時寄送驗證碼至註冊信箱
         * @param {UserForgotPasswordSendEmailPostRequest} [userForgotPasswordSendEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userForgotPasswordSendEmailPost(userForgotPasswordSendEmailPostRequest?: UserForgotPasswordSendEmailPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResSuccessTrue>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userForgotPasswordSendEmailPost(userForgotPasswordSendEmailPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 使用者忘記密碼時驗證驗證碼
         * @param {UserForgotPasswordVerifyPostRequest} [userForgotPasswordVerifyPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userForgotPasswordVerifyPost(userForgotPasswordVerifyPostRequest?: UserForgotPasswordVerifyPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserForgotPasswordVerifyPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userForgotPasswordVerifyPost(userForgotPasswordVerifyPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得使用者資料
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 取得使用者已加入的組織清單
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGetOrgListPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGetOrgListPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGetOrgListPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 舊使用者第一次登入新平台重設密碼
         * @param {UserOldUserResetPasswordPostRequest} [userOldUserResetPasswordPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userOldUserResetPasswordPost(userOldUserResetPasswordPostRequest?: UserOldUserResetPasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralRefreshTokenPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userOldUserResetPasswordPost(userOldUserResetPasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 使用者已讀公告
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userReadAnnouncementPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userReadAnnouncementPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 重新寄送驗證信
         * @param {UserResendVerifyEmailPostRequest} [userResendVerifyEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userResendVerifyEmailPost(userResendVerifyEmailPostRequest?: UserResendVerifyEmailPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userResendVerifyEmailPost(userResendVerifyEmailPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新使用者資料
         * @param {UserUpdatePostRequest} [userUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userUpdatePost(userUpdatePostRequest?: UserUpdatePostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userUpdatePost(userUpdatePostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 驗證使用者密碼
         * @param {UserVerifyPasswordPostRequest} [userVerifyPasswordPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userVerifyPasswordPost(userVerifyPasswordPostRequest?: UserVerifyPasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserVerifyPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userVerifyPasswordPost(userVerifyPasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 驗證 User
         * @param {UserVerifyPostRequest} [userVerifyPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userVerifyPost(userVerifyPostRequest?: UserVerifyPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CodeRolePermissionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userVerifyPost(userVerifyPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary 更新使用者系統環境語言
         * @param {UserChangeLanguagePostRequest} [userChangeLanguagePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userChangeLanguagePost(userChangeLanguagePostRequest?: UserChangeLanguagePostRequest, options?: any): AxiosPromise<UserGet200Response> {
            return localVarFp.userChangeLanguagePost(userChangeLanguagePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 使用者變更密碼
         * @param {UserChangePasswordPostRequest} [userChangePasswordPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userChangePasswordPost(userChangePasswordPostRequest?: UserChangePasswordPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.userChangePasswordPost(userChangePasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 回饋反饋時刪除補充資料
         * @param {UserFeedbackRemoveAttachmentPostRequest} [userFeedbackRemoveAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFeedbackRemoveAttachmentPost(userFeedbackRemoveAttachmentPostRequest?: UserFeedbackRemoveAttachmentPostRequest, options?: any): AxiosPromise<UserFeedbackUploadAttachmentPost200Response> {
            return localVarFp.userFeedbackRemoveAttachmentPost(userFeedbackRemoveAttachmentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 回饋反饋
         * @param {UserFeedbackSendPostRequest} [userFeedbackSendPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFeedbackSendPost(userFeedbackSendPostRequest?: UserFeedbackSendPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.userFeedbackSendPost(userFeedbackSendPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 回饋反饋時上傳補充資料-產生S3檔案上傳url
         * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFeedbackUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: any): AxiosPromise<UserFeedbackUploadAttachmentGetUploadUrlPost200Response> {
            return localVarFp.userFeedbackUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 回饋反饋時上傳補充資料
         * @param {UserFeedbackUploadAttachmentPostRequest} [userFeedbackUploadAttachmentPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userFeedbackUploadAttachmentPost(userFeedbackUploadAttachmentPostRequest?: UserFeedbackUploadAttachmentPostRequest, options?: any): AxiosPromise<UserFeedbackUploadAttachmentPost200Response> {
            return localVarFp.userFeedbackUploadAttachmentPost(userFeedbackUploadAttachmentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 使用者忘記密碼時重設密碼
         * @param {UserForgotPasswordResetPasswordPostRequest} [userForgotPasswordResetPasswordPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userForgotPasswordResetPasswordPost(userForgotPasswordResetPasswordPostRequest?: UserForgotPasswordResetPasswordPostRequest, options?: any): AxiosPromise<GeneralRefreshTokenPost200Response> {
            return localVarFp.userForgotPasswordResetPasswordPost(userForgotPasswordResetPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 使用者忘記密碼時寄送驗證碼至註冊信箱
         * @param {UserForgotPasswordSendEmailPostRequest} [userForgotPasswordSendEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userForgotPasswordSendEmailPost(userForgotPasswordSendEmailPostRequest?: UserForgotPasswordSendEmailPostRequest, options?: any): AxiosPromise<ResSuccessTrue> {
            return localVarFp.userForgotPasswordSendEmailPost(userForgotPasswordSendEmailPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 使用者忘記密碼時驗證驗證碼
         * @param {UserForgotPasswordVerifyPostRequest} [userForgotPasswordVerifyPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userForgotPasswordVerifyPost(userForgotPasswordVerifyPostRequest?: UserForgotPasswordVerifyPostRequest, options?: any): AxiosPromise<UserForgotPasswordVerifyPost200Response> {
            return localVarFp.userForgotPasswordVerifyPost(userForgotPasswordVerifyPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得使用者資料
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(options?: any): AxiosPromise<UserGet200Response> {
            return localVarFp.userGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 取得使用者已加入的組織清單
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGetOrgListPost(options?: any): AxiosPromise<UserGetOrgListPost200Response> {
            return localVarFp.userGetOrgListPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 舊使用者第一次登入新平台重設密碼
         * @param {UserOldUserResetPasswordPostRequest} [userOldUserResetPasswordPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userOldUserResetPasswordPost(userOldUserResetPasswordPostRequest?: UserOldUserResetPasswordPostRequest, options?: any): AxiosPromise<GeneralRefreshTokenPost200Response> {
            return localVarFp.userOldUserResetPasswordPost(userOldUserResetPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 使用者已讀公告
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userReadAnnouncementPost(options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.userReadAnnouncementPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 重新寄送驗證信
         * @param {UserResendVerifyEmailPostRequest} [userResendVerifyEmailPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userResendVerifyEmailPost(userResendVerifyEmailPostRequest?: UserResendVerifyEmailPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.userResendVerifyEmailPost(userResendVerifyEmailPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新使用者資料
         * @param {UserUpdatePostRequest} [userUpdatePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userUpdatePost(userUpdatePostRequest?: UserUpdatePostRequest, options?: any): AxiosPromise<UserGet200Response> {
            return localVarFp.userUpdatePost(userUpdatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 驗證使用者密碼
         * @param {UserVerifyPasswordPostRequest} [userVerifyPasswordPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userVerifyPasswordPost(userVerifyPasswordPostRequest?: UserVerifyPasswordPostRequest, options?: any): AxiosPromise<UserVerifyPasswordPost200Response> {
            return localVarFp.userVerifyPasswordPost(userVerifyPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 驗證 User
         * @param {UserVerifyPostRequest} [userVerifyPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userVerifyPost(userVerifyPostRequest?: UserVerifyPostRequest, options?: any): AxiosPromise<CodeRolePermissionGet200Response> {
            return localVarFp.userVerifyPost(userVerifyPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary 更新使用者系統環境語言
     * @param {UserChangeLanguagePostRequest} [userChangeLanguagePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userChangeLanguagePost(userChangeLanguagePostRequest?: UserChangeLanguagePostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userChangeLanguagePost(userChangeLanguagePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 使用者變更密碼
     * @param {UserChangePasswordPostRequest} [userChangePasswordPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userChangePasswordPost(userChangePasswordPostRequest?: UserChangePasswordPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userChangePasswordPost(userChangePasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 回饋反饋時刪除補充資料
     * @param {UserFeedbackRemoveAttachmentPostRequest} [userFeedbackRemoveAttachmentPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userFeedbackRemoveAttachmentPost(userFeedbackRemoveAttachmentPostRequest?: UserFeedbackRemoveAttachmentPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userFeedbackRemoveAttachmentPost(userFeedbackRemoveAttachmentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 回饋反饋
     * @param {UserFeedbackSendPostRequest} [userFeedbackSendPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userFeedbackSendPost(userFeedbackSendPostRequest?: UserFeedbackSendPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userFeedbackSendPost(userFeedbackSendPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 回饋反饋時上傳補充資料-產生S3檔案上傳url
     * @param {UserFeedbackUploadAttachmentGetUploadUrlPostRequest} [userFeedbackUploadAttachmentGetUploadUrlPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userFeedbackUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest?: UserFeedbackUploadAttachmentGetUploadUrlPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userFeedbackUploadAttachmentGetUploadUrlPost(userFeedbackUploadAttachmentGetUploadUrlPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 回饋反饋時上傳補充資料
     * @param {UserFeedbackUploadAttachmentPostRequest} [userFeedbackUploadAttachmentPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userFeedbackUploadAttachmentPost(userFeedbackUploadAttachmentPostRequest?: UserFeedbackUploadAttachmentPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userFeedbackUploadAttachmentPost(userFeedbackUploadAttachmentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 使用者忘記密碼時重設密碼
     * @param {UserForgotPasswordResetPasswordPostRequest} [userForgotPasswordResetPasswordPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userForgotPasswordResetPasswordPost(userForgotPasswordResetPasswordPostRequest?: UserForgotPasswordResetPasswordPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userForgotPasswordResetPasswordPost(userForgotPasswordResetPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 使用者忘記密碼時寄送驗證碼至註冊信箱
     * @param {UserForgotPasswordSendEmailPostRequest} [userForgotPasswordSendEmailPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userForgotPasswordSendEmailPost(userForgotPasswordSendEmailPostRequest?: UserForgotPasswordSendEmailPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userForgotPasswordSendEmailPost(userForgotPasswordSendEmailPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 使用者忘記密碼時驗證驗證碼
     * @param {UserForgotPasswordVerifyPostRequest} [userForgotPasswordVerifyPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userForgotPasswordVerifyPost(userForgotPasswordVerifyPostRequest?: UserForgotPasswordVerifyPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userForgotPasswordVerifyPost(userForgotPasswordVerifyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得使用者資料
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 取得使用者已加入的組織清單
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userGetOrgListPost(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userGetOrgListPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 舊使用者第一次登入新平台重設密碼
     * @param {UserOldUserResetPasswordPostRequest} [userOldUserResetPasswordPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userOldUserResetPasswordPost(userOldUserResetPasswordPostRequest?: UserOldUserResetPasswordPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userOldUserResetPasswordPost(userOldUserResetPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 使用者已讀公告
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userReadAnnouncementPost(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userReadAnnouncementPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 重新寄送驗證信
     * @param {UserResendVerifyEmailPostRequest} [userResendVerifyEmailPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userResendVerifyEmailPost(userResendVerifyEmailPostRequest?: UserResendVerifyEmailPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userResendVerifyEmailPost(userResendVerifyEmailPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新使用者資料
     * @param {UserUpdatePostRequest} [userUpdatePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userUpdatePost(userUpdatePostRequest?: UserUpdatePostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userUpdatePost(userUpdatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 驗證使用者密碼
     * @param {UserVerifyPasswordPostRequest} [userVerifyPasswordPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userVerifyPasswordPost(userVerifyPasswordPostRequest?: UserVerifyPasswordPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userVerifyPasswordPost(userVerifyPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 驗證 User
     * @param {UserVerifyPostRequest} [userVerifyPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userVerifyPost(userVerifyPostRequest?: UserVerifyPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userVerifyPost(userVerifyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


